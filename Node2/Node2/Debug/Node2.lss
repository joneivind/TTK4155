
Node2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000de  00800200  000016f0  00001784  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007f  008002de  008002de  00001862  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001862  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000278  00000000  00000000  000018be  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001fdd  00000000  00000000  00001b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001113  00000000  00000000  00003b13  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001461  00000000  00000000  00004c26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005b0  00000000  00000000  00006088  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000749  00000000  00000000  00006638  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010e3  00000000  00000000  00006d81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001e8  00000000  00000000  00007e64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__bad_interrupt>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	d0 c4       	rjmp	.+2464   	; 0xa3e <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	8e c0       	rjmp	.+284    	; 0x1c6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	3a 05       	cpc	r19, r10
      e6:	8c 05       	cpc	r24, r12
      e8:	8c 05       	cpc	r24, r12
      ea:	8c 05       	cpc	r24, r12
      ec:	8c 05       	cpc	r24, r12
      ee:	8c 05       	cpc	r24, r12
      f0:	8c 05       	cpc	r24, r12
      f2:	8c 05       	cpc	r24, r12
      f4:	3a 05       	cpc	r19, r10
      f6:	8c 05       	cpc	r24, r12
      f8:	8c 05       	cpc	r24, r12
      fa:	8c 05       	cpc	r24, r12
      fc:	8c 05       	cpc	r24, r12
      fe:	8c 05       	cpc	r24, r12
     100:	8c 05       	cpc	r24, r12
     102:	8c 05       	cpc	r24, r12
     104:	3c 05       	cpc	r19, r12
     106:	8c 05       	cpc	r24, r12
     108:	8c 05       	cpc	r24, r12
     10a:	8c 05       	cpc	r24, r12
     10c:	8c 05       	cpc	r24, r12
     10e:	8c 05       	cpc	r24, r12
     110:	8c 05       	cpc	r24, r12
     112:	8c 05       	cpc	r24, r12
     114:	8c 05       	cpc	r24, r12
     116:	8c 05       	cpc	r24, r12
     118:	8c 05       	cpc	r24, r12
     11a:	8c 05       	cpc	r24, r12
     11c:	8c 05       	cpc	r24, r12
     11e:	8c 05       	cpc	r24, r12
     120:	8c 05       	cpc	r24, r12
     122:	8c 05       	cpc	r24, r12
     124:	3c 05       	cpc	r19, r12
     126:	8c 05       	cpc	r24, r12
     128:	8c 05       	cpc	r24, r12
     12a:	8c 05       	cpc	r24, r12
     12c:	8c 05       	cpc	r24, r12
     12e:	8c 05       	cpc	r24, r12
     130:	8c 05       	cpc	r24, r12
     132:	8c 05       	cpc	r24, r12
     134:	8c 05       	cpc	r24, r12
     136:	8c 05       	cpc	r24, r12
     138:	8c 05       	cpc	r24, r12
     13a:	8c 05       	cpc	r24, r12
     13c:	8c 05       	cpc	r24, r12
     13e:	8c 05       	cpc	r24, r12
     140:	8c 05       	cpc	r24, r12
     142:	8c 05       	cpc	r24, r12
     144:	88 05       	cpc	r24, r8
     146:	8c 05       	cpc	r24, r12
     148:	8c 05       	cpc	r24, r12
     14a:	8c 05       	cpc	r24, r12
     14c:	8c 05       	cpc	r24, r12
     14e:	8c 05       	cpc	r24, r12
     150:	8c 05       	cpc	r24, r12
     152:	8c 05       	cpc	r24, r12
     154:	65 05       	cpc	r22, r5
     156:	8c 05       	cpc	r24, r12
     158:	8c 05       	cpc	r24, r12
     15a:	8c 05       	cpc	r24, r12
     15c:	8c 05       	cpc	r24, r12
     15e:	8c 05       	cpc	r24, r12
     160:	8c 05       	cpc	r24, r12
     162:	8c 05       	cpc	r24, r12
     164:	8c 05       	cpc	r24, r12
     166:	8c 05       	cpc	r24, r12
     168:	8c 05       	cpc	r24, r12
     16a:	8c 05       	cpc	r24, r12
     16c:	8c 05       	cpc	r24, r12
     16e:	8c 05       	cpc	r24, r12
     170:	8c 05       	cpc	r24, r12
     172:	8c 05       	cpc	r24, r12
     174:	59 05       	cpc	r21, r9
     176:	8c 05       	cpc	r24, r12
     178:	8c 05       	cpc	r24, r12
     17a:	8c 05       	cpc	r24, r12
     17c:	8c 05       	cpc	r24, r12
     17e:	8c 05       	cpc	r24, r12
     180:	8c 05       	cpc	r24, r12
     182:	8c 05       	cpc	r24, r12
     184:	77 05       	cpc	r23, r7

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	12 e0       	ldi	r17, 0x02	; 2
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	e0 ef       	ldi	r30, 0xF0	; 240
     19e:	f6 e1       	ldi	r31, 0x16	; 22
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	ae 3d       	cpi	r26, 0xDE	; 222
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	23 e0       	ldi	r18, 0x03	; 3
     1b2:	ae ed       	ldi	r26, 0xDE	; 222
     1b4:	b2 e0       	ldi	r27, 0x02	; 2
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	ad 35       	cpi	r26, 0x5D	; 93
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	28 d3       	rcall	.+1616   	; 0x812 <main>
     1c2:	0c 94 76 0b 	jmp	0x16ec	; 0x16ec <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <ADC_init>:
#define SAMPLES 51 // Number of measurements
uint16_t storageArray[SAMPLES] = {0};

//Setting reg values for adc
void ADC_init(void){
	ADCSRA	|= (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
     1c8:	ea e7       	ldi	r30, 0x7A	; 122
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	87 68       	ori	r24, 0x87	; 135
     1d0:	80 83       	st	Z, r24
	ADMUX	|= (1<<REFS0);
     1d2:	ec e7       	ldi	r30, 0x7C	; 124
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	80 81       	ld	r24, Z
     1d8:	80 64       	ori	r24, 0x40	; 64
     1da:	80 83       	st	Z, r24
     1dc:	08 95       	ret

000001de <medianFilter>:
}

//Median filtering
uint16_t medianFilter(uint16_t inputValue)
{	
     1de:	ef 92       	push	r14
     1e0:	ff 92       	push	r15
     1e2:	0f 93       	push	r16
     1e4:	1f 93       	push	r17
     1e6:	cf 93       	push	r28
     1e8:	df 93       	push	r29
     1ea:	cd b7       	in	r28, 0x3d	; 61
     1ec:	de b7       	in	r29, 0x3e	; 62
     1ee:	c6 56       	subi	r28, 0x66	; 102
     1f0:	d1 09       	sbc	r29, r1
     1f2:	0f b6       	in	r0, 0x3f	; 63
     1f4:	f8 94       	cli
     1f6:	de bf       	out	0x3e, r29	; 62
     1f8:	0f be       	out	0x3f, r0	; 63
     1fa:	cd bf       	out	0x3d, r28	; 61
	uint16_t newVal, temp, temp2;
	uint16_t sorted[SAMPLES] = {0};
     1fc:	fe 01       	movw	r30, r28
     1fe:	31 96       	adiw	r30, 0x01	; 1
     200:	26 e6       	ldi	r18, 0x66	; 102
     202:	df 01       	movw	r26, r30
     204:	1d 92       	st	X+, r1
     206:	2a 95       	dec	r18
     208:	e9 f7       	brne	.-6      	; 0x204 <medianFilter+0x26>
     20a:	24 e4       	ldi	r18, 0x44	; 68
     20c:	33 e0       	ldi	r19, 0x03	; 3
     20e:	ee ed       	ldi	r30, 0xDE	; 222
     210:	f2 e0       	ldi	r31, 0x02	; 2
	
	newVal = inputValue;
	
	for(int i=0; i<SAMPLES; i++) // >> Shifting values >>
	{
		temp = storageArray[i];
     212:	50 81       	ld	r21, Z
     214:	41 81       	ldd	r20, Z+1	; 0x01
		storageArray[i] = newVal;
     216:	81 93       	st	Z+, r24
     218:	91 93       	st	Z+, r25
	uint16_t newVal, temp, temp2;
	uint16_t sorted[SAMPLES] = {0};
	
	newVal = inputValue;
	
	for(int i=0; i<SAMPLES; i++) // >> Shifting values >>
     21a:	e2 17       	cp	r30, r18
     21c:	f3 07       	cpc	r31, r19
     21e:	19 f0       	breq	.+6      	; 0x226 <medianFilter+0x48>
	{
		temp = storageArray[i];
		storageArray[i] = newVal;
		newVal = temp;
     220:	85 2f       	mov	r24, r21
     222:	94 2f       	mov	r25, r20
     224:	f6 cf       	rjmp	.-20     	; 0x212 <medianFilter+0x34>
     226:	be 01       	movw	r22, r28
     228:	6f 5f       	subi	r22, 0xFF	; 255
     22a:	7f 4f       	sbci	r23, 0xFF	; 255
	uint16_t newVal, temp, temp2;
	uint16_t sorted[SAMPLES] = {0};
	
	newVal = inputValue;
	
	for(int i=0; i<SAMPLES; i++) // >> Shifting values >>
     22c:	db 01       	movw	r26, r22
     22e:	ee ed       	ldi	r30, 0xDE	; 222
     230:	f2 e0       	ldi	r31, 0x02	; 2
		storageArray[i] = newVal;
		newVal = temp;
	}
	
	for(int i=0; i<SAMPLES;i++) // Create sorting array
		sorted[i] = storageArray[i];
     232:	81 91       	ld	r24, Z+
     234:	91 91       	ld	r25, Z+
     236:	8d 93       	st	X+, r24
     238:	9d 93       	st	X+, r25
		temp = storageArray[i];
		storageArray[i] = newVal;
		newVal = temp;
	}
	
	for(int i=0; i<SAMPLES;i++) // Create sorting array
     23a:	e2 17       	cp	r30, r18
     23c:	f3 07       	cpc	r31, r19
     23e:	c9 f7       	brne	.-14     	; 0x232 <medianFilter+0x54>
     240:	ae 01       	movw	r20, r28
     242:	49 59       	subi	r20, 0x99	; 153
     244:	5f 4f       	sbci	r21, 0xFF	; 255
     246:	7b 01       	movw	r14, r22
	uint16_t newVal, temp, temp2;
	uint16_t sorted[SAMPLES] = {0};
	
	newVal = inputValue;
	
	for(int i=0; i<SAMPLES; i++) // >> Shifting values >>
     248:	06 2f       	mov	r16, r22
     24a:	17 2f       	mov	r17, r23
     24c:	17 c0       	rjmp	.+46     	; 0x27c <medianFilter+0x9e>
	
	for(int i=0; i<SAMPLES; i++) // Bubble sorting
	{
		for(int j=0; j<SAMPLES; j++)
		{
			if(sorted[i] < sorted[j])
     24e:	d7 01       	movw	r26, r14
     250:	8d 91       	ld	r24, X+
     252:	9c 91       	ld	r25, X
     254:	20 81       	ld	r18, Z
     256:	31 81       	ldd	r19, Z+1	; 0x01
     258:	82 17       	cp	r24, r18
     25a:	93 07       	cpc	r25, r19
     25c:	28 f4       	brcc	.+10     	; 0x268 <medianFilter+0x8a>
			{
				temp2 = sorted[i];
				sorted[i] = sorted[j];
     25e:	db 01       	movw	r26, r22
     260:	2d 93       	st	X+, r18
     262:	3c 93       	st	X, r19
				sorted[j] = temp2;
     264:	91 83       	std	Z+1, r25	; 0x01
     266:	80 83       	st	Z, r24
     268:	32 96       	adiw	r30, 0x02	; 2
	for(int i=0; i<SAMPLES;i++) // Create sorting array
		sorted[i] = storageArray[i];
	
	for(int i=0; i<SAMPLES; i++) // Bubble sorting
	{
		for(int j=0; j<SAMPLES; j++)
     26a:	e4 17       	cp	r30, r20
     26c:	f5 07       	cpc	r31, r21
     26e:	79 f7       	brne	.-34     	; 0x24e <medianFilter+0x70>
     270:	b2 e0       	ldi	r27, 0x02	; 2
     272:	eb 0e       	add	r14, r27
     274:	f1 1c       	adc	r15, r1
	}
	
	for(int i=0; i<SAMPLES;i++) // Create sorting array
		sorted[i] = storageArray[i];
	
	for(int i=0; i<SAMPLES; i++) // Bubble sorting
     276:	e4 16       	cp	r14, r20
     278:	f5 06       	cpc	r15, r21
     27a:	21 f0       	breq	.+8      	; 0x284 <medianFilter+0xa6>
	uint16_t newVal, temp, temp2;
	uint16_t sorted[SAMPLES] = {0};
	
	newVal = inputValue;
	
	for(int i=0; i<SAMPLES; i++) // >> Shifting values >>
     27c:	e0 2f       	mov	r30, r16
     27e:	f1 2f       	mov	r31, r17
     280:	b7 01       	movw	r22, r14
     282:	e5 cf       	rjmp	.-54     	; 0x24e <medianFilter+0x70>
			}
		}
	}
	
	return sorted[SAMPLES - (SAMPLES/2)]; // Return median value
}
     284:	8d a9       	ldd	r24, Y+53	; 0x35
     286:	9e a9       	ldd	r25, Y+54	; 0x36
     288:	ca 59       	subi	r28, 0x9A	; 154
     28a:	df 4f       	sbci	r29, 0xFF	; 255
     28c:	0f b6       	in	r0, 0x3f	; 63
     28e:	f8 94       	cli
     290:	de bf       	out	0x3e, r29	; 62
     292:	0f be       	out	0x3f, r0	; 63
     294:	cd bf       	out	0x3d, r28	; 61
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	1f 91       	pop	r17
     29c:	0f 91       	pop	r16
     29e:	ff 90       	pop	r15
     2a0:	ef 90       	pop	r14
     2a2:	08 95       	ret

000002a4 <ADC_read>:

//Read from adc channel
uint16_t ADC_read(uint8_t channel){
	channel &= 0b00000111;
	ADMUX	= (ADMUX & 0xF8)|channel;
     2a4:	ec e7       	ldi	r30, 0x7C	; 124
     2a6:	f0 e0       	ldi	r31, 0x00	; 0
     2a8:	90 81       	ld	r25, Z
	return sorted[SAMPLES - (SAMPLES/2)]; // Return median value
}

//Read from adc channel
uint16_t ADC_read(uint8_t channel){
	channel &= 0b00000111;
     2aa:	87 70       	andi	r24, 0x07	; 7
	ADMUX	= (ADMUX & 0xF8)|channel;
     2ac:	98 7f       	andi	r25, 0xF8	; 248
     2ae:	98 2b       	or	r25, r24
     2b0:	90 83       	st	Z, r25
	ADCSRA	|= (1 << ADSC);
     2b2:	ea e7       	ldi	r30, 0x7A	; 122
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	80 81       	ld	r24, Z
     2b8:	80 64       	ori	r24, 0x40	; 64
     2ba:	80 83       	st	Z, r24

	while((ADCSRA & (1<<ADSC))){ ; }
     2bc:	80 81       	ld	r24, Z
     2be:	86 fd       	sbrc	r24, 6
     2c0:	fd cf       	rjmp	.-6      	; 0x2bc <ADC_read+0x18>

	return ADC;
     2c2:	80 91 78 00 	lds	r24, 0x0078
     2c6:	90 91 79 00 	lds	r25, 0x0079
     2ca:	08 95       	ret

000002cc <CAN_setMode>:
	printf("CAN initiated!\n");
}

//Set CAN mode
void CAN_setMode(char mode){
	MCP_bitMod(MCP_CANCTRL,MODE_MASK,mode);
     2cc:	48 2f       	mov	r20, r24
     2ce:	60 ee       	ldi	r22, 0xE0	; 224
     2d0:	8f e0       	ldi	r24, 0x0F	; 15
     2d2:	50 c1       	rjmp	.+672    	; 0x574 <MCP_bitMod>
     2d4:	08 95       	ret

000002d6 <CAN_init>:
#include <string.h>
#include <util/delay.h>

//Initiate can bus with spi and mpc
void CAN_init(){	
	SPI_init();
     2d6:	6f d3       	rcall	.+1758   	; 0x9b6 <SPI_init>
	MCP_reset();
     2d8:	63 d1       	rcall	.+710    	; 0x5a0 <MCP_reset>
	
	printf("CAN initiating...\n");
     2da:	8c e0       	ldi	r24, 0x0C	; 12
     2dc:	92 e0       	ldi	r25, 0x02	; 2
     2de:	fd d5       	rcall	.+3066   	; 0xeda <puts>

	MCP_bitMod(MCP_RXB0CTRL, 0x60, MCP_FILTER_OFF); // No filter
     2e0:	40 e6       	ldi	r20, 0x60	; 96
     2e2:	60 e6       	ldi	r22, 0x60	; 96
     2e4:	80 e6       	ldi	r24, 0x60	; 96
     2e6:	46 d1       	rcall	.+652    	; 0x574 <MCP_bitMod>
	MCP_bitMod(MCP_RXB0CTRL, 0x04, MCP_ROLLOVER_OFF); // Disable rollover mode on MCP
     2e8:	40 e0       	ldi	r20, 0x00	; 0
     2ea:	64 e0       	ldi	r22, 0x04	; 4
     2ec:	80 e6       	ldi	r24, 0x60	; 96
     2ee:	42 d1       	rcall	.+644    	; 0x574 <MCP_bitMod>
	MCP_bitMod(MCP_CANINTE, 0xFF, MCP_RX_INT);
     2f0:	43 e0       	ldi	r20, 0x03	; 3
     2f2:	6f ef       	ldi	r22, 0xFF	; 255
     2f4:	8b e2       	ldi	r24, 0x2B	; 43
     2f6:	3e d1       	rcall	.+636    	; 0x574 <MCP_bitMod>
	//MCP_bitMod(MCP_CANCTRL, 0xE0,MODE_LOOPBACK); // uncomment to use loop back mode
	CAN_setMode(MODE_NORMAL); // CAN normal mode
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	e8 df       	rcall	.-48     	; 0x2cc <CAN_setMode>
	
	uint8_t canStat = MCP_read(MCP_CANSTAT);
     2fc:	8e e0       	ldi	r24, 0x0E	; 14
     2fe:	0f d1       	rcall	.+542    	; 0x51e <MCP_read>
	
	//Print CAN mode
	switch (canStat & MODE_MASK){
     300:	98 2f       	mov	r25, r24
     302:	90 7e       	andi	r25, 0xE0	; 224
     304:	90 34       	cpi	r25, 0x40	; 64
     306:	81 f0       	breq	.+32     	; 0x328 <CAN_init+0x52>
     308:	90 38       	cpi	r25, 0x80	; 128
     30a:	d1 f0       	breq	.+52     	; 0x340 <CAN_init+0x6a>
     30c:	91 11       	cpse	r25, r1
     30e:	23 c0       	rjmp	.+70     	; 0x356 <CAN_init+0x80>
		case MODE_NORMAL:
		printf("CAN is in Normal Mode: %d.\n", canStat);
     310:	1f 92       	push	r1
     312:	8f 93       	push	r24
     314:	8e e1       	ldi	r24, 0x1E	; 30
     316:	92 e0       	ldi	r25, 0x02	; 2
     318:	9f 93       	push	r25
     31a:	8f 93       	push	r24
     31c:	cd d5       	rcall	.+2970   	; 0xeb8 <printf>
		break;
     31e:	0f 90       	pop	r0
     320:	0f 90       	pop	r0
     322:	0f 90       	pop	r0
     324:	0f 90       	pop	r0
     326:	17 c0       	rjmp	.+46     	; 0x356 <CAN_init+0x80>
		case MODE_LOOPBACK:
		printf("CAN is in Loopback Mode: %d.\n", canStat);
     328:	1f 92       	push	r1
     32a:	8f 93       	push	r24
     32c:	8a e3       	ldi	r24, 0x3A	; 58
     32e:	92 e0       	ldi	r25, 0x02	; 2
     330:	9f 93       	push	r25
     332:	8f 93       	push	r24
     334:	c1 d5       	rcall	.+2946   	; 0xeb8 <printf>
		break;
     336:	0f 90       	pop	r0
     338:	0f 90       	pop	r0
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	0b c0       	rjmp	.+22     	; 0x356 <CAN_init+0x80>
		case MODE_CONFIG:
		printf("CAN is in Config Mode: %d.\n", canStat);
     340:	1f 92       	push	r1
     342:	8f 93       	push	r24
     344:	88 e5       	ldi	r24, 0x58	; 88
     346:	92 e0       	ldi	r25, 0x02	; 2
     348:	9f 93       	push	r25
     34a:	8f 93       	push	r24
     34c:	b5 d5       	rcall	.+2922   	; 0xeb8 <printf>
		break;
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	0f 90       	pop	r0
	}
	printf("CAN initiated!\n");
     356:	84 e7       	ldi	r24, 0x74	; 116
     358:	92 e0       	ldi	r25, 0x02	; 2
     35a:	bf c5       	rjmp	.+2942   	; 0xeda <puts>
     35c:	08 95       	ret

0000035e <CAN_sendMessage>:
void CAN_setMode(char mode){
	MCP_bitMod(MCP_CANCTRL,MODE_MASK,mode);
}

//Send CAN message
void CAN_sendMessage(CAN_message * message){	
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	7c 01       	movw	r14, r24
	MCP_write(MCP_TXB0SIDL, (message->id << 5));
     36c:	fc 01       	movw	r30, r24
     36e:	60 81       	ld	r22, Z
     370:	62 95       	swap	r22
     372:	66 0f       	add	r22, r22
     374:	60 7e       	andi	r22, 0xE0	; 224
     376:	82 e3       	ldi	r24, 0x32	; 50
     378:	e1 d0       	rcall	.+450    	; 0x53c <MCP_write>
	MCP_write(MCP_TXB0SIDH, (message->id >> 3));
     37a:	f7 01       	movw	r30, r14
     37c:	60 81       	ld	r22, Z
     37e:	66 95       	lsr	r22
     380:	66 95       	lsr	r22
     382:	66 95       	lsr	r22
     384:	81 e3       	ldi	r24, 0x31	; 49
     386:	da d0       	rcall	.+436    	; 0x53c <MCP_write>
	MCP_write(MCP_TXB0DLC, message->length);
     388:	f7 01       	movw	r30, r14
     38a:	61 81       	ldd	r22, Z+1	; 0x01
     38c:	85 e3       	ldi	r24, 0x35	; 53
     38e:	d6 d0       	rcall	.+428    	; 0x53c <MCP_write>
	
	for(int i=0; i<message->length; i++){
     390:	f7 01       	movw	r30, r14
     392:	81 81       	ldd	r24, Z+1	; 0x01
     394:	88 23       	and	r24, r24
     396:	91 f0       	breq	.+36     	; 0x3bc <CAN_sendMessage+0x5e>
     398:	87 01       	movw	r16, r14
     39a:	0e 5f       	subi	r16, 0xFE	; 254
     39c:	1f 4f       	sbci	r17, 0xFF	; 255
     39e:	c0 e0       	ldi	r28, 0x00	; 0
     3a0:	d0 e0       	ldi	r29, 0x00	; 0
		MCP_write(MCP_TXB0D0 + i, message->data[i]);
     3a2:	f8 01       	movw	r30, r16
     3a4:	61 91       	ld	r22, Z+
     3a6:	8f 01       	movw	r16, r30
     3a8:	8c 2f       	mov	r24, r28
     3aa:	8a 5c       	subi	r24, 0xCA	; 202
     3ac:	c7 d0       	rcall	.+398    	; 0x53c <MCP_write>
void CAN_sendMessage(CAN_message * message){	
	MCP_write(MCP_TXB0SIDL, (message->id << 5));
	MCP_write(MCP_TXB0SIDH, (message->id >> 3));
	MCP_write(MCP_TXB0DLC, message->length);
	
	for(int i=0; i<message->length; i++){
     3ae:	21 96       	adiw	r28, 0x01	; 1
     3b0:	f7 01       	movw	r30, r14
     3b2:	21 81       	ldd	r18, Z+1	; 0x01
     3b4:	30 e0       	ldi	r19, 0x00	; 0
     3b6:	c2 17       	cp	r28, r18
     3b8:	d3 07       	cpc	r29, r19
     3ba:	9c f3       	brlt	.-26     	; 0x3a2 <CAN_sendMessage+0x44>
		MCP_write(MCP_TXB0D0 + i, message->data[i]);
	}
	
	MCP_requestToSend(MCP_RTS_TX0);
     3bc:	81 e8       	ldi	r24, 0x81	; 129
     3be:	cf d0       	rcall	.+414    	; 0x55e <MCP_requestToSend>
}
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	ff 90       	pop	r15
     3ca:	ef 90       	pop	r14
     3cc:	08 95       	ret

000003ce <CAN_recieve>:

//Recieve CAN message
void CAN_recieve(CAN_message * receivedMessage){
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	df 93       	push	r29
     3d4:	ec 01       	movw	r28, r24
	//Check if CAN has message
	if(MCP_read(MCP_CANSTAT) & 0x0C){
     3d6:	8e e0       	ldi	r24, 0x0E	; 14
     3d8:	a2 d0       	rcall	.+324    	; 0x51e <MCP_read>
     3da:	8c 70       	andi	r24, 0x0C	; 12
     3dc:	19 f1       	breq	.+70     	; 0x424 <CAN_recieve+0x56>
		receivedMessage->id = (MCP_read(MCP_RXB0SIDH) << 3) | (MCP_read(MCP_RXB0SIDL) >> 5);
     3de:	81 e6       	ldi	r24, 0x61	; 97
     3e0:	9e d0       	rcall	.+316    	; 0x51e <MCP_read>
     3e2:	18 2f       	mov	r17, r24
     3e4:	82 e6       	ldi	r24, 0x62	; 98
     3e6:	9b d0       	rcall	.+310    	; 0x51e <MCP_read>
     3e8:	11 0f       	add	r17, r17
     3ea:	11 0f       	add	r17, r17
     3ec:	11 0f       	add	r17, r17
     3ee:	82 95       	swap	r24
     3f0:	86 95       	lsr	r24
     3f2:	87 70       	andi	r24, 0x07	; 7
     3f4:	18 2b       	or	r17, r24
     3f6:	18 83       	st	Y, r17
		receivedMessage->length = MCP_read(MCP_RXB0DLC) & 0x0F;
     3f8:	85 e6       	ldi	r24, 0x65	; 101
     3fa:	91 d0       	rcall	.+290    	; 0x51e <MCP_read>
     3fc:	8f 70       	andi	r24, 0x0F	; 15
     3fe:	89 83       	std	Y+1, r24	; 0x01
		for(uint8_t i=0; i<receivedMessage->length; i++){
     400:	88 23       	and	r24, r24
     402:	61 f0       	breq	.+24     	; 0x41c <CAN_recieve+0x4e>
     404:	10 e0       	ldi	r17, 0x00	; 0
			receivedMessage->data[i] = MCP_read(MCP_RXB0D0 + i);
     406:	86 e6       	ldi	r24, 0x66	; 102
     408:	81 0f       	add	r24, r17
     40a:	89 d0       	rcall	.+274    	; 0x51e <MCP_read>
     40c:	fe 01       	movw	r30, r28
     40e:	e1 0f       	add	r30, r17
     410:	f1 1d       	adc	r31, r1
     412:	82 83       	std	Z+2, r24	; 0x02
void CAN_recieve(CAN_message * receivedMessage){
	//Check if CAN has message
	if(MCP_read(MCP_CANSTAT) & 0x0C){
		receivedMessage->id = (MCP_read(MCP_RXB0SIDH) << 3) | (MCP_read(MCP_RXB0SIDL) >> 5);
		receivedMessage->length = MCP_read(MCP_RXB0DLC) & 0x0F;
		for(uint8_t i=0; i<receivedMessage->length; i++){
     414:	1f 5f       	subi	r17, 0xFF	; 255
     416:	89 81       	ldd	r24, Y+1	; 0x01
     418:	18 17       	cp	r17, r24
     41a:	a8 f3       	brcs	.-22     	; 0x406 <CAN_recieve+0x38>
			receivedMessage->data[i] = MCP_read(MCP_RXB0D0 + i);
		}
		MCP_bitMod(MCP_CANINTF, MCP_RX0IF, 0);
     41c:	40 e0       	ldi	r20, 0x00	; 0
     41e:	61 e0       	ldi	r22, 0x01	; 1
     420:	8c e2       	ldi	r24, 0x2C	; 44
     422:	a8 d0       	rcall	.+336    	; 0x574 <MCP_bitMod>
	}
}
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	1f 91       	pop	r17
     42a:	08 95       	ret

0000042c <dacWrite>:
	TWI_Master_Initialise();
	TWIaddress = address;
}

//Write to i2c
void dacWrite(uint8_t channel, uint8_t val){	
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	00 d0       	rcall	.+0      	; 0x432 <dacWrite+0x6>
     432:	cd b7       	in	r28, 0x3d	; 61
     434:	de b7       	in	r29, 0x3e	; 62
	uint8_t msg[3] = { MAX520_TWI_ADDR_BASE | ((TWIaddress & 0x07) << 1), channel & 0x07, val };	
     436:	90 91 44 03 	lds	r25, 0x0344
     43a:	97 70       	andi	r25, 0x07	; 7
     43c:	99 0f       	add	r25, r25
     43e:	90 65       	ori	r25, 0x50	; 80
     440:	99 83       	std	Y+1, r25	; 0x01
     442:	87 70       	andi	r24, 0x07	; 7
     444:	8a 83       	std	Y+2, r24	; 0x02
     446:	6b 83       	std	Y+3, r22	; 0x03
	TWI_Start_Transceiver_With_Data(msg, 3);
     448:	63 e0       	ldi	r22, 0x03	; 3
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	d5 d2       	rcall	.+1450   	; 0x9fa <TWI_Start_Transceiver_With_Data>
}
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	0f 90       	pop	r0
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <setLives>:

uint8_t ball_detected = 0;

//Set initial number of lives
void setLives(uint8_t numLives){	
	newgame.lives = numLives;
     45c:	80 93 52 03 	sts	0x0352, r24
     460:	08 95       	ret

00000462 <get_lives>:
}

//Checks if ball is at the bottom -> if yes, subtract lives
uint16_t get_lives(){
     462:	cf 93       	push	r28
     464:	df 93       	push	r29
	uint16_t detect_ball = medianFilter(ADC_read(1))*10;
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	1d df       	rcall	.-454    	; 0x2a4 <ADC_read>
     46a:	b9 de       	rcall	.-654    	; 0x1de <medianFilter>
     46c:	ec 01       	movw	r28, r24
     46e:	cc 0f       	add	r28, r28
     470:	dd 1f       	adc	r29, r29
     472:	88 0f       	add	r24, r24
     474:	99 1f       	adc	r25, r25
     476:	88 0f       	add	r24, r24
     478:	99 1f       	adc	r25, r25
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
     47e:	c8 0f       	add	r28, r24
     480:	d9 1f       	adc	r29, r25
	printf("Detect ball: %d\n", detect_ball);
     482:	df 93       	push	r29
     484:	cf 93       	push	r28
     486:	8b ea       	ldi	r24, 0xAB	; 171
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	9f 93       	push	r25
     48c:	8f 93       	push	r24
     48e:	14 d5       	rcall	.+2600   	; 0xeb8 <printf>
	if(detect_ball <= 3){
     490:	0f 90       	pop	r0
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	24 97       	sbiw	r28, 0x04	; 4
     49a:	a8 f4       	brcc	.+42     	; 0x4c6 <get_lives+0x64>
		newgame.lives--;
     49c:	80 91 52 03 	lds	r24, 0x0352
     4a0:	81 50       	subi	r24, 0x01	; 1
     4a2:	80 93 52 03 	sts	0x0352, r24
		while(medianFilter(ADC_read(1))*10 <= 3); // Must be activated when score sensors are connected
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	fd de       	rcall	.-518    	; 0x2a4 <ADC_read>
     4aa:	99 de       	rcall	.-718    	; 0x1de <medianFilter>
     4ac:	9c 01       	movw	r18, r24
     4ae:	22 0f       	add	r18, r18
     4b0:	33 1f       	adc	r19, r19
     4b2:	88 0f       	add	r24, r24
     4b4:	99 1f       	adc	r25, r25
     4b6:	88 0f       	add	r24, r24
     4b8:	99 1f       	adc	r25, r25
     4ba:	88 0f       	add	r24, r24
     4bc:	99 1f       	adc	r25, r25
     4be:	82 0f       	add	r24, r18
     4c0:	93 1f       	adc	r25, r19
     4c2:	04 97       	sbiw	r24, 0x04	; 4
     4c4:	80 f3       	brcs	.-32     	; 0x4a6 <get_lives+0x44>
	}
}
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	08 95       	ret

000004cc <solenoid_init>:

//Setup solenoid
void solenoid_init(){
	DDRL	|= (1 << DDL0);
     4cc:	ea e0       	ldi	r30, 0x0A	; 10
     4ce:	f1 e0       	ldi	r31, 0x01	; 1
     4d0:	80 81       	ld	r24, Z
     4d2:	81 60       	ori	r24, 0x01	; 1
     4d4:	80 83       	st	Z, r24
	PORTL	|= (1 << PL0);
     4d6:	eb e0       	ldi	r30, 0x0B	; 11
     4d8:	f1 e0       	ldi	r31, 0x01	; 1
     4da:	80 81       	ld	r24, Z
     4dc:	81 60       	ori	r24, 0x01	; 1
     4de:	80 83       	st	Z, r24
     4e0:	08 95       	ret

000004e2 <solenoid_trigger>:
}

//Trigger solenoid depending on current mode
void solenoid_trigger(uint8_t mode, uint8_t trigger){	
	if((mode == 1 && trigger > 80) || mode == 0 && trigger > 0){
     4e2:	81 30       	cpi	r24, 0x01	; 1
     4e4:	19 f4       	brne	.+6      	; 0x4ec <solenoid_trigger+0xa>
     4e6:	61 35       	cpi	r22, 0x51	; 81
     4e8:	a0 f0       	brcs	.+40     	; 0x512 <solenoid_trigger+0x30>
     4ea:	04 c0       	rjmp	.+8      	; 0x4f4 <solenoid_trigger+0x12>
     4ec:	81 11       	cpse	r24, r1
     4ee:	11 c0       	rjmp	.+34     	; 0x512 <solenoid_trigger+0x30>
     4f0:	66 23       	and	r22, r22
     4f2:	79 f0       	breq	.+30     	; 0x512 <solenoid_trigger+0x30>
		PORTL |= (1 << PL0);
     4f4:	eb e0       	ldi	r30, 0x0B	; 11
     4f6:	f1 e0       	ldi	r31, 0x01	; 1
     4f8:	80 81       	ld	r24, Z
     4fa:	81 60       	ori	r24, 0x01	; 1
     4fc:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4fe:	2f ef       	ldi	r18, 0xFF	; 255
     500:	80 e7       	ldi	r24, 0x70	; 112
     502:	92 e0       	ldi	r25, 0x02	; 2
     504:	21 50       	subi	r18, 0x01	; 1
     506:	80 40       	sbci	r24, 0x00	; 0
     508:	90 40       	sbci	r25, 0x00	; 0
     50a:	e1 f7       	brne	.-8      	; 0x504 <solenoid_trigger+0x22>
     50c:	00 c0       	rjmp	.+0      	; 0x50e <solenoid_trigger+0x2c>
     50e:	00 00       	nop
     510:	08 95       	ret
		_delay_ms(50);
	}
	else
		PORTL &= ~(1 << PL0);
     512:	eb e0       	ldi	r30, 0x0B	; 11
     514:	f1 e0       	ldi	r31, 0x01	; 1
     516:	80 81       	ld	r24, Z
     518:	8e 7f       	andi	r24, 0xFE	; 254
     51a:	80 83       	st	Z, r24
     51c:	08 95       	ret

0000051e <MCP_read>:
	SPI_slaveEnable(1); //enable CS pin	
	SPI_write(MCP_READ_STATUS); //read status instruction	
	char temp = SPI_read();
	SPI_slaveEnable(0); //disable CS pin
	return temp;
}
     51e:	cf 93       	push	r28
     520:	c8 2f       	mov	r28, r24
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	59 d2       	rcall	.+1202   	; 0x9d8 <SPI_slaveEnable>
     526:	83 e0       	ldi	r24, 0x03	; 3
     528:	4e d2       	rcall	.+1180   	; 0x9c6 <SPI_write>
     52a:	8c 2f       	mov	r24, r28
     52c:	4c d2       	rcall	.+1176   	; 0x9c6 <SPI_write>
     52e:	50 d2       	rcall	.+1184   	; 0x9d0 <SPI_read>
     530:	c8 2f       	mov	r28, r24
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	51 d2       	rcall	.+1186   	; 0x9d8 <SPI_slaveEnable>
     536:	8c 2f       	mov	r24, r28
     538:	cf 91       	pop	r28
     53a:	08 95       	ret

0000053c <MCP_write>:
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	d8 2f       	mov	r29, r24
     542:	c6 2f       	mov	r28, r22
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	48 d2       	rcall	.+1168   	; 0x9d8 <SPI_slaveEnable>
     548:	82 e0       	ldi	r24, 0x02	; 2
     54a:	3d d2       	rcall	.+1146   	; 0x9c6 <SPI_write>
     54c:	8d 2f       	mov	r24, r29
     54e:	3b d2       	rcall	.+1142   	; 0x9c6 <SPI_write>
     550:	8c 2f       	mov	r24, r28
     552:	39 d2       	rcall	.+1138   	; 0x9c6 <SPI_write>
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	40 d2       	rcall	.+1152   	; 0x9d8 <SPI_slaveEnable>
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <MCP_requestToSend>:
     55e:	cf 93       	push	r28
     560:	c8 2f       	mov	r28, r24
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	39 d2       	rcall	.+1138   	; 0x9d8 <SPI_slaveEnable>
     566:	8c 2f       	mov	r24, r28
     568:	81 68       	ori	r24, 0x81	; 129
     56a:	2d d2       	rcall	.+1114   	; 0x9c6 <SPI_write>
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	34 d2       	rcall	.+1128   	; 0x9d8 <SPI_slaveEnable>
     570:	cf 91       	pop	r28
     572:	08 95       	ret

00000574 <MCP_bitMod>:

//MCP set bits
void MCP_bitMod(char adr, char mask, char data){
     574:	1f 93       	push	r17
     576:	cf 93       	push	r28
     578:	df 93       	push	r29
     57a:	18 2f       	mov	r17, r24
     57c:	d6 2f       	mov	r29, r22
     57e:	c4 2f       	mov	r28, r20
	SPI_slaveEnable(1); //enable CS pin
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	2a d2       	rcall	.+1108   	; 0x9d8 <SPI_slaveEnable>
	SPI_write(MCP_BITMOD); //bit modify instruction
     584:	85 e0       	ldi	r24, 0x05	; 5
     586:	1f d2       	rcall	.+1086   	; 0x9c6 <SPI_write>
	SPI_write(adr); //set address
     588:	81 2f       	mov	r24, r17
     58a:	1d d2       	rcall	.+1082   	; 0x9c6 <SPI_write>
	SPI_write(mask); //set bitmask
     58c:	8d 2f       	mov	r24, r29
     58e:	1b d2       	rcall	.+1078   	; 0x9c6 <SPI_write>
	SPI_write(data); //write data	
     590:	8c 2f       	mov	r24, r28
     592:	19 d2       	rcall	.+1074   	; 0x9c6 <SPI_write>
	SPI_slaveEnable(0); //disable CS pin
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	20 d2       	rcall	.+1088   	; 0x9d8 <SPI_slaveEnable>
}
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	1f 91       	pop	r17
     59e:	08 95       	ret

000005a0 <MCP_reset>:

//MCP reset
void MCP_reset(){
	SPI_slaveEnable(1); //enable CS pin	
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	1a d2       	rcall	.+1076   	; 0x9d8 <SPI_slaveEnable>
	SPI_write(MCP_RESET); //reset instruction	
     5a4:	80 ec       	ldi	r24, 0xC0	; 192
     5a6:	0f d2       	rcall	.+1054   	; 0x9c6 <SPI_write>
     5a8:	8f e3       	ldi	r24, 0x3F	; 63
     5aa:	9c e9       	ldi	r25, 0x9C	; 156
     5ac:	01 97       	sbiw	r24, 0x01	; 1
     5ae:	f1 f7       	brne	.-4      	; 0x5ac <MCP_reset+0xc>
     5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <MCP_reset+0x12>
     5b2:	00 00       	nop
	_delay_ms(10);
	SPI_slaveEnable(0); //disable CS pin
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	10 c2       	rjmp	.+1056   	; 0x9d8 <SPI_slaveEnable>
     5b8:	08 95       	ret

000005ba <MOTOR_reset>:
}

//Reset encoder value
void MOTOR_reset(){
	//set RST signal
	PORTH &= ~(1 << PH6);
     5ba:	e2 e0       	ldi	r30, 0x02	; 2
     5bc:	f1 e0       	ldi	r31, 0x01	; 1
     5be:	80 81       	ld	r24, Z
     5c0:	8f 7b       	andi	r24, 0xBF	; 191
     5c2:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5c4:	8a e6       	ldi	r24, 0x6A	; 106
     5c6:	8a 95       	dec	r24
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <MOTOR_reset+0xc>
     5ca:	00 c0       	rjmp	.+0      	; 0x5cc <MOTOR_reset+0x12>
	
	_delay_us(20); //Wait for motor to reset.
	
	//Set PIN6 bit in PORTH to clear RST signal.
	PORTH |= (1 << PH6);
     5cc:	80 81       	ld	r24, Z
     5ce:	80 64       	ori	r24, 0x40	; 64
     5d0:	80 83       	st	Z, r24
     5d2:	08 95       	ret

000005d4 <motor_init>:
//Initial encoder value
uint16_t encoderVal = 0x0000;

//Initialize routine for motor
void motor_init(){
	sei();
     5d4:	78 94       	sei
	DDRH |= (1 << PH1)|(1 << PH4);
     5d6:	e1 e0       	ldi	r30, 0x01	; 1
     5d8:	f1 e0       	ldi	r31, 0x01	; 1
     5da:	80 81       	ld	r24, Z
     5dc:	82 61       	ori	r24, 0x12	; 18
     5de:	80 83       	st	Z, r24
	DDRH |= (1 << PH5)|(1 << PH6)|(1 << PH3);
     5e0:	80 81       	ld	r24, Z
     5e2:	88 66       	ori	r24, 0x68	; 104
     5e4:	80 83       	st	Z, r24
	
	PORTH |= (1 << PH4);
     5e6:	e2 e0       	ldi	r30, 0x02	; 2
     5e8:	f1 e0       	ldi	r31, 0x01	; 1
     5ea:	80 81       	ld	r24, Z
     5ec:	80 61       	ori	r24, 0x10	; 16
     5ee:	80 83       	st	Z, r24
	
	PORTH |= (1 << PH5);
     5f0:	80 81       	ld	r24, Z
     5f2:	80 62       	ori	r24, 0x20	; 32
     5f4:	80 83       	st	Z, r24
	PORTH |= (1 << PH6);
     5f6:	80 81       	ld	r24, Z
     5f8:	80 64       	ori	r24, 0x40	; 64
     5fa:	80 83       	st	Z, r24
	
	//Initialize encoder value
	MOTOR_reset();
     5fc:	de cf       	rjmp	.-68     	; 0x5ba <MOTOR_reset>
     5fe:	08 95       	ret

00000600 <motorDirection>:
	dacWrite(0, abs(speed));
}

//Method to set the direction of motor 
void motorDirection(uint8_t dir){		
	if(dir){
     600:	88 23       	and	r24, r24
     602:	31 f0       	breq	.+12     	; 0x610 <motorDirection+0x10>
		PORTH &= ~(1 << PINH1);
     604:	e2 e0       	ldi	r30, 0x02	; 2
     606:	f1 e0       	ldi	r31, 0x01	; 1
     608:	80 81       	ld	r24, Z
     60a:	8d 7f       	andi	r24, 0xFD	; 253
     60c:	80 83       	st	Z, r24
     60e:	08 95       	ret
	}
	else{
		PORTH |= (1 << PINH1);
     610:	e2 e0       	ldi	r30, 0x02	; 2
     612:	f1 e0       	ldi	r31, 0x01	; 1
     614:	80 81       	ld	r24, Z
     616:	82 60       	ori	r24, 0x02	; 2
     618:	80 83       	st	Z, r24
     61a:	08 95       	ret

0000061c <motorEncoderRead>:
int16_t motorEncoderRead(){
		uint8_t MSB;
		uint8_t LSB;
				
		//Set !OE low
		PORTH &= ~(1 << PH5);	
     61c:	e2 e0       	ldi	r30, 0x02	; 2
     61e:	f1 e0       	ldi	r31, 0x01	; 1
     620:	80 81       	ld	r24, Z
     622:	8f 7d       	andi	r24, 0xDF	; 223
     624:	80 83       	st	Z, r24
		//Set SEL low	
		PORTH &= ~(1 << PH3);
     626:	80 81       	ld	r24, Z
     628:	87 7f       	andi	r24, 0xF7	; 247
     62a:	80 83       	st	Z, r24
     62c:	8a e6       	ldi	r24, 0x6A	; 106
     62e:	8a 95       	dec	r24
     630:	f1 f7       	brne	.-4      	; 0x62e <motorEncoderRead+0x12>
     632:	00 c0       	rjmp	.+0      	; 0x634 <motorEncoderRead+0x18>
		
		_delay_us(20);
		
		//Read MSB
		MSB = PINK;		
     634:	20 91 06 01 	lds	r18, 0x0106
		
		//Set SEL high
		PORTH |= (1 << PH3);
     638:	80 81       	ld	r24, Z
     63a:	88 60       	ori	r24, 0x08	; 8
     63c:	80 83       	st	Z, r24
     63e:	8a e6       	ldi	r24, 0x6A	; 106
     640:	8a 95       	dec	r24
     642:	f1 f7       	brne	.-4      	; 0x640 <motorEncoderRead+0x24>
     644:	00 c0       	rjmp	.+0      	; 0x646 <motorEncoderRead+0x2a>
		
		_delay_us(20);
		
		//Read LSB
		LSB = PINK;		
     646:	80 91 06 01 	lds	r24, 0x0106
		
		//Process data		
		encoderVal = ((MSB<<8) | LSB);
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	92 2b       	or	r25, r18
     64e:	90 93 46 03 	sts	0x0346, r25
     652:	80 93 45 03 	sts	0x0345, r24
		
		return encoderVal;
}
     656:	08 95       	ret

00000658 <setKp>:

//Method for setting Kp in the PID controller from from external node
void setKp(uint8_t * newKp){
	kp = (*newKp) * 0.1;
     658:	fc 01       	movw	r30, r24
     65a:	60 81       	ld	r22, Z
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	c4 d2       	rcall	.+1416   	; 0xbec <__floatsisf>
     664:	2d ec       	ldi	r18, 0xCD	; 205
     666:	3c ec       	ldi	r19, 0xCC	; 204
     668:	4c ec       	ldi	r20, 0xCC	; 204
     66a:	5d e3       	ldi	r21, 0x3D	; 61
     66c:	23 d3       	rcall	.+1606   	; 0xcb4 <__mulsf3>
     66e:	60 93 06 02 	sts	0x0206, r22
     672:	70 93 07 02 	sts	0x0207, r23
     676:	80 93 08 02 	sts	0x0208, r24
     67a:	90 93 09 02 	sts	0x0209, r25
     67e:	08 95       	ret

00000680 <MOTOR_PIDcontroller_Pos>:
}

//PID controller for motor position
int16_t MOTOR_PIDcontroller_Pos(uint8_t pos){
     680:	cf 92       	push	r12
     682:	df 92       	push	r13
     684:	ef 92       	push	r14
     686:	ff 92       	push	r15
     688:	0f 93       	push	r16
     68a:	1f 93       	push	r17
     68c:	cf 93       	push	r28
     68e:	df 93       	push	r29
     690:	18 2f       	mov	r17, r24

	//Read measurement
	int16_t measured_pos = abs(motorEncoderRead());
     692:	c4 df       	rcall	.-120    	; 0x61c <motorEncoderRead>
     694:	ec 01       	movw	r28, r24
	
	int16_t uMax = 8000;
	uint8_t uMin = 0;
	
	//Convert input to valid range
	int16_t setpoint = uMax * 0.01 * pos;
     696:	61 2f       	mov	r22, r17
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	a6 d2       	rcall	.+1356   	; 0xbec <__floatsisf>
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	40 ea       	ldi	r20, 0xA0	; 160
     6a6:	52 e4       	ldi	r21, 0x42	; 66
     6a8:	05 d3       	rcall	.+1546   	; 0xcb4 <__mulsf3>
     6aa:	6d d2       	rcall	.+1242   	; 0xb86 <__fixsfsi>

//PID controller for motor position
int16_t MOTOR_PIDcontroller_Pos(uint8_t pos){

	//Read measurement
	int16_t measured_pos = abs(motorEncoderRead());
     6ac:	9e 01       	movw	r18, r28
     6ae:	dd 23       	and	r29, r29
     6b0:	24 f4       	brge	.+8      	; 0x6ba <MOTOR_PIDcontroller_Pos+0x3a>
     6b2:	22 27       	eor	r18, r18
     6b4:	33 27       	eor	r19, r19
     6b6:	2c 1b       	sub	r18, r28
     6b8:	3d 0b       	sbc	r19, r29
	
	//Convert input to valid range
	int16_t setpoint = uMax * 0.01 * pos;
	
	
	int16_t error = (setpoint-measured_pos);
     6ba:	8b 01       	movw	r16, r22
     6bc:	02 1b       	sub	r16, r18
     6be:	13 0b       	sbc	r17, r19
	
	int16_t d_error = last_error - error * 100;
     6c0:	2c e9       	ldi	r18, 0x9C	; 156
     6c2:	20 03       	mulsu	r18, r16
     6c4:	e0 01       	movw	r28, r0
     6c6:	21 9f       	mul	r18, r17
     6c8:	d0 0d       	add	r29, r0
     6ca:	11 24       	eor	r1, r1
     6cc:	80 91 47 03 	lds	r24, 0x0347
     6d0:	90 91 48 03 	lds	r25, 0x0348
     6d4:	c8 0f       	add	r28, r24
     6d6:	d9 1f       	adc	r29, r25
	
	error_sum += error;
     6d8:	80 91 49 03 	lds	r24, 0x0349
     6dc:	90 91 4a 03 	lds	r25, 0x034A
     6e0:	80 0f       	add	r24, r16
     6e2:	91 1f       	adc	r25, r17
	if((abs(error_sum) > uMax) && error_sum >= 0)
     6e4:	9c 01       	movw	r18, r24
     6e6:	99 23       	and	r25, r25
     6e8:	24 f4       	brge	.+8      	; 0x6f2 <MOTOR_PIDcontroller_Pos+0x72>
     6ea:	22 27       	eor	r18, r18
     6ec:	33 27       	eor	r19, r19
     6ee:	28 1b       	sub	r18, r24
     6f0:	39 0b       	sbc	r19, r25
     6f2:	21 34       	cpi	r18, 0x41	; 65
     6f4:	3f 41       	sbci	r19, 0x1F	; 31
     6f6:	2c f4       	brge	.+10     	; 0x702 <MOTOR_PIDcontroller_Pos+0x82>
	
	int16_t error = (setpoint-measured_pos);
	
	int16_t d_error = last_error - error * 100;
	
	error_sum += error;
     6f8:	90 93 4a 03 	sts	0x034A, r25
     6fc:	80 93 49 03 	sts	0x0349, r24
     700:	0f c0       	rjmp	.+30     	; 0x720 <MOTOR_PIDcontroller_Pos+0xa0>
	if((abs(error_sum) > uMax) && error_sum >= 0)
     702:	99 23       	and	r25, r25
     704:	3c f0       	brlt	.+14     	; 0x714 <MOTOR_PIDcontroller_Pos+0x94>
		error_sum = uMax;
     706:	80 e4       	ldi	r24, 0x40	; 64
     708:	9f e1       	ldi	r25, 0x1F	; 31
     70a:	90 93 4a 03 	sts	0x034A, r25
     70e:	80 93 49 03 	sts	0x0349, r24
     712:	06 c0       	rjmp	.+12     	; 0x720 <MOTOR_PIDcontroller_Pos+0xa0>
	else if((abs(error_sum) > uMax) && error_sum <= 0)
		error_sum = -uMax;	
     714:	80 ec       	ldi	r24, 0xC0	; 192
     716:	90 ee       	ldi	r25, 0xE0	; 224
     718:	90 93 4a 03 	sts	0x034A, r25
     71c:	80 93 49 03 	sts	0x0349, r24
	
	int16_t pTerm = kp * error;
     720:	b8 01       	movw	r22, r16
     722:	88 27       	eor	r24, r24
     724:	77 fd       	sbrc	r23, 7
     726:	80 95       	com	r24
     728:	98 2f       	mov	r25, r24
     72a:	60 d2       	rcall	.+1216   	; 0xbec <__floatsisf>
     72c:	20 91 06 02 	lds	r18, 0x0206
     730:	30 91 07 02 	lds	r19, 0x0207
     734:	40 91 08 02 	lds	r20, 0x0208
     738:	50 91 09 02 	lds	r21, 0x0209
     73c:	bb d2       	rcall	.+1398   	; 0xcb4 <__mulsf3>
     73e:	23 d2       	rcall	.+1094   	; 0xb86 <__fixsfsi>
     740:	6b 01       	movw	r12, r22
     742:	7c 01       	movw	r14, r24
	int16_t iTerm = ki * error_sum;
     744:	60 91 49 03 	lds	r22, 0x0349
     748:	70 91 4a 03 	lds	r23, 0x034A
     74c:	88 27       	eor	r24, r24
     74e:	77 fd       	sbrc	r23, 7
     750:	80 95       	com	r24
     752:	98 2f       	mov	r25, r24
     754:	4b d2       	rcall	.+1174   	; 0xbec <__floatsisf>
     756:	2d ec       	ldi	r18, 0xCD	; 205
     758:	3c ec       	ldi	r19, 0xCC	; 204
     75a:	4c ec       	ldi	r20, 0xCC	; 204
     75c:	5d e3       	ldi	r21, 0x3D	; 61
     75e:	aa d2       	rcall	.+1364   	; 0xcb4 <__mulsf3>
     760:	12 d2       	rcall	.+1060   	; 0xb86 <__fixsfsi>
	int16_t dTerm = kd * d_error;
	
	int16_t output = pTerm + iTerm + dTerm;
     762:	c6 0e       	add	r12, r22
     764:	d7 1e       	adc	r13, r23
	else if((abs(error_sum) > uMax) && error_sum <= 0)
		error_sum = -uMax;	
	
	int16_t pTerm = kp * error;
	int16_t iTerm = ki * error_sum;
	int16_t dTerm = kd * d_error;
     766:	be 01       	movw	r22, r28
     768:	88 27       	eor	r24, r24
     76a:	77 fd       	sbrc	r23, 7
     76c:	80 95       	com	r24
     76e:	98 2f       	mov	r25, r24
     770:	3d d2       	rcall	.+1146   	; 0xbec <__floatsisf>
     772:	2a e0       	ldi	r18, 0x0A	; 10
     774:	37 ed       	ldi	r19, 0xD7	; 215
     776:	43 e2       	ldi	r20, 0x23	; 35
     778:	5c e3       	ldi	r21, 0x3C	; 60
     77a:	9c d2       	rcall	.+1336   	; 0xcb4 <__mulsf3>
     77c:	04 d2       	rcall	.+1032   	; 0xb86 <__fixsfsi>
	
	int16_t output = pTerm + iTerm + dTerm;
     77e:	6c 0d       	add	r22, r12
     780:	7d 1d       	adc	r23, r13
	if(abs(output) > uMax)
     782:	cb 01       	movw	r24, r22
     784:	77 23       	and	r23, r23
     786:	24 f4       	brge	.+8      	; 0x790 <MOTOR_PIDcontroller_Pos+0x110>
     788:	88 27       	eor	r24, r24
     78a:	99 27       	eor	r25, r25
     78c:	86 1b       	sub	r24, r22
     78e:	97 0b       	sbc	r25, r23
     790:	81 34       	cpi	r24, 0x41	; 65
     792:	9f 41       	sbci	r25, 0x1F	; 31
     794:	14 f0       	brlt	.+4      	; 0x79a <MOTOR_PIDcontroller_Pos+0x11a>
		output = uMax;
     796:	60 e4       	ldi	r22, 0x40	; 64
     798:	7f e1       	ldi	r23, 0x1F	; 31
	else if((abs(output) > uMax) && output <= 0)
		output = -uMax;
		
	last_error = error;
     79a:	10 93 48 03 	sts	0x0348, r17
     79e:	00 93 47 03 	sts	0x0347, r16
		
	return output;
     7a2:	cb 01       	movw	r24, r22
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	ff 90       	pop	r15
     7ae:	ef 90       	pop	r14
     7b0:	df 90       	pop	r13
     7b2:	cf 90       	pop	r12
     7b4:	08 95       	ret

000007b6 <motorSpeedPos>:
	//Set PIN6 bit in PORTH to clear RST signal.
	PORTH |= (1 << PH6);
}

//Set speed and direction of motor based on absolute position of slider
void motorSpeedPos(uint16_t pos){	
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
	int16_t speed = MOTOR_PIDcontroller_Pos(pos);
     7be:	60 df       	rcall	.-320    	; 0x680 <MOTOR_PIDcontroller_Pos>
	speed = speed / 20;
     7c0:	64 e1       	ldi	r22, 0x14	; 20
     7c2:	70 e0       	ldi	r23, 0x00	; 0
     7c4:	02 d3       	rcall	.+1540   	; 0xdca <__divmodhi4>
     7c6:	eb 01       	movw	r28, r22
     7c8:	8b 01       	movw	r16, r22
	
	//set motor direction
	if(speed < 0)
     7ca:	77 23       	and	r23, r23
     7cc:	1c f4       	brge	.+6      	; 0x7d4 <motorSpeedPos+0x1e>
		motorDirection(1);
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	17 df       	rcall	.-466    	; 0x600 <motorDirection>
     7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <motorSpeedPos+0x22>
	else
		motorDirection(0);
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	14 df       	rcall	.-472    	; 0x600 <motorDirection>
	
	//Cap motor speed
	if(abs(speed) > maxSpeed)
     7d8:	80 91 0a 02 	lds	r24, 0x020A
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	9e 01       	movw	r18, r28
     7e0:	11 23       	and	r17, r17
     7e2:	24 f4       	brge	.+8      	; 0x7ec <motorSpeedPos+0x36>
     7e4:	22 27       	eor	r18, r18
     7e6:	33 27       	eor	r19, r19
     7e8:	2c 1b       	sub	r18, r28
     7ea:	3d 0b       	sbc	r19, r29
     7ec:	82 17       	cp	r24, r18
     7ee:	93 07       	cpc	r25, r19
     7f0:	0c f0       	brlt	.+2      	; 0x7f4 <motorSpeedPos+0x3e>
}

//Set speed and direction of motor based on absolute position of slider
void motorSpeedPos(uint16_t pos){	
	int16_t speed = MOTOR_PIDcontroller_Pos(pos);
	speed = speed / 20;
     7f2:	ce 01       	movw	r24, r28
	//Cap motor speed
	if(abs(speed) > maxSpeed)
		speed = maxSpeed;	
	
	//Write to dac
	dacWrite(0, abs(speed));
     7f4:	bc 01       	movw	r22, r24
     7f6:	99 23       	and	r25, r25
     7f8:	24 f4       	brge	.+8      	; 0x802 <motorSpeedPos+0x4c>
     7fa:	66 27       	eor	r22, r22
     7fc:	77 27       	eor	r23, r23
     7fe:	68 1b       	sub	r22, r24
     800:	79 0b       	sbc	r23, r25
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	12 de       	rcall	.-988    	; 0x42c <dacWrite>
}
     808:	df 91       	pop	r29
     80a:	cf 91       	pop	r28
     80c:	1f 91       	pop	r17
     80e:	0f 91       	pop	r16
     810:	08 95       	ret

00000812 <main>:
#include <stdio.h>
#include <string.h>
#include <util/delay.h>

int main(void)
{
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	cd b7       	in	r28, 0x3d	; 61
     818:	de b7       	in	r29, 0x3e	; 62
     81a:	64 97       	sbiw	r28, 0x14	; 20
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	f8 94       	cli
     820:	de bf       	out	0x3e, r29	; 62
     822:	0f be       	out	0x3f, r0	; 63
     824:	cd bf       	out	0x3d, r28	; 61
	//Initialize commands
	uartInit();
     826:	9e d1       	rcall	.+828    	; 0xb64 <uartInit>
	CAN_init();
     828:	56 dd       	rcall	.-1364   	; 0x2d6 <CAN_init>
	TC_init();
     82a:	8b d0       	rcall	.+278    	; 0x942 <TC_init>
	ADC_init();
     82c:	cd dc       	rcall	.-1638   	; 0x1c8 <ADC_init>
	solenoid_init();
     82e:	4e de       	rcall	.-868    	; 0x4cc <solenoid_init>
	motor_init();
     830:	d1 de       	rcall	.-606    	; 0x5d4 <motor_init>
	TWI_Master_Initialise();
     832:	d9 d0       	rcall	.+434    	; 0x9e6 <TWI_Master_Initialise>
	
	//Set up CAN messages
	CAN_message message;
	message.id = 2;
     834:	82 e0       	ldi	r24, 0x02	; 2
     836:	89 83       	std	Y+1, r24	; 0x01
	message.length = 1;
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	8a 83       	std	Y+2, r24	; 0x02
	
	CAN_message receivedMessage;
	printf("Initializing node 2...\n");
     83c:	8c eb       	ldi	r24, 0xBC	; 188
     83e:	92 e0       	ldi	r25, 0x02	; 2
     840:	4c d3       	rcall	.+1688   	; 0xeda <puts>
	uint8_t motor;
	uint8_t servo;
	uint8_t solenoid;
	
	//Set number of lives
	setLives(10);
     842:	8a e0       	ldi	r24, 0x0A	; 10
     844:	0b de       	rcall	.-1002   	; 0x45c <setLives>
			get_lives(); 
			_delay_ms(10);
			
			//Transmit score back to node 1
			message.data[0] = newgame.lives; 
			printf("Lives: %d\n", message.data[0]);
     846:	03 ed       	ldi	r16, 0xD3	; 211
     848:	12 e0       	ldi	r17, 0x02	; 2
	setLives(10);
	
	while(1)
    {		
		//Check current game mode
        CAN_recieve(&receivedMessage);
     84a:	ce 01       	movw	r24, r28
     84c:	0b 96       	adiw	r24, 0x0b	; 11
     84e:	bf dd       	rcall	.-1154   	; 0x3ce <CAN_recieve>
		gameActive = receivedMessage.data[6];		
		//CAN_printMessage(&receivedMessage); //Print out CAN for debugging		
		
		//If game mode is active, start game
		if (gameActive)
     850:	8b 89       	ldd	r24, Y+19	; 0x13
     852:	88 23       	and	r24, r24
     854:	09 f4       	brne	.+2      	; 0x858 <main+0x46>
     856:	69 c0       	rjmp	.+210    	; 0x92a <main+0x118>
		{			
			//Set mode and P-value
			setKp(&receivedMessage.data[4]);
     858:	ce 01       	movw	r24, r28
     85a:	41 96       	adiw	r24, 0x11	; 17
     85c:	fd de       	rcall	.-518    	; 0x658 <setKp>
			mode = receivedMessage.data[5];
     85e:	fa 88       	ldd	r15, Y+18	; 0x12
			
			//Get controller data from CAN message
			switch(mode){
     860:	ff 20       	and	r15, r15
     862:	21 f0       	breq	.+8      	; 0x86c <main+0x5a>
     864:	21 e0       	ldi	r18, 0x01	; 1
     866:	f2 16       	cp	r15, r18
     868:	29 f0       	breq	.+10     	; 0x874 <main+0x62>
     86a:	40 c0       	rjmp	.+128    	; 0x8ec <main+0xda>
				case 0:				
					servo = receivedMessage.data[0];
     86c:	dd 84       	ldd	r13, Y+13	; 0x0d
					solenoid = receivedMessage.data[2];
     86e:	cf 84       	ldd	r12, Y+15	; 0x0f
					motor = receivedMessage.data[3];
     870:	e8 88       	ldd	r14, Y+16	; 0x10
				break;
     872:	3c c0       	rjmp	.+120    	; 0x8ec <main+0xda>
				case 1:
					motor = abs(ADC_read(2))*0.1;
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	16 dd       	rcall	.-1492   	; 0x2a4 <ADC_read>
     878:	99 23       	and	r25, r25
     87a:	1c f4       	brge	.+6      	; 0x882 <main+0x70>
     87c:	91 95       	neg	r25
     87e:	81 95       	neg	r24
     880:	91 09       	sbc	r25, r1
     882:	bc 01       	movw	r22, r24
     884:	88 27       	eor	r24, r24
     886:	77 fd       	sbrc	r23, 7
     888:	80 95       	com	r24
     88a:	98 2f       	mov	r25, r24
     88c:	af d1       	rcall	.+862    	; 0xbec <__floatsisf>
     88e:	2d ec       	ldi	r18, 0xCD	; 205
     890:	3c ec       	ldi	r19, 0xCC	; 204
     892:	4c ec       	ldi	r20, 0xCC	; 204
     894:	5d e3       	ldi	r21, 0x3D	; 61
     896:	0e d2       	rcall	.+1052   	; 0xcb4 <__mulsf3>
     898:	7b d1       	rcall	.+758    	; 0xb90 <__fixunssfsi>
     89a:	e6 2e       	mov	r14, r22
					servo = abs(ADC_read(3))*0.1;
     89c:	83 e0       	ldi	r24, 0x03	; 3
     89e:	02 dd       	rcall	.-1532   	; 0x2a4 <ADC_read>
     8a0:	99 23       	and	r25, r25
     8a2:	1c f4       	brge	.+6      	; 0x8aa <main+0x98>
     8a4:	91 95       	neg	r25
     8a6:	81 95       	neg	r24
     8a8:	91 09       	sbc	r25, r1
     8aa:	bc 01       	movw	r22, r24
     8ac:	88 27       	eor	r24, r24
     8ae:	77 fd       	sbrc	r23, 7
     8b0:	80 95       	com	r24
     8b2:	98 2f       	mov	r25, r24
     8b4:	9b d1       	rcall	.+822    	; 0xbec <__floatsisf>
     8b6:	2d ec       	ldi	r18, 0xCD	; 205
     8b8:	3c ec       	ldi	r19, 0xCC	; 204
     8ba:	4c ec       	ldi	r20, 0xCC	; 204
     8bc:	5d e3       	ldi	r21, 0x3D	; 61
     8be:	fa d1       	rcall	.+1012   	; 0xcb4 <__mulsf3>
     8c0:	67 d1       	rcall	.+718    	; 0xb90 <__fixunssfsi>
     8c2:	d6 2e       	mov	r13, r22
					solenoid = abs(ADC_read(4))*0.1;			
     8c4:	84 e0       	ldi	r24, 0x04	; 4
     8c6:	ee dc       	rcall	.-1572   	; 0x2a4 <ADC_read>
     8c8:	99 23       	and	r25, r25
     8ca:	1c f4       	brge	.+6      	; 0x8d2 <main+0xc0>
     8cc:	91 95       	neg	r25
     8ce:	81 95       	neg	r24
     8d0:	91 09       	sbc	r25, r1
     8d2:	bc 01       	movw	r22, r24
     8d4:	88 27       	eor	r24, r24
     8d6:	77 fd       	sbrc	r23, 7
     8d8:	80 95       	com	r24
     8da:	98 2f       	mov	r25, r24
     8dc:	87 d1       	rcall	.+782    	; 0xbec <__floatsisf>
     8de:	2d ec       	ldi	r18, 0xCD	; 205
     8e0:	3c ec       	ldi	r19, 0xCC	; 204
     8e2:	4c ec       	ldi	r20, 0xCC	; 204
     8e4:	5d e3       	ldi	r21, 0x3D	; 61
     8e6:	e6 d1       	rcall	.+972    	; 0xcb4 <__mulsf3>
     8e8:	53 d1       	rcall	.+678    	; 0xb90 <__fixunssfsi>
     8ea:	c6 2e       	mov	r12, r22
				break;
			}
			
			//Send controller values to servo, solenoid, motor
			PWM_setDutyCycle(servo);
     8ec:	8d 2d       	mov	r24, r13
     8ee:	49 d0       	rcall	.+146    	; 0x982 <PWM_setDutyCycle>
			solenoid_trigger(mode, solenoid);
     8f0:	6c 2d       	mov	r22, r12
     8f2:	8f 2d       	mov	r24, r15
     8f4:	f6 dd       	rcall	.-1044   	; 0x4e2 <solenoid_trigger>
			motorSpeedPos(motor);
     8f6:	8e 2d       	mov	r24, r14
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	5d df       	rcall	.-326    	; 0x7b6 <motorSpeedPos>
			
			//Check if ball is at bottom
			get_lives(); 
     8fc:	b2 dd       	rcall	.-1180   	; 0x462 <get_lives>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8fe:	8f e3       	ldi	r24, 0x3F	; 63
     900:	9c e9       	ldi	r25, 0x9C	; 156
     902:	01 97       	sbiw	r24, 0x01	; 1
     904:	f1 f7       	brne	.-4      	; 0x902 <main+0xf0>
     906:	00 c0       	rjmp	.+0      	; 0x908 <main+0xf6>
     908:	00 00       	nop
			_delay_ms(10);
			
			//Transmit score back to node 1
			message.data[0] = newgame.lives; 
     90a:	80 91 52 03 	lds	r24, 0x0352
     90e:	8b 83       	std	Y+3, r24	; 0x03
			printf("Lives: %d\n", message.data[0]);
     910:	1f 92       	push	r1
     912:	8f 93       	push	r24
     914:	1f 93       	push	r17
     916:	0f 93       	push	r16
     918:	cf d2       	rcall	.+1438   	; 0xeb8 <printf>
			CAN_sendMessage(&message);
     91a:	ce 01       	movw	r24, r28
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	1f dd       	rcall	.-1474   	; 0x35e <CAN_sendMessage>
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	02 c0       	rjmp	.+4      	; 0x92e <main+0x11c>
		}
		else
			setLives(10);				
     92a:	8a e0       	ldi	r24, 0x0A	; 10
     92c:	97 dd       	rcall	.-1234   	; 0x45c <setLives>
     92e:	9f ef       	ldi	r25, 0xFF	; 255
     930:	23 ec       	ldi	r18, 0xC3	; 195
     932:	89 e0       	ldi	r24, 0x09	; 9
     934:	91 50       	subi	r25, 0x01	; 1
     936:	20 40       	sbci	r18, 0x00	; 0
     938:	80 40       	sbci	r24, 0x00	; 0
     93a:	e1 f7       	brne	.-8      	; 0x934 <main+0x122>
     93c:	00 c0       	rjmp	.+0      	; 0x93e <main+0x12c>
     93e:	00 00       	nop
     940:	84 cf       	rjmp	.-248    	; 0x84a <main+0x38>

00000942 <TC_init>:
//#include "CAN.h"


void TC_init(){

	TCCR3A |= (1 << WGM30) | (1 << WGM31);
     942:	a0 e9       	ldi	r26, 0x90	; 144
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	8c 91       	ld	r24, X
     948:	83 60       	ori	r24, 0x03	; 3
     94a:	8c 93       	st	X, r24
	TCCR3B |= (1 << WGM32) | (1 << WGM33);
     94c:	e1 e9       	ldi	r30, 0x91	; 145
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	80 81       	ld	r24, Z
     952:	88 61       	ori	r24, 0x18	; 24
     954:	80 83       	st	Z, r24

	DDRE |= (1 << DDE3) | (1 << DDE4) | (1 << DDE5);
     956:	8d b1       	in	r24, 0x0d	; 13
     958:	88 63       	ori	r24, 0x38	; 56
     95a:	8d b9       	out	0x0d, r24	; 13

	OCR3AH = 0xA4;
     95c:	84 ea       	ldi	r24, 0xA4	; 164
     95e:	80 93 99 00 	sts	0x0099, r24
	OCR3AL = 0x0F;
     962:	8f e0       	ldi	r24, 0x0F	; 15
     964:	80 93 98 00 	sts	0x0098, r24

	TCCR3A |= (1 << COM3A1) | (1 << COM3B1) | (1 << COM3C1) ;
     968:	8c 91       	ld	r24, X
     96a:	88 6a       	ori	r24, 0xA8	; 168
     96c:	8c 93       	st	X, r24
	TCCR3A &= ~((1 << COM3A0) | (1 << COM3B0) | (1 << COM3C0));	
     96e:	8c 91       	ld	r24, X
     970:	8b 7a       	andi	r24, 0xAB	; 171
     972:	8c 93       	st	X, r24

	TCCR3B |= (1 << CS31);
     974:	80 81       	ld	r24, Z
     976:	82 60       	ori	r24, 0x02	; 2
     978:	80 83       	st	Z, r24
	TCCR3B &= ~((1 << CS30) | (1 << CS32));
     97a:	80 81       	ld	r24, Z
     97c:	8a 7f       	andi	r24, 0xFA	; 250
     97e:	80 83       	st	Z, r24
     980:	08 95       	ret

00000982 <PWM_setDutyCycle>:

}

void PWM_setDutyCycle(uint8_t xValue)
{
  	uint16_t dutyC = (1800+(xValue*20));
     982:	24 e1       	ldi	r18, 0x14	; 20
     984:	82 9f       	mul	r24, r18
     986:	c0 01       	movw	r24, r0
     988:	11 24       	eor	r1, r1
     98a:	88 5f       	subi	r24, 0xF8	; 248
     98c:	98 4f       	sbci	r25, 0xF8	; 248

	if(dutyC < 1800){
     98e:	88 30       	cpi	r24, 0x08	; 8
     990:	27 e0       	ldi	r18, 0x07	; 7
     992:	92 07       	cpc	r25, r18
     994:	38 f0       	brcs	.+14     	; 0x9a4 <PWM_setDutyCycle+0x22>
     996:	86 36       	cpi	r24, 0x66	; 102
     998:	20 e1       	ldi	r18, 0x10	; 16
     99a:	92 07       	cpc	r25, r18
     99c:	28 f0       	brcs	.+10     	; 0x9a8 <PWM_setDutyCycle+0x26>
     99e:	85 e6       	ldi	r24, 0x65	; 101
     9a0:	90 e1       	ldi	r25, 0x10	; 16
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <PWM_setDutyCycle+0x26>
		dutyC = 1800;
     9a4:	88 e0       	ldi	r24, 0x08	; 8
     9a6:	97 e0       	ldi	r25, 0x07	; 7
	}
	else if(dutyC > 4197){
		dutyC = 4197;
	}
	int high = (dutyC >> 8);
	int low = (dutyC & 0xff);
     9a8:	9c 01       	movw	r18, r24
     9aa:	33 27       	eor	r19, r19
	OCR3BL = low;
     9ac:	20 93 9a 00 	sts	0x009A, r18
	OCR3BH = high;
     9b0:	90 93 9b 00 	sts	0x009B, r25
     9b4:	08 95       	ret

000009b6 <SPI_init>:
     9b6:	84 b1       	in	r24, 0x04	; 4
     9b8:	87 68       	ori	r24, 0x87	; 135
     9ba:	84 b9       	out	0x04, r24	; 4
     9bc:	2f 9a       	sbi	0x05, 7	; 5
     9be:	8c b5       	in	r24, 0x2c	; 44
     9c0:	81 65       	ori	r24, 0x51	; 81
     9c2:	8c bd       	out	0x2c, r24	; 44
     9c4:	08 95       	ret

000009c6 <SPI_write>:
     9c6:	8e bd       	out	0x2e, r24	; 46
     9c8:	0d b4       	in	r0, 0x2d	; 45
     9ca:	07 fe       	sbrs	r0, 7
     9cc:	fd cf       	rjmp	.-6      	; 0x9c8 <SPI_write+0x2>
     9ce:	08 95       	ret

000009d0 <SPI_read>:
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	f9 df       	rcall	.-14     	; 0x9c6 <SPI_write>
     9d4:	8e b5       	in	r24, 0x2e	; 46
     9d6:	08 95       	ret

000009d8 <SPI_slaveEnable>:
     9d8:	81 30       	cpi	r24, 0x01	; 1
     9da:	19 f4       	brne	.+6      	; 0x9e2 <SPI_slaveEnable+0xa>
     9dc:	85 b1       	in	r24, 0x05	; 5
     9de:	15 b8       	out	0x05, r1	; 5
     9e0:	08 95       	ret
     9e2:	2f 9a       	sbi	0x05, 7	; 5
     9e4:	08 95       	ret

000009e6 <TWI_Master_Initialise>:
     9e6:	8c e0       	ldi	r24, 0x0C	; 12
     9e8:	80 93 b8 00 	sts	0x00B8, r24
     9ec:	8f ef       	ldi	r24, 0xFF	; 255
     9ee:	80 93 bb 00 	sts	0x00BB, r24
     9f2:	84 e0       	ldi	r24, 0x04	; 4
     9f4:	80 93 bc 00 	sts	0x00BC, r24
     9f8:	08 95       	ret

000009fa <TWI_Start_Transceiver_With_Data>:
     9fa:	ec eb       	ldi	r30, 0xBC	; 188
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	20 81       	ld	r18, Z
     a00:	20 fd       	sbrc	r18, 0
     a02:	fd cf       	rjmp	.-6      	; 0x9fe <TWI_Start_Transceiver_With_Data+0x4>
     a04:	60 93 4d 03 	sts	0x034D, r22
     a08:	fc 01       	movw	r30, r24
     a0a:	20 81       	ld	r18, Z
     a0c:	20 93 4e 03 	sts	0x034E, r18
     a10:	20 fd       	sbrc	r18, 0
     a12:	0c c0       	rjmp	.+24     	; 0xa2c <TWI_Start_Transceiver_With_Data+0x32>
     a14:	62 30       	cpi	r22, 0x02	; 2
     a16:	50 f0       	brcs	.+20     	; 0xa2c <TWI_Start_Transceiver_With_Data+0x32>
     a18:	dc 01       	movw	r26, r24
     a1a:	11 96       	adiw	r26, 0x01	; 1
     a1c:	ef e4       	ldi	r30, 0x4F	; 79
     a1e:	f3 e0       	ldi	r31, 0x03	; 3
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	9d 91       	ld	r25, X+
     a24:	91 93       	st	Z+, r25
     a26:	8f 5f       	subi	r24, 0xFF	; 255
     a28:	86 13       	cpse	r24, r22
     a2a:	fb cf       	rjmp	.-10     	; 0xa22 <TWI_Start_Transceiver_With_Data+0x28>
     a2c:	10 92 4c 03 	sts	0x034C, r1
     a30:	88 ef       	ldi	r24, 0xF8	; 248
     a32:	80 93 0b 02 	sts	0x020B, r24
     a36:	85 ea       	ldi	r24, 0xA5	; 165
     a38:	80 93 bc 00 	sts	0x00BC, r24
     a3c:	08 95       	ret

00000a3e <__vector_39>:
     a3e:	1f 92       	push	r1
     a40:	0f 92       	push	r0
     a42:	0f b6       	in	r0, 0x3f	; 63
     a44:	0f 92       	push	r0
     a46:	11 24       	eor	r1, r1
     a48:	0b b6       	in	r0, 0x3b	; 59
     a4a:	0f 92       	push	r0
     a4c:	2f 93       	push	r18
     a4e:	3f 93       	push	r19
     a50:	8f 93       	push	r24
     a52:	9f 93       	push	r25
     a54:	af 93       	push	r26
     a56:	bf 93       	push	r27
     a58:	ef 93       	push	r30
     a5a:	ff 93       	push	r31
     a5c:	80 91 b9 00 	lds	r24, 0x00B9
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	fc 01       	movw	r30, r24
     a64:	38 97       	sbiw	r30, 0x08	; 8
     a66:	e1 35       	cpi	r30, 0x51	; 81
     a68:	f1 05       	cpc	r31, r1
     a6a:	08 f0       	brcs	.+2      	; 0xa6e <__vector_39+0x30>
     a6c:	55 c0       	rjmp	.+170    	; 0xb18 <__vector_39+0xda>
     a6e:	ee 58       	subi	r30, 0x8E	; 142
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	be c1       	rjmp	.+892    	; 0xdf0 <__tablejump2__>
     a74:	10 92 4b 03 	sts	0x034B, r1
     a78:	e0 91 4b 03 	lds	r30, 0x034B
     a7c:	80 91 4d 03 	lds	r24, 0x034D
     a80:	e8 17       	cp	r30, r24
     a82:	70 f4       	brcc	.+28     	; 0xaa0 <__vector_39+0x62>
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	8e 0f       	add	r24, r30
     a88:	80 93 4b 03 	sts	0x034B, r24
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	e2 5b       	subi	r30, 0xB2	; 178
     a90:	fc 4f       	sbci	r31, 0xFC	; 252
     a92:	80 81       	ld	r24, Z
     a94:	80 93 bb 00 	sts	0x00BB, r24
     a98:	85 e8       	ldi	r24, 0x85	; 133
     a9a:	80 93 bc 00 	sts	0x00BC, r24
     a9e:	43 c0       	rjmp	.+134    	; 0xb26 <__vector_39+0xe8>
     aa0:	80 91 4c 03 	lds	r24, 0x034C
     aa4:	81 60       	ori	r24, 0x01	; 1
     aa6:	80 93 4c 03 	sts	0x034C, r24
     aaa:	84 e9       	ldi	r24, 0x94	; 148
     aac:	80 93 bc 00 	sts	0x00BC, r24
     ab0:	3a c0       	rjmp	.+116    	; 0xb26 <__vector_39+0xe8>
     ab2:	e0 91 4b 03 	lds	r30, 0x034B
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	8e 0f       	add	r24, r30
     aba:	80 93 4b 03 	sts	0x034B, r24
     abe:	80 91 bb 00 	lds	r24, 0x00BB
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	e2 5b       	subi	r30, 0xB2	; 178
     ac6:	fc 4f       	sbci	r31, 0xFC	; 252
     ac8:	80 83       	st	Z, r24
     aca:	20 91 4b 03 	lds	r18, 0x034B
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	80 91 4d 03 	lds	r24, 0x034D
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	01 97       	sbiw	r24, 0x01	; 1
     ad8:	28 17       	cp	r18, r24
     ada:	39 07       	cpc	r19, r25
     adc:	24 f4       	brge	.+8      	; 0xae6 <__vector_39+0xa8>
     ade:	85 ec       	ldi	r24, 0xC5	; 197
     ae0:	80 93 bc 00 	sts	0x00BC, r24
     ae4:	20 c0       	rjmp	.+64     	; 0xb26 <__vector_39+0xe8>
     ae6:	85 e8       	ldi	r24, 0x85	; 133
     ae8:	80 93 bc 00 	sts	0x00BC, r24
     aec:	1c c0       	rjmp	.+56     	; 0xb26 <__vector_39+0xe8>
     aee:	80 91 bb 00 	lds	r24, 0x00BB
     af2:	e0 91 4b 03 	lds	r30, 0x034B
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	e2 5b       	subi	r30, 0xB2	; 178
     afa:	fc 4f       	sbci	r31, 0xFC	; 252
     afc:	80 83       	st	Z, r24
     afe:	80 91 4c 03 	lds	r24, 0x034C
     b02:	81 60       	ori	r24, 0x01	; 1
     b04:	80 93 4c 03 	sts	0x034C, r24
     b08:	84 e9       	ldi	r24, 0x94	; 148
     b0a:	80 93 bc 00 	sts	0x00BC, r24
     b0e:	0b c0       	rjmp	.+22     	; 0xb26 <__vector_39+0xe8>
     b10:	85 ea       	ldi	r24, 0xA5	; 165
     b12:	80 93 bc 00 	sts	0x00BC, r24
     b16:	07 c0       	rjmp	.+14     	; 0xb26 <__vector_39+0xe8>
     b18:	80 91 b9 00 	lds	r24, 0x00B9
     b1c:	80 93 0b 02 	sts	0x020B, r24
     b20:	84 e0       	ldi	r24, 0x04	; 4
     b22:	80 93 bc 00 	sts	0x00BC, r24
     b26:	ff 91       	pop	r31
     b28:	ef 91       	pop	r30
     b2a:	bf 91       	pop	r27
     b2c:	af 91       	pop	r26
     b2e:	9f 91       	pop	r25
     b30:	8f 91       	pop	r24
     b32:	3f 91       	pop	r19
     b34:	2f 91       	pop	r18
     b36:	0f 90       	pop	r0
     b38:	0b be       	out	0x3b, r0	; 59
     b3a:	0f 90       	pop	r0
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	0f 90       	pop	r0
     b40:	1f 90       	pop	r1
     b42:	18 95       	reti

00000b44 <uartTransmit>:
     b44:	e0 ec       	ldi	r30, 0xC0	; 192
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	90 81       	ld	r25, Z
     b4a:	95 ff       	sbrs	r25, 5
     b4c:	fd cf       	rjmp	.-6      	; 0xb48 <uartTransmit+0x4>
     b4e:	80 93 c6 00 	sts	0x00C6, r24
     b52:	08 95       	ret

00000b54 <uartReceive>:
     b54:	e0 ec       	ldi	r30, 0xC0	; 192
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	88 23       	and	r24, r24
     b5c:	ec f7       	brge	.-6      	; 0xb58 <uartReceive+0x4>
     b5e:	80 91 c6 00 	lds	r24, 0x00C6
     b62:	08 95       	ret

00000b64 <uartInit>:
     b64:	10 92 c5 00 	sts	0x00C5, r1
     b68:	87 e6       	ldi	r24, 0x67	; 103
     b6a:	80 93 c4 00 	sts	0x00C4, r24
     b6e:	88 e1       	ldi	r24, 0x18	; 24
     b70:	80 93 c1 00 	sts	0x00C1, r24
     b74:	86 e0       	ldi	r24, 0x06	; 6
     b76:	80 93 c2 00 	sts	0x00C2, r24
     b7a:	6a ea       	ldi	r22, 0xAA	; 170
     b7c:	75 e0       	ldi	r23, 0x05	; 5
     b7e:	82 ea       	ldi	r24, 0xA2	; 162
     b80:	95 e0       	ldi	r25, 0x05	; 5
     b82:	50 c1       	rjmp	.+672    	; 0xe24 <fdevopen>
     b84:	08 95       	ret

00000b86 <__fixsfsi>:
     b86:	04 d0       	rcall	.+8      	; 0xb90 <__fixunssfsi>
     b88:	68 94       	set
     b8a:	b1 11       	cpse	r27, r1
     b8c:	8d c0       	rjmp	.+282    	; 0xca8 <__fp_szero>
     b8e:	08 95       	ret

00000b90 <__fixunssfsi>:
     b90:	70 d0       	rcall	.+224    	; 0xc72 <__fp_splitA>
     b92:	88 f0       	brcs	.+34     	; 0xbb6 <__fixunssfsi+0x26>
     b94:	9f 57       	subi	r25, 0x7F	; 127
     b96:	90 f0       	brcs	.+36     	; 0xbbc <__fixunssfsi+0x2c>
     b98:	b9 2f       	mov	r27, r25
     b9a:	99 27       	eor	r25, r25
     b9c:	b7 51       	subi	r27, 0x17	; 23
     b9e:	a0 f0       	brcs	.+40     	; 0xbc8 <__fixunssfsi+0x38>
     ba0:	d1 f0       	breq	.+52     	; 0xbd6 <__fixunssfsi+0x46>
     ba2:	66 0f       	add	r22, r22
     ba4:	77 1f       	adc	r23, r23
     ba6:	88 1f       	adc	r24, r24
     ba8:	99 1f       	adc	r25, r25
     baa:	1a f0       	brmi	.+6      	; 0xbb2 <__fixunssfsi+0x22>
     bac:	ba 95       	dec	r27
     bae:	c9 f7       	brne	.-14     	; 0xba2 <__fixunssfsi+0x12>
     bb0:	12 c0       	rjmp	.+36     	; 0xbd6 <__fixunssfsi+0x46>
     bb2:	b1 30       	cpi	r27, 0x01	; 1
     bb4:	81 f0       	breq	.+32     	; 0xbd6 <__fixunssfsi+0x46>
     bb6:	77 d0       	rcall	.+238    	; 0xca6 <__fp_zero>
     bb8:	b1 e0       	ldi	r27, 0x01	; 1
     bba:	08 95       	ret
     bbc:	74 c0       	rjmp	.+232    	; 0xca6 <__fp_zero>
     bbe:	67 2f       	mov	r22, r23
     bc0:	78 2f       	mov	r23, r24
     bc2:	88 27       	eor	r24, r24
     bc4:	b8 5f       	subi	r27, 0xF8	; 248
     bc6:	39 f0       	breq	.+14     	; 0xbd6 <__fixunssfsi+0x46>
     bc8:	b9 3f       	cpi	r27, 0xF9	; 249
     bca:	cc f3       	brlt	.-14     	; 0xbbe <__fixunssfsi+0x2e>
     bcc:	86 95       	lsr	r24
     bce:	77 95       	ror	r23
     bd0:	67 95       	ror	r22
     bd2:	b3 95       	inc	r27
     bd4:	d9 f7       	brne	.-10     	; 0xbcc <__fixunssfsi+0x3c>
     bd6:	3e f4       	brtc	.+14     	; 0xbe6 <__fixunssfsi+0x56>
     bd8:	90 95       	com	r25
     bda:	80 95       	com	r24
     bdc:	70 95       	com	r23
     bde:	61 95       	neg	r22
     be0:	7f 4f       	sbci	r23, 0xFF	; 255
     be2:	8f 4f       	sbci	r24, 0xFF	; 255
     be4:	9f 4f       	sbci	r25, 0xFF	; 255
     be6:	08 95       	ret

00000be8 <__floatunsisf>:
     be8:	e8 94       	clt
     bea:	09 c0       	rjmp	.+18     	; 0xbfe <__floatsisf+0x12>

00000bec <__floatsisf>:
     bec:	97 fb       	bst	r25, 7
     bee:	3e f4       	brtc	.+14     	; 0xbfe <__floatsisf+0x12>
     bf0:	90 95       	com	r25
     bf2:	80 95       	com	r24
     bf4:	70 95       	com	r23
     bf6:	61 95       	neg	r22
     bf8:	7f 4f       	sbci	r23, 0xFF	; 255
     bfa:	8f 4f       	sbci	r24, 0xFF	; 255
     bfc:	9f 4f       	sbci	r25, 0xFF	; 255
     bfe:	99 23       	and	r25, r25
     c00:	a9 f0       	breq	.+42     	; 0xc2c <__floatsisf+0x40>
     c02:	f9 2f       	mov	r31, r25
     c04:	96 e9       	ldi	r25, 0x96	; 150
     c06:	bb 27       	eor	r27, r27
     c08:	93 95       	inc	r25
     c0a:	f6 95       	lsr	r31
     c0c:	87 95       	ror	r24
     c0e:	77 95       	ror	r23
     c10:	67 95       	ror	r22
     c12:	b7 95       	ror	r27
     c14:	f1 11       	cpse	r31, r1
     c16:	f8 cf       	rjmp	.-16     	; 0xc08 <__floatsisf+0x1c>
     c18:	fa f4       	brpl	.+62     	; 0xc58 <__floatsisf+0x6c>
     c1a:	bb 0f       	add	r27, r27
     c1c:	11 f4       	brne	.+4      	; 0xc22 <__floatsisf+0x36>
     c1e:	60 ff       	sbrs	r22, 0
     c20:	1b c0       	rjmp	.+54     	; 0xc58 <__floatsisf+0x6c>
     c22:	6f 5f       	subi	r22, 0xFF	; 255
     c24:	7f 4f       	sbci	r23, 0xFF	; 255
     c26:	8f 4f       	sbci	r24, 0xFF	; 255
     c28:	9f 4f       	sbci	r25, 0xFF	; 255
     c2a:	16 c0       	rjmp	.+44     	; 0xc58 <__floatsisf+0x6c>
     c2c:	88 23       	and	r24, r24
     c2e:	11 f0       	breq	.+4      	; 0xc34 <__floatsisf+0x48>
     c30:	96 e9       	ldi	r25, 0x96	; 150
     c32:	11 c0       	rjmp	.+34     	; 0xc56 <__floatsisf+0x6a>
     c34:	77 23       	and	r23, r23
     c36:	21 f0       	breq	.+8      	; 0xc40 <__floatsisf+0x54>
     c38:	9e e8       	ldi	r25, 0x8E	; 142
     c3a:	87 2f       	mov	r24, r23
     c3c:	76 2f       	mov	r23, r22
     c3e:	05 c0       	rjmp	.+10     	; 0xc4a <__floatsisf+0x5e>
     c40:	66 23       	and	r22, r22
     c42:	71 f0       	breq	.+28     	; 0xc60 <__floatsisf+0x74>
     c44:	96 e8       	ldi	r25, 0x86	; 134
     c46:	86 2f       	mov	r24, r22
     c48:	70 e0       	ldi	r23, 0x00	; 0
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	2a f0       	brmi	.+10     	; 0xc58 <__floatsisf+0x6c>
     c4e:	9a 95       	dec	r25
     c50:	66 0f       	add	r22, r22
     c52:	77 1f       	adc	r23, r23
     c54:	88 1f       	adc	r24, r24
     c56:	da f7       	brpl	.-10     	; 0xc4e <__floatsisf+0x62>
     c58:	88 0f       	add	r24, r24
     c5a:	96 95       	lsr	r25
     c5c:	87 95       	ror	r24
     c5e:	97 f9       	bld	r25, 7
     c60:	08 95       	ret

00000c62 <__fp_split3>:
     c62:	57 fd       	sbrc	r21, 7
     c64:	90 58       	subi	r25, 0x80	; 128
     c66:	44 0f       	add	r20, r20
     c68:	55 1f       	adc	r21, r21
     c6a:	59 f0       	breq	.+22     	; 0xc82 <__fp_splitA+0x10>
     c6c:	5f 3f       	cpi	r21, 0xFF	; 255
     c6e:	71 f0       	breq	.+28     	; 0xc8c <__fp_splitA+0x1a>
     c70:	47 95       	ror	r20

00000c72 <__fp_splitA>:
     c72:	88 0f       	add	r24, r24
     c74:	97 fb       	bst	r25, 7
     c76:	99 1f       	adc	r25, r25
     c78:	61 f0       	breq	.+24     	; 0xc92 <__fp_splitA+0x20>
     c7a:	9f 3f       	cpi	r25, 0xFF	; 255
     c7c:	79 f0       	breq	.+30     	; 0xc9c <__fp_splitA+0x2a>
     c7e:	87 95       	ror	r24
     c80:	08 95       	ret
     c82:	12 16       	cp	r1, r18
     c84:	13 06       	cpc	r1, r19
     c86:	14 06       	cpc	r1, r20
     c88:	55 1f       	adc	r21, r21
     c8a:	f2 cf       	rjmp	.-28     	; 0xc70 <__fp_split3+0xe>
     c8c:	46 95       	lsr	r20
     c8e:	f1 df       	rcall	.-30     	; 0xc72 <__fp_splitA>
     c90:	08 c0       	rjmp	.+16     	; 0xca2 <__fp_splitA+0x30>
     c92:	16 16       	cp	r1, r22
     c94:	17 06       	cpc	r1, r23
     c96:	18 06       	cpc	r1, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	f1 cf       	rjmp	.-30     	; 0xc7e <__fp_splitA+0xc>
     c9c:	86 95       	lsr	r24
     c9e:	71 05       	cpc	r23, r1
     ca0:	61 05       	cpc	r22, r1
     ca2:	08 94       	sec
     ca4:	08 95       	ret

00000ca6 <__fp_zero>:
     ca6:	e8 94       	clt

00000ca8 <__fp_szero>:
     ca8:	bb 27       	eor	r27, r27
     caa:	66 27       	eor	r22, r22
     cac:	77 27       	eor	r23, r23
     cae:	cb 01       	movw	r24, r22
     cb0:	97 f9       	bld	r25, 7
     cb2:	08 95       	ret

00000cb4 <__mulsf3>:
     cb4:	0b d0       	rcall	.+22     	; 0xccc <__mulsf3x>
     cb6:	78 c0       	rjmp	.+240    	; 0xda8 <__fp_round>
     cb8:	69 d0       	rcall	.+210    	; 0xd8c <__fp_pscA>
     cba:	28 f0       	brcs	.+10     	; 0xcc6 <__mulsf3+0x12>
     cbc:	6e d0       	rcall	.+220    	; 0xd9a <__fp_pscB>
     cbe:	18 f0       	brcs	.+6      	; 0xcc6 <__mulsf3+0x12>
     cc0:	95 23       	and	r25, r21
     cc2:	09 f0       	breq	.+2      	; 0xcc6 <__mulsf3+0x12>
     cc4:	5a c0       	rjmp	.+180    	; 0xd7a <__fp_inf>
     cc6:	5f c0       	rjmp	.+190    	; 0xd86 <__fp_nan>
     cc8:	11 24       	eor	r1, r1
     cca:	ee cf       	rjmp	.-36     	; 0xca8 <__fp_szero>

00000ccc <__mulsf3x>:
     ccc:	ca df       	rcall	.-108    	; 0xc62 <__fp_split3>
     cce:	a0 f3       	brcs	.-24     	; 0xcb8 <__mulsf3+0x4>

00000cd0 <__mulsf3_pse>:
     cd0:	95 9f       	mul	r25, r21
     cd2:	d1 f3       	breq	.-12     	; 0xcc8 <__mulsf3+0x14>
     cd4:	95 0f       	add	r25, r21
     cd6:	50 e0       	ldi	r21, 0x00	; 0
     cd8:	55 1f       	adc	r21, r21
     cda:	62 9f       	mul	r22, r18
     cdc:	f0 01       	movw	r30, r0
     cde:	72 9f       	mul	r23, r18
     ce0:	bb 27       	eor	r27, r27
     ce2:	f0 0d       	add	r31, r0
     ce4:	b1 1d       	adc	r27, r1
     ce6:	63 9f       	mul	r22, r19
     ce8:	aa 27       	eor	r26, r26
     cea:	f0 0d       	add	r31, r0
     cec:	b1 1d       	adc	r27, r1
     cee:	aa 1f       	adc	r26, r26
     cf0:	64 9f       	mul	r22, r20
     cf2:	66 27       	eor	r22, r22
     cf4:	b0 0d       	add	r27, r0
     cf6:	a1 1d       	adc	r26, r1
     cf8:	66 1f       	adc	r22, r22
     cfa:	82 9f       	mul	r24, r18
     cfc:	22 27       	eor	r18, r18
     cfe:	b0 0d       	add	r27, r0
     d00:	a1 1d       	adc	r26, r1
     d02:	62 1f       	adc	r22, r18
     d04:	73 9f       	mul	r23, r19
     d06:	b0 0d       	add	r27, r0
     d08:	a1 1d       	adc	r26, r1
     d0a:	62 1f       	adc	r22, r18
     d0c:	83 9f       	mul	r24, r19
     d0e:	a0 0d       	add	r26, r0
     d10:	61 1d       	adc	r22, r1
     d12:	22 1f       	adc	r18, r18
     d14:	74 9f       	mul	r23, r20
     d16:	33 27       	eor	r19, r19
     d18:	a0 0d       	add	r26, r0
     d1a:	61 1d       	adc	r22, r1
     d1c:	23 1f       	adc	r18, r19
     d1e:	84 9f       	mul	r24, r20
     d20:	60 0d       	add	r22, r0
     d22:	21 1d       	adc	r18, r1
     d24:	82 2f       	mov	r24, r18
     d26:	76 2f       	mov	r23, r22
     d28:	6a 2f       	mov	r22, r26
     d2a:	11 24       	eor	r1, r1
     d2c:	9f 57       	subi	r25, 0x7F	; 127
     d2e:	50 40       	sbci	r21, 0x00	; 0
     d30:	8a f0       	brmi	.+34     	; 0xd54 <__mulsf3_pse+0x84>
     d32:	e1 f0       	breq	.+56     	; 0xd6c <__mulsf3_pse+0x9c>
     d34:	88 23       	and	r24, r24
     d36:	4a f0       	brmi	.+18     	; 0xd4a <__mulsf3_pse+0x7a>
     d38:	ee 0f       	add	r30, r30
     d3a:	ff 1f       	adc	r31, r31
     d3c:	bb 1f       	adc	r27, r27
     d3e:	66 1f       	adc	r22, r22
     d40:	77 1f       	adc	r23, r23
     d42:	88 1f       	adc	r24, r24
     d44:	91 50       	subi	r25, 0x01	; 1
     d46:	50 40       	sbci	r21, 0x00	; 0
     d48:	a9 f7       	brne	.-22     	; 0xd34 <__mulsf3_pse+0x64>
     d4a:	9e 3f       	cpi	r25, 0xFE	; 254
     d4c:	51 05       	cpc	r21, r1
     d4e:	70 f0       	brcs	.+28     	; 0xd6c <__mulsf3_pse+0x9c>
     d50:	14 c0       	rjmp	.+40     	; 0xd7a <__fp_inf>
     d52:	aa cf       	rjmp	.-172    	; 0xca8 <__fp_szero>
     d54:	5f 3f       	cpi	r21, 0xFF	; 255
     d56:	ec f3       	brlt	.-6      	; 0xd52 <__mulsf3_pse+0x82>
     d58:	98 3e       	cpi	r25, 0xE8	; 232
     d5a:	dc f3       	brlt	.-10     	; 0xd52 <__mulsf3_pse+0x82>
     d5c:	86 95       	lsr	r24
     d5e:	77 95       	ror	r23
     d60:	67 95       	ror	r22
     d62:	b7 95       	ror	r27
     d64:	f7 95       	ror	r31
     d66:	e7 95       	ror	r30
     d68:	9f 5f       	subi	r25, 0xFF	; 255
     d6a:	c1 f7       	brne	.-16     	; 0xd5c <__mulsf3_pse+0x8c>
     d6c:	fe 2b       	or	r31, r30
     d6e:	88 0f       	add	r24, r24
     d70:	91 1d       	adc	r25, r1
     d72:	96 95       	lsr	r25
     d74:	87 95       	ror	r24
     d76:	97 f9       	bld	r25, 7
     d78:	08 95       	ret

00000d7a <__fp_inf>:
     d7a:	97 f9       	bld	r25, 7
     d7c:	9f 67       	ori	r25, 0x7F	; 127
     d7e:	80 e8       	ldi	r24, 0x80	; 128
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	08 95       	ret

00000d86 <__fp_nan>:
     d86:	9f ef       	ldi	r25, 0xFF	; 255
     d88:	80 ec       	ldi	r24, 0xC0	; 192
     d8a:	08 95       	ret

00000d8c <__fp_pscA>:
     d8c:	00 24       	eor	r0, r0
     d8e:	0a 94       	dec	r0
     d90:	16 16       	cp	r1, r22
     d92:	17 06       	cpc	r1, r23
     d94:	18 06       	cpc	r1, r24
     d96:	09 06       	cpc	r0, r25
     d98:	08 95       	ret

00000d9a <__fp_pscB>:
     d9a:	00 24       	eor	r0, r0
     d9c:	0a 94       	dec	r0
     d9e:	12 16       	cp	r1, r18
     da0:	13 06       	cpc	r1, r19
     da2:	14 06       	cpc	r1, r20
     da4:	05 06       	cpc	r0, r21
     da6:	08 95       	ret

00000da8 <__fp_round>:
     da8:	09 2e       	mov	r0, r25
     daa:	03 94       	inc	r0
     dac:	00 0c       	add	r0, r0
     dae:	11 f4       	brne	.+4      	; 0xdb4 <__fp_round+0xc>
     db0:	88 23       	and	r24, r24
     db2:	52 f0       	brmi	.+20     	; 0xdc8 <__fp_round+0x20>
     db4:	bb 0f       	add	r27, r27
     db6:	40 f4       	brcc	.+16     	; 0xdc8 <__fp_round+0x20>
     db8:	bf 2b       	or	r27, r31
     dba:	11 f4       	brne	.+4      	; 0xdc0 <__fp_round+0x18>
     dbc:	60 ff       	sbrs	r22, 0
     dbe:	04 c0       	rjmp	.+8      	; 0xdc8 <__fp_round+0x20>
     dc0:	6f 5f       	subi	r22, 0xFF	; 255
     dc2:	7f 4f       	sbci	r23, 0xFF	; 255
     dc4:	8f 4f       	sbci	r24, 0xFF	; 255
     dc6:	9f 4f       	sbci	r25, 0xFF	; 255
     dc8:	08 95       	ret

00000dca <__divmodhi4>:
     dca:	97 fb       	bst	r25, 7
     dcc:	07 2e       	mov	r0, r23
     dce:	16 f4       	brtc	.+4      	; 0xdd4 <__divmodhi4+0xa>
     dd0:	00 94       	com	r0
     dd2:	06 d0       	rcall	.+12     	; 0xde0 <__divmodhi4_neg1>
     dd4:	77 fd       	sbrc	r23, 7
     dd6:	08 d0       	rcall	.+16     	; 0xde8 <__divmodhi4_neg2>
     dd8:	11 d0       	rcall	.+34     	; 0xdfc <__udivmodhi4>
     dda:	07 fc       	sbrc	r0, 7
     ddc:	05 d0       	rcall	.+10     	; 0xde8 <__divmodhi4_neg2>
     dde:	3e f4       	brtc	.+14     	; 0xdee <__divmodhi4_exit>

00000de0 <__divmodhi4_neg1>:
     de0:	90 95       	com	r25
     de2:	81 95       	neg	r24
     de4:	9f 4f       	sbci	r25, 0xFF	; 255
     de6:	08 95       	ret

00000de8 <__divmodhi4_neg2>:
     de8:	70 95       	com	r23
     dea:	61 95       	neg	r22
     dec:	7f 4f       	sbci	r23, 0xFF	; 255

00000dee <__divmodhi4_exit>:
     dee:	08 95       	ret

00000df0 <__tablejump2__>:
     df0:	ee 0f       	add	r30, r30
     df2:	ff 1f       	adc	r31, r31

00000df4 <__tablejump__>:
     df4:	05 90       	lpm	r0, Z+
     df6:	f4 91       	lpm	r31, Z
     df8:	e0 2d       	mov	r30, r0
     dfa:	19 94       	eijmp

00000dfc <__udivmodhi4>:
     dfc:	aa 1b       	sub	r26, r26
     dfe:	bb 1b       	sub	r27, r27
     e00:	51 e1       	ldi	r21, 0x11	; 17
     e02:	07 c0       	rjmp	.+14     	; 0xe12 <__udivmodhi4_ep>

00000e04 <__udivmodhi4_loop>:
     e04:	aa 1f       	adc	r26, r26
     e06:	bb 1f       	adc	r27, r27
     e08:	a6 17       	cp	r26, r22
     e0a:	b7 07       	cpc	r27, r23
     e0c:	10 f0       	brcs	.+4      	; 0xe12 <__udivmodhi4_ep>
     e0e:	a6 1b       	sub	r26, r22
     e10:	b7 0b       	sbc	r27, r23

00000e12 <__udivmodhi4_ep>:
     e12:	88 1f       	adc	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	5a 95       	dec	r21
     e18:	a9 f7       	brne	.-22     	; 0xe04 <__udivmodhi4_loop>
     e1a:	80 95       	com	r24
     e1c:	90 95       	com	r25
     e1e:	bc 01       	movw	r22, r24
     e20:	cd 01       	movw	r24, r26
     e22:	08 95       	ret

00000e24 <fdevopen>:
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	ec 01       	movw	r28, r24
     e2e:	8b 01       	movw	r16, r22
     e30:	00 97       	sbiw	r24, 0x00	; 0
     e32:	31 f4       	brne	.+12     	; 0xe40 <fdevopen+0x1c>
     e34:	61 15       	cp	r22, r1
     e36:	71 05       	cpc	r23, r1
     e38:	19 f4       	brne	.+6      	; 0xe40 <fdevopen+0x1c>
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	37 c0       	rjmp	.+110    	; 0xeae <fdevopen+0x8a>
     e40:	6e e0       	ldi	r22, 0x0E	; 14
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	63 d2       	rcall	.+1222   	; 0x1310 <calloc>
     e4a:	fc 01       	movw	r30, r24
     e4c:	00 97       	sbiw	r24, 0x00	; 0
     e4e:	a9 f3       	breq	.-22     	; 0xe3a <fdevopen+0x16>
     e50:	80 e8       	ldi	r24, 0x80	; 128
     e52:	83 83       	std	Z+3, r24	; 0x03
     e54:	01 15       	cp	r16, r1
     e56:	11 05       	cpc	r17, r1
     e58:	71 f0       	breq	.+28     	; 0xe76 <fdevopen+0x52>
     e5a:	13 87       	std	Z+11, r17	; 0x0b
     e5c:	02 87       	std	Z+10, r16	; 0x0a
     e5e:	81 e8       	ldi	r24, 0x81	; 129
     e60:	83 83       	std	Z+3, r24	; 0x03
     e62:	80 91 53 03 	lds	r24, 0x0353
     e66:	90 91 54 03 	lds	r25, 0x0354
     e6a:	89 2b       	or	r24, r25
     e6c:	21 f4       	brne	.+8      	; 0xe76 <fdevopen+0x52>
     e6e:	f0 93 54 03 	sts	0x0354, r31
     e72:	e0 93 53 03 	sts	0x0353, r30
     e76:	20 97       	sbiw	r28, 0x00	; 0
     e78:	c9 f0       	breq	.+50     	; 0xeac <fdevopen+0x88>
     e7a:	d1 87       	std	Z+9, r29	; 0x09
     e7c:	c0 87       	std	Z+8, r28	; 0x08
     e7e:	83 81       	ldd	r24, Z+3	; 0x03
     e80:	82 60       	ori	r24, 0x02	; 2
     e82:	83 83       	std	Z+3, r24	; 0x03
     e84:	80 91 55 03 	lds	r24, 0x0355
     e88:	90 91 56 03 	lds	r25, 0x0356
     e8c:	89 2b       	or	r24, r25
     e8e:	71 f4       	brne	.+28     	; 0xeac <fdevopen+0x88>
     e90:	f0 93 56 03 	sts	0x0356, r31
     e94:	e0 93 55 03 	sts	0x0355, r30
     e98:	80 91 57 03 	lds	r24, 0x0357
     e9c:	90 91 58 03 	lds	r25, 0x0358
     ea0:	89 2b       	or	r24, r25
     ea2:	21 f4       	brne	.+8      	; 0xeac <fdevopen+0x88>
     ea4:	f0 93 58 03 	sts	0x0358, r31
     ea8:	e0 93 57 03 	sts	0x0357, r30
     eac:	cf 01       	movw	r24, r30
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	08 95       	ret

00000eb8 <printf>:
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	fe 01       	movw	r30, r28
     ec2:	36 96       	adiw	r30, 0x06	; 6
     ec4:	61 91       	ld	r22, Z+
     ec6:	71 91       	ld	r23, Z+
     ec8:	af 01       	movw	r20, r30
     eca:	80 91 55 03 	lds	r24, 0x0355
     ece:	90 91 56 03 	lds	r25, 0x0356
     ed2:	30 d0       	rcall	.+96     	; 0xf34 <vfprintf>
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	08 95       	ret

00000eda <puts>:
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	e0 91 55 03 	lds	r30, 0x0355
     ee6:	f0 91 56 03 	lds	r31, 0x0356
     eea:	23 81       	ldd	r18, Z+3	; 0x03
     eec:	21 ff       	sbrs	r18, 1
     eee:	1b c0       	rjmp	.+54     	; 0xf26 <puts+0x4c>
     ef0:	ec 01       	movw	r28, r24
     ef2:	00 e0       	ldi	r16, 0x00	; 0
     ef4:	10 e0       	ldi	r17, 0x00	; 0
     ef6:	89 91       	ld	r24, Y+
     ef8:	60 91 55 03 	lds	r22, 0x0355
     efc:	70 91 56 03 	lds	r23, 0x0356
     f00:	db 01       	movw	r26, r22
     f02:	18 96       	adiw	r26, 0x08	; 8
     f04:	ed 91       	ld	r30, X+
     f06:	fc 91       	ld	r31, X
     f08:	19 97       	sbiw	r26, 0x09	; 9
     f0a:	88 23       	and	r24, r24
     f0c:	31 f0       	breq	.+12     	; 0xf1a <puts+0x40>
     f0e:	19 95       	eicall
     f10:	89 2b       	or	r24, r25
     f12:	89 f3       	breq	.-30     	; 0xef6 <puts+0x1c>
     f14:	0f ef       	ldi	r16, 0xFF	; 255
     f16:	1f ef       	ldi	r17, 0xFF	; 255
     f18:	ee cf       	rjmp	.-36     	; 0xef6 <puts+0x1c>
     f1a:	8a e0       	ldi	r24, 0x0A	; 10
     f1c:	19 95       	eicall
     f1e:	89 2b       	or	r24, r25
     f20:	11 f4       	brne	.+4      	; 0xf26 <puts+0x4c>
     f22:	c8 01       	movw	r24, r16
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <puts+0x50>
     f26:	8f ef       	ldi	r24, 0xFF	; 255
     f28:	9f ef       	ldi	r25, 0xFF	; 255
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	1f 91       	pop	r17
     f30:	0f 91       	pop	r16
     f32:	08 95       	ret

00000f34 <vfprintf>:
     f34:	2f 92       	push	r2
     f36:	3f 92       	push	r3
     f38:	4f 92       	push	r4
     f3a:	5f 92       	push	r5
     f3c:	6f 92       	push	r6
     f3e:	7f 92       	push	r7
     f40:	8f 92       	push	r8
     f42:	9f 92       	push	r9
     f44:	af 92       	push	r10
     f46:	bf 92       	push	r11
     f48:	cf 92       	push	r12
     f4a:	df 92       	push	r13
     f4c:	ef 92       	push	r14
     f4e:	ff 92       	push	r15
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
     f5c:	2c 97       	sbiw	r28, 0x0c	; 12
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	cd bf       	out	0x3d, r28	; 61
     f68:	7c 01       	movw	r14, r24
     f6a:	6b 01       	movw	r12, r22
     f6c:	8a 01       	movw	r16, r20
     f6e:	fc 01       	movw	r30, r24
     f70:	17 82       	std	Z+7, r1	; 0x07
     f72:	16 82       	std	Z+6, r1	; 0x06
     f74:	83 81       	ldd	r24, Z+3	; 0x03
     f76:	81 ff       	sbrs	r24, 1
     f78:	b0 c1       	rjmp	.+864    	; 0x12da <vfprintf+0x3a6>
     f7a:	ce 01       	movw	r24, r28
     f7c:	01 96       	adiw	r24, 0x01	; 1
     f7e:	4c 01       	movw	r8, r24
     f80:	f7 01       	movw	r30, r14
     f82:	93 81       	ldd	r25, Z+3	; 0x03
     f84:	f6 01       	movw	r30, r12
     f86:	93 fd       	sbrc	r25, 3
     f88:	85 91       	lpm	r24, Z+
     f8a:	93 ff       	sbrs	r25, 3
     f8c:	81 91       	ld	r24, Z+
     f8e:	6f 01       	movw	r12, r30
     f90:	88 23       	and	r24, r24
     f92:	09 f4       	brne	.+2      	; 0xf96 <vfprintf+0x62>
     f94:	9e c1       	rjmp	.+828    	; 0x12d2 <vfprintf+0x39e>
     f96:	85 32       	cpi	r24, 0x25	; 37
     f98:	39 f4       	brne	.+14     	; 0xfa8 <vfprintf+0x74>
     f9a:	93 fd       	sbrc	r25, 3
     f9c:	85 91       	lpm	r24, Z+
     f9e:	93 ff       	sbrs	r25, 3
     fa0:	81 91       	ld	r24, Z+
     fa2:	6f 01       	movw	r12, r30
     fa4:	85 32       	cpi	r24, 0x25	; 37
     fa6:	21 f4       	brne	.+8      	; 0xfb0 <vfprintf+0x7c>
     fa8:	b7 01       	movw	r22, r14
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	0f d3       	rcall	.+1566   	; 0x15cc <fputc>
     fae:	e8 cf       	rjmp	.-48     	; 0xf80 <vfprintf+0x4c>
     fb0:	51 2c       	mov	r5, r1
     fb2:	31 2c       	mov	r3, r1
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	20 32       	cpi	r18, 0x20	; 32
     fb8:	a0 f4       	brcc	.+40     	; 0xfe2 <vfprintf+0xae>
     fba:	8b 32       	cpi	r24, 0x2B	; 43
     fbc:	69 f0       	breq	.+26     	; 0xfd8 <vfprintf+0xa4>
     fbe:	30 f4       	brcc	.+12     	; 0xfcc <vfprintf+0x98>
     fc0:	80 32       	cpi	r24, 0x20	; 32
     fc2:	59 f0       	breq	.+22     	; 0xfda <vfprintf+0xa6>
     fc4:	83 32       	cpi	r24, 0x23	; 35
     fc6:	69 f4       	brne	.+26     	; 0xfe2 <vfprintf+0xae>
     fc8:	20 61       	ori	r18, 0x10	; 16
     fca:	2c c0       	rjmp	.+88     	; 0x1024 <vfprintf+0xf0>
     fcc:	8d 32       	cpi	r24, 0x2D	; 45
     fce:	39 f0       	breq	.+14     	; 0xfde <vfprintf+0xaa>
     fd0:	80 33       	cpi	r24, 0x30	; 48
     fd2:	39 f4       	brne	.+14     	; 0xfe2 <vfprintf+0xae>
     fd4:	21 60       	ori	r18, 0x01	; 1
     fd6:	26 c0       	rjmp	.+76     	; 0x1024 <vfprintf+0xf0>
     fd8:	22 60       	ori	r18, 0x02	; 2
     fda:	24 60       	ori	r18, 0x04	; 4
     fdc:	23 c0       	rjmp	.+70     	; 0x1024 <vfprintf+0xf0>
     fde:	28 60       	ori	r18, 0x08	; 8
     fe0:	21 c0       	rjmp	.+66     	; 0x1024 <vfprintf+0xf0>
     fe2:	27 fd       	sbrc	r18, 7
     fe4:	27 c0       	rjmp	.+78     	; 0x1034 <vfprintf+0x100>
     fe6:	30 ed       	ldi	r19, 0xD0	; 208
     fe8:	38 0f       	add	r19, r24
     fea:	3a 30       	cpi	r19, 0x0A	; 10
     fec:	78 f4       	brcc	.+30     	; 0x100c <vfprintf+0xd8>
     fee:	26 ff       	sbrs	r18, 6
     ff0:	06 c0       	rjmp	.+12     	; 0xffe <vfprintf+0xca>
     ff2:	fa e0       	ldi	r31, 0x0A	; 10
     ff4:	5f 9e       	mul	r5, r31
     ff6:	30 0d       	add	r19, r0
     ff8:	11 24       	eor	r1, r1
     ffa:	53 2e       	mov	r5, r19
     ffc:	13 c0       	rjmp	.+38     	; 0x1024 <vfprintf+0xf0>
     ffe:	8a e0       	ldi	r24, 0x0A	; 10
    1000:	38 9e       	mul	r3, r24
    1002:	30 0d       	add	r19, r0
    1004:	11 24       	eor	r1, r1
    1006:	33 2e       	mov	r3, r19
    1008:	20 62       	ori	r18, 0x20	; 32
    100a:	0c c0       	rjmp	.+24     	; 0x1024 <vfprintf+0xf0>
    100c:	8e 32       	cpi	r24, 0x2E	; 46
    100e:	21 f4       	brne	.+8      	; 0x1018 <vfprintf+0xe4>
    1010:	26 fd       	sbrc	r18, 6
    1012:	5f c1       	rjmp	.+702    	; 0x12d2 <vfprintf+0x39e>
    1014:	20 64       	ori	r18, 0x40	; 64
    1016:	06 c0       	rjmp	.+12     	; 0x1024 <vfprintf+0xf0>
    1018:	8c 36       	cpi	r24, 0x6C	; 108
    101a:	11 f4       	brne	.+4      	; 0x1020 <vfprintf+0xec>
    101c:	20 68       	ori	r18, 0x80	; 128
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <vfprintf+0xf0>
    1020:	88 36       	cpi	r24, 0x68	; 104
    1022:	41 f4       	brne	.+16     	; 0x1034 <vfprintf+0x100>
    1024:	f6 01       	movw	r30, r12
    1026:	93 fd       	sbrc	r25, 3
    1028:	85 91       	lpm	r24, Z+
    102a:	93 ff       	sbrs	r25, 3
    102c:	81 91       	ld	r24, Z+
    102e:	6f 01       	movw	r12, r30
    1030:	81 11       	cpse	r24, r1
    1032:	c1 cf       	rjmp	.-126    	; 0xfb6 <vfprintf+0x82>
    1034:	98 2f       	mov	r25, r24
    1036:	9f 7d       	andi	r25, 0xDF	; 223
    1038:	95 54       	subi	r25, 0x45	; 69
    103a:	93 30       	cpi	r25, 0x03	; 3
    103c:	28 f4       	brcc	.+10     	; 0x1048 <vfprintf+0x114>
    103e:	0c 5f       	subi	r16, 0xFC	; 252
    1040:	1f 4f       	sbci	r17, 0xFF	; 255
    1042:	ff e3       	ldi	r31, 0x3F	; 63
    1044:	f9 83       	std	Y+1, r31	; 0x01
    1046:	0d c0       	rjmp	.+26     	; 0x1062 <vfprintf+0x12e>
    1048:	83 36       	cpi	r24, 0x63	; 99
    104a:	31 f0       	breq	.+12     	; 0x1058 <vfprintf+0x124>
    104c:	83 37       	cpi	r24, 0x73	; 115
    104e:	71 f0       	breq	.+28     	; 0x106c <vfprintf+0x138>
    1050:	83 35       	cpi	r24, 0x53	; 83
    1052:	09 f0       	breq	.+2      	; 0x1056 <vfprintf+0x122>
    1054:	57 c0       	rjmp	.+174    	; 0x1104 <vfprintf+0x1d0>
    1056:	21 c0       	rjmp	.+66     	; 0x109a <vfprintf+0x166>
    1058:	f8 01       	movw	r30, r16
    105a:	80 81       	ld	r24, Z
    105c:	89 83       	std	Y+1, r24	; 0x01
    105e:	0e 5f       	subi	r16, 0xFE	; 254
    1060:	1f 4f       	sbci	r17, 0xFF	; 255
    1062:	44 24       	eor	r4, r4
    1064:	43 94       	inc	r4
    1066:	51 2c       	mov	r5, r1
    1068:	54 01       	movw	r10, r8
    106a:	14 c0       	rjmp	.+40     	; 0x1094 <vfprintf+0x160>
    106c:	38 01       	movw	r6, r16
    106e:	f2 e0       	ldi	r31, 0x02	; 2
    1070:	6f 0e       	add	r6, r31
    1072:	71 1c       	adc	r7, r1
    1074:	f8 01       	movw	r30, r16
    1076:	a0 80       	ld	r10, Z
    1078:	b1 80       	ldd	r11, Z+1	; 0x01
    107a:	26 ff       	sbrs	r18, 6
    107c:	03 c0       	rjmp	.+6      	; 0x1084 <vfprintf+0x150>
    107e:	65 2d       	mov	r22, r5
    1080:	70 e0       	ldi	r23, 0x00	; 0
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <vfprintf+0x154>
    1084:	6f ef       	ldi	r22, 0xFF	; 255
    1086:	7f ef       	ldi	r23, 0xFF	; 255
    1088:	c5 01       	movw	r24, r10
    108a:	2c 87       	std	Y+12, r18	; 0x0c
    108c:	94 d2       	rcall	.+1320   	; 0x15b6 <strnlen>
    108e:	2c 01       	movw	r4, r24
    1090:	83 01       	movw	r16, r6
    1092:	2c 85       	ldd	r18, Y+12	; 0x0c
    1094:	2f 77       	andi	r18, 0x7F	; 127
    1096:	22 2e       	mov	r2, r18
    1098:	16 c0       	rjmp	.+44     	; 0x10c6 <vfprintf+0x192>
    109a:	38 01       	movw	r6, r16
    109c:	f2 e0       	ldi	r31, 0x02	; 2
    109e:	6f 0e       	add	r6, r31
    10a0:	71 1c       	adc	r7, r1
    10a2:	f8 01       	movw	r30, r16
    10a4:	a0 80       	ld	r10, Z
    10a6:	b1 80       	ldd	r11, Z+1	; 0x01
    10a8:	26 ff       	sbrs	r18, 6
    10aa:	03 c0       	rjmp	.+6      	; 0x10b2 <vfprintf+0x17e>
    10ac:	65 2d       	mov	r22, r5
    10ae:	70 e0       	ldi	r23, 0x00	; 0
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <vfprintf+0x182>
    10b2:	6f ef       	ldi	r22, 0xFF	; 255
    10b4:	7f ef       	ldi	r23, 0xFF	; 255
    10b6:	c5 01       	movw	r24, r10
    10b8:	2c 87       	std	Y+12, r18	; 0x0c
    10ba:	6b d2       	rcall	.+1238   	; 0x1592 <strnlen_P>
    10bc:	2c 01       	movw	r4, r24
    10be:	2c 85       	ldd	r18, Y+12	; 0x0c
    10c0:	20 68       	ori	r18, 0x80	; 128
    10c2:	22 2e       	mov	r2, r18
    10c4:	83 01       	movw	r16, r6
    10c6:	23 fc       	sbrc	r2, 3
    10c8:	19 c0       	rjmp	.+50     	; 0x10fc <vfprintf+0x1c8>
    10ca:	83 2d       	mov	r24, r3
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	48 16       	cp	r4, r24
    10d0:	59 06       	cpc	r5, r25
    10d2:	a0 f4       	brcc	.+40     	; 0x10fc <vfprintf+0x1c8>
    10d4:	b7 01       	movw	r22, r14
    10d6:	80 e2       	ldi	r24, 0x20	; 32
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	78 d2       	rcall	.+1264   	; 0x15cc <fputc>
    10dc:	3a 94       	dec	r3
    10de:	f5 cf       	rjmp	.-22     	; 0x10ca <vfprintf+0x196>
    10e0:	f5 01       	movw	r30, r10
    10e2:	27 fc       	sbrc	r2, 7
    10e4:	85 91       	lpm	r24, Z+
    10e6:	27 fe       	sbrs	r2, 7
    10e8:	81 91       	ld	r24, Z+
    10ea:	5f 01       	movw	r10, r30
    10ec:	b7 01       	movw	r22, r14
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	6d d2       	rcall	.+1242   	; 0x15cc <fputc>
    10f2:	31 10       	cpse	r3, r1
    10f4:	3a 94       	dec	r3
    10f6:	f1 e0       	ldi	r31, 0x01	; 1
    10f8:	4f 1a       	sub	r4, r31
    10fa:	51 08       	sbc	r5, r1
    10fc:	41 14       	cp	r4, r1
    10fe:	51 04       	cpc	r5, r1
    1100:	79 f7       	brne	.-34     	; 0x10e0 <vfprintf+0x1ac>
    1102:	de c0       	rjmp	.+444    	; 0x12c0 <vfprintf+0x38c>
    1104:	84 36       	cpi	r24, 0x64	; 100
    1106:	11 f0       	breq	.+4      	; 0x110c <vfprintf+0x1d8>
    1108:	89 36       	cpi	r24, 0x69	; 105
    110a:	31 f5       	brne	.+76     	; 0x1158 <vfprintf+0x224>
    110c:	f8 01       	movw	r30, r16
    110e:	27 ff       	sbrs	r18, 7
    1110:	07 c0       	rjmp	.+14     	; 0x1120 <vfprintf+0x1ec>
    1112:	60 81       	ld	r22, Z
    1114:	71 81       	ldd	r23, Z+1	; 0x01
    1116:	82 81       	ldd	r24, Z+2	; 0x02
    1118:	93 81       	ldd	r25, Z+3	; 0x03
    111a:	0c 5f       	subi	r16, 0xFC	; 252
    111c:	1f 4f       	sbci	r17, 0xFF	; 255
    111e:	08 c0       	rjmp	.+16     	; 0x1130 <vfprintf+0x1fc>
    1120:	60 81       	ld	r22, Z
    1122:	71 81       	ldd	r23, Z+1	; 0x01
    1124:	88 27       	eor	r24, r24
    1126:	77 fd       	sbrc	r23, 7
    1128:	80 95       	com	r24
    112a:	98 2f       	mov	r25, r24
    112c:	0e 5f       	subi	r16, 0xFE	; 254
    112e:	1f 4f       	sbci	r17, 0xFF	; 255
    1130:	2f 76       	andi	r18, 0x6F	; 111
    1132:	b2 2e       	mov	r11, r18
    1134:	97 ff       	sbrs	r25, 7
    1136:	09 c0       	rjmp	.+18     	; 0x114a <vfprintf+0x216>
    1138:	90 95       	com	r25
    113a:	80 95       	com	r24
    113c:	70 95       	com	r23
    113e:	61 95       	neg	r22
    1140:	7f 4f       	sbci	r23, 0xFF	; 255
    1142:	8f 4f       	sbci	r24, 0xFF	; 255
    1144:	9f 4f       	sbci	r25, 0xFF	; 255
    1146:	20 68       	ori	r18, 0x80	; 128
    1148:	b2 2e       	mov	r11, r18
    114a:	2a e0       	ldi	r18, 0x0A	; 10
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	a4 01       	movw	r20, r8
    1150:	6f d2       	rcall	.+1246   	; 0x1630 <__ultoa_invert>
    1152:	a8 2e       	mov	r10, r24
    1154:	a8 18       	sub	r10, r8
    1156:	43 c0       	rjmp	.+134    	; 0x11de <vfprintf+0x2aa>
    1158:	85 37       	cpi	r24, 0x75	; 117
    115a:	29 f4       	brne	.+10     	; 0x1166 <vfprintf+0x232>
    115c:	2f 7e       	andi	r18, 0xEF	; 239
    115e:	b2 2e       	mov	r11, r18
    1160:	2a e0       	ldi	r18, 0x0A	; 10
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	25 c0       	rjmp	.+74     	; 0x11b0 <vfprintf+0x27c>
    1166:	f2 2f       	mov	r31, r18
    1168:	f9 7f       	andi	r31, 0xF9	; 249
    116a:	bf 2e       	mov	r11, r31
    116c:	8f 36       	cpi	r24, 0x6F	; 111
    116e:	c1 f0       	breq	.+48     	; 0x11a0 <vfprintf+0x26c>
    1170:	18 f4       	brcc	.+6      	; 0x1178 <vfprintf+0x244>
    1172:	88 35       	cpi	r24, 0x58	; 88
    1174:	79 f0       	breq	.+30     	; 0x1194 <vfprintf+0x260>
    1176:	ad c0       	rjmp	.+346    	; 0x12d2 <vfprintf+0x39e>
    1178:	80 37       	cpi	r24, 0x70	; 112
    117a:	19 f0       	breq	.+6      	; 0x1182 <vfprintf+0x24e>
    117c:	88 37       	cpi	r24, 0x78	; 120
    117e:	21 f0       	breq	.+8      	; 0x1188 <vfprintf+0x254>
    1180:	a8 c0       	rjmp	.+336    	; 0x12d2 <vfprintf+0x39e>
    1182:	2f 2f       	mov	r18, r31
    1184:	20 61       	ori	r18, 0x10	; 16
    1186:	b2 2e       	mov	r11, r18
    1188:	b4 fe       	sbrs	r11, 4
    118a:	0d c0       	rjmp	.+26     	; 0x11a6 <vfprintf+0x272>
    118c:	8b 2d       	mov	r24, r11
    118e:	84 60       	ori	r24, 0x04	; 4
    1190:	b8 2e       	mov	r11, r24
    1192:	09 c0       	rjmp	.+18     	; 0x11a6 <vfprintf+0x272>
    1194:	24 ff       	sbrs	r18, 4
    1196:	0a c0       	rjmp	.+20     	; 0x11ac <vfprintf+0x278>
    1198:	9f 2f       	mov	r25, r31
    119a:	96 60       	ori	r25, 0x06	; 6
    119c:	b9 2e       	mov	r11, r25
    119e:	06 c0       	rjmp	.+12     	; 0x11ac <vfprintf+0x278>
    11a0:	28 e0       	ldi	r18, 0x08	; 8
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	05 c0       	rjmp	.+10     	; 0x11b0 <vfprintf+0x27c>
    11a6:	20 e1       	ldi	r18, 0x10	; 16
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <vfprintf+0x27c>
    11ac:	20 e1       	ldi	r18, 0x10	; 16
    11ae:	32 e0       	ldi	r19, 0x02	; 2
    11b0:	f8 01       	movw	r30, r16
    11b2:	b7 fe       	sbrs	r11, 7
    11b4:	07 c0       	rjmp	.+14     	; 0x11c4 <vfprintf+0x290>
    11b6:	60 81       	ld	r22, Z
    11b8:	71 81       	ldd	r23, Z+1	; 0x01
    11ba:	82 81       	ldd	r24, Z+2	; 0x02
    11bc:	93 81       	ldd	r25, Z+3	; 0x03
    11be:	0c 5f       	subi	r16, 0xFC	; 252
    11c0:	1f 4f       	sbci	r17, 0xFF	; 255
    11c2:	06 c0       	rjmp	.+12     	; 0x11d0 <vfprintf+0x29c>
    11c4:	60 81       	ld	r22, Z
    11c6:	71 81       	ldd	r23, Z+1	; 0x01
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 5f       	subi	r16, 0xFE	; 254
    11ce:	1f 4f       	sbci	r17, 0xFF	; 255
    11d0:	a4 01       	movw	r20, r8
    11d2:	2e d2       	rcall	.+1116   	; 0x1630 <__ultoa_invert>
    11d4:	a8 2e       	mov	r10, r24
    11d6:	a8 18       	sub	r10, r8
    11d8:	fb 2d       	mov	r31, r11
    11da:	ff 77       	andi	r31, 0x7F	; 127
    11dc:	bf 2e       	mov	r11, r31
    11de:	b6 fe       	sbrs	r11, 6
    11e0:	0b c0       	rjmp	.+22     	; 0x11f8 <vfprintf+0x2c4>
    11e2:	2b 2d       	mov	r18, r11
    11e4:	2e 7f       	andi	r18, 0xFE	; 254
    11e6:	a5 14       	cp	r10, r5
    11e8:	50 f4       	brcc	.+20     	; 0x11fe <vfprintf+0x2ca>
    11ea:	b4 fe       	sbrs	r11, 4
    11ec:	0a c0       	rjmp	.+20     	; 0x1202 <vfprintf+0x2ce>
    11ee:	b2 fc       	sbrc	r11, 2
    11f0:	08 c0       	rjmp	.+16     	; 0x1202 <vfprintf+0x2ce>
    11f2:	2b 2d       	mov	r18, r11
    11f4:	2e 7e       	andi	r18, 0xEE	; 238
    11f6:	05 c0       	rjmp	.+10     	; 0x1202 <vfprintf+0x2ce>
    11f8:	7a 2c       	mov	r7, r10
    11fa:	2b 2d       	mov	r18, r11
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <vfprintf+0x2d0>
    11fe:	7a 2c       	mov	r7, r10
    1200:	01 c0       	rjmp	.+2      	; 0x1204 <vfprintf+0x2d0>
    1202:	75 2c       	mov	r7, r5
    1204:	24 ff       	sbrs	r18, 4
    1206:	0d c0       	rjmp	.+26     	; 0x1222 <vfprintf+0x2ee>
    1208:	fe 01       	movw	r30, r28
    120a:	ea 0d       	add	r30, r10
    120c:	f1 1d       	adc	r31, r1
    120e:	80 81       	ld	r24, Z
    1210:	80 33       	cpi	r24, 0x30	; 48
    1212:	11 f4       	brne	.+4      	; 0x1218 <vfprintf+0x2e4>
    1214:	29 7e       	andi	r18, 0xE9	; 233
    1216:	09 c0       	rjmp	.+18     	; 0x122a <vfprintf+0x2f6>
    1218:	22 ff       	sbrs	r18, 2
    121a:	06 c0       	rjmp	.+12     	; 0x1228 <vfprintf+0x2f4>
    121c:	73 94       	inc	r7
    121e:	73 94       	inc	r7
    1220:	04 c0       	rjmp	.+8      	; 0x122a <vfprintf+0x2f6>
    1222:	82 2f       	mov	r24, r18
    1224:	86 78       	andi	r24, 0x86	; 134
    1226:	09 f0       	breq	.+2      	; 0x122a <vfprintf+0x2f6>
    1228:	73 94       	inc	r7
    122a:	23 fd       	sbrc	r18, 3
    122c:	12 c0       	rjmp	.+36     	; 0x1252 <vfprintf+0x31e>
    122e:	20 ff       	sbrs	r18, 0
    1230:	06 c0       	rjmp	.+12     	; 0x123e <vfprintf+0x30a>
    1232:	5a 2c       	mov	r5, r10
    1234:	73 14       	cp	r7, r3
    1236:	18 f4       	brcc	.+6      	; 0x123e <vfprintf+0x30a>
    1238:	53 0c       	add	r5, r3
    123a:	57 18       	sub	r5, r7
    123c:	73 2c       	mov	r7, r3
    123e:	73 14       	cp	r7, r3
    1240:	60 f4       	brcc	.+24     	; 0x125a <vfprintf+0x326>
    1242:	b7 01       	movw	r22, r14
    1244:	80 e2       	ldi	r24, 0x20	; 32
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	2c 87       	std	Y+12, r18	; 0x0c
    124a:	c0 d1       	rcall	.+896    	; 0x15cc <fputc>
    124c:	73 94       	inc	r7
    124e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1250:	f6 cf       	rjmp	.-20     	; 0x123e <vfprintf+0x30a>
    1252:	73 14       	cp	r7, r3
    1254:	10 f4       	brcc	.+4      	; 0x125a <vfprintf+0x326>
    1256:	37 18       	sub	r3, r7
    1258:	01 c0       	rjmp	.+2      	; 0x125c <vfprintf+0x328>
    125a:	31 2c       	mov	r3, r1
    125c:	24 ff       	sbrs	r18, 4
    125e:	11 c0       	rjmp	.+34     	; 0x1282 <vfprintf+0x34e>
    1260:	b7 01       	movw	r22, r14
    1262:	80 e3       	ldi	r24, 0x30	; 48
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	2c 87       	std	Y+12, r18	; 0x0c
    1268:	b1 d1       	rcall	.+866    	; 0x15cc <fputc>
    126a:	2c 85       	ldd	r18, Y+12	; 0x0c
    126c:	22 ff       	sbrs	r18, 2
    126e:	16 c0       	rjmp	.+44     	; 0x129c <vfprintf+0x368>
    1270:	21 ff       	sbrs	r18, 1
    1272:	03 c0       	rjmp	.+6      	; 0x127a <vfprintf+0x346>
    1274:	88 e5       	ldi	r24, 0x58	; 88
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	02 c0       	rjmp	.+4      	; 0x127e <vfprintf+0x34a>
    127a:	88 e7       	ldi	r24, 0x78	; 120
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	b7 01       	movw	r22, r14
    1280:	0c c0       	rjmp	.+24     	; 0x129a <vfprintf+0x366>
    1282:	82 2f       	mov	r24, r18
    1284:	86 78       	andi	r24, 0x86	; 134
    1286:	51 f0       	breq	.+20     	; 0x129c <vfprintf+0x368>
    1288:	21 fd       	sbrc	r18, 1
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <vfprintf+0x35c>
    128c:	80 e2       	ldi	r24, 0x20	; 32
    128e:	01 c0       	rjmp	.+2      	; 0x1292 <vfprintf+0x35e>
    1290:	8b e2       	ldi	r24, 0x2B	; 43
    1292:	27 fd       	sbrc	r18, 7
    1294:	8d e2       	ldi	r24, 0x2D	; 45
    1296:	b7 01       	movw	r22, r14
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	98 d1       	rcall	.+816    	; 0x15cc <fputc>
    129c:	a5 14       	cp	r10, r5
    129e:	30 f4       	brcc	.+12     	; 0x12ac <vfprintf+0x378>
    12a0:	b7 01       	movw	r22, r14
    12a2:	80 e3       	ldi	r24, 0x30	; 48
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	92 d1       	rcall	.+804    	; 0x15cc <fputc>
    12a8:	5a 94       	dec	r5
    12aa:	f8 cf       	rjmp	.-16     	; 0x129c <vfprintf+0x368>
    12ac:	aa 94       	dec	r10
    12ae:	f4 01       	movw	r30, r8
    12b0:	ea 0d       	add	r30, r10
    12b2:	f1 1d       	adc	r31, r1
    12b4:	80 81       	ld	r24, Z
    12b6:	b7 01       	movw	r22, r14
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	88 d1       	rcall	.+784    	; 0x15cc <fputc>
    12bc:	a1 10       	cpse	r10, r1
    12be:	f6 cf       	rjmp	.-20     	; 0x12ac <vfprintf+0x378>
    12c0:	33 20       	and	r3, r3
    12c2:	09 f4       	brne	.+2      	; 0x12c6 <vfprintf+0x392>
    12c4:	5d ce       	rjmp	.-838    	; 0xf80 <vfprintf+0x4c>
    12c6:	b7 01       	movw	r22, r14
    12c8:	80 e2       	ldi	r24, 0x20	; 32
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	7f d1       	rcall	.+766    	; 0x15cc <fputc>
    12ce:	3a 94       	dec	r3
    12d0:	f7 cf       	rjmp	.-18     	; 0x12c0 <vfprintf+0x38c>
    12d2:	f7 01       	movw	r30, r14
    12d4:	86 81       	ldd	r24, Z+6	; 0x06
    12d6:	97 81       	ldd	r25, Z+7	; 0x07
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <vfprintf+0x3aa>
    12da:	8f ef       	ldi	r24, 0xFF	; 255
    12dc:	9f ef       	ldi	r25, 0xFF	; 255
    12de:	2c 96       	adiw	r28, 0x0c	; 12
    12e0:	0f b6       	in	r0, 0x3f	; 63
    12e2:	f8 94       	cli
    12e4:	de bf       	out	0x3e, r29	; 62
    12e6:	0f be       	out	0x3f, r0	; 63
    12e8:	cd bf       	out	0x3d, r28	; 61
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	1f 91       	pop	r17
    12f0:	0f 91       	pop	r16
    12f2:	ff 90       	pop	r15
    12f4:	ef 90       	pop	r14
    12f6:	df 90       	pop	r13
    12f8:	cf 90       	pop	r12
    12fa:	bf 90       	pop	r11
    12fc:	af 90       	pop	r10
    12fe:	9f 90       	pop	r9
    1300:	8f 90       	pop	r8
    1302:	7f 90       	pop	r7
    1304:	6f 90       	pop	r6
    1306:	5f 90       	pop	r5
    1308:	4f 90       	pop	r4
    130a:	3f 90       	pop	r3
    130c:	2f 90       	pop	r2
    130e:	08 95       	ret

00001310 <calloc>:
    1310:	0f 93       	push	r16
    1312:	1f 93       	push	r17
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	86 9f       	mul	r24, r22
    131a:	80 01       	movw	r16, r0
    131c:	87 9f       	mul	r24, r23
    131e:	10 0d       	add	r17, r0
    1320:	96 9f       	mul	r25, r22
    1322:	10 0d       	add	r17, r0
    1324:	11 24       	eor	r1, r1
    1326:	c8 01       	movw	r24, r16
    1328:	0d d0       	rcall	.+26     	; 0x1344 <malloc>
    132a:	ec 01       	movw	r28, r24
    132c:	00 97       	sbiw	r24, 0x00	; 0
    132e:	21 f0       	breq	.+8      	; 0x1338 <calloc+0x28>
    1330:	a8 01       	movw	r20, r16
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	38 d1       	rcall	.+624    	; 0x15a8 <memset>
    1338:	ce 01       	movw	r24, r28
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	1f 91       	pop	r17
    1340:	0f 91       	pop	r16
    1342:	08 95       	ret

00001344 <malloc>:
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	82 30       	cpi	r24, 0x02	; 2
    134a:	91 05       	cpc	r25, r1
    134c:	10 f4       	brcc	.+4      	; 0x1352 <malloc+0xe>
    134e:	82 e0       	ldi	r24, 0x02	; 2
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	e0 91 5b 03 	lds	r30, 0x035B
    1356:	f0 91 5c 03 	lds	r31, 0x035C
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	a0 e0       	ldi	r26, 0x00	; 0
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	30 97       	sbiw	r30, 0x00	; 0
    1364:	39 f1       	breq	.+78     	; 0x13b4 <malloc+0x70>
    1366:	40 81       	ld	r20, Z
    1368:	51 81       	ldd	r21, Z+1	; 0x01
    136a:	48 17       	cp	r20, r24
    136c:	59 07       	cpc	r21, r25
    136e:	b8 f0       	brcs	.+46     	; 0x139e <malloc+0x5a>
    1370:	48 17       	cp	r20, r24
    1372:	59 07       	cpc	r21, r25
    1374:	71 f4       	brne	.+28     	; 0x1392 <malloc+0x4e>
    1376:	82 81       	ldd	r24, Z+2	; 0x02
    1378:	93 81       	ldd	r25, Z+3	; 0x03
    137a:	10 97       	sbiw	r26, 0x00	; 0
    137c:	29 f0       	breq	.+10     	; 0x1388 <malloc+0x44>
    137e:	13 96       	adiw	r26, 0x03	; 3
    1380:	9c 93       	st	X, r25
    1382:	8e 93       	st	-X, r24
    1384:	12 97       	sbiw	r26, 0x02	; 2
    1386:	2c c0       	rjmp	.+88     	; 0x13e0 <malloc+0x9c>
    1388:	90 93 5c 03 	sts	0x035C, r25
    138c:	80 93 5b 03 	sts	0x035B, r24
    1390:	27 c0       	rjmp	.+78     	; 0x13e0 <malloc+0x9c>
    1392:	21 15       	cp	r18, r1
    1394:	31 05       	cpc	r19, r1
    1396:	31 f0       	breq	.+12     	; 0x13a4 <malloc+0x60>
    1398:	42 17       	cp	r20, r18
    139a:	53 07       	cpc	r21, r19
    139c:	18 f0       	brcs	.+6      	; 0x13a4 <malloc+0x60>
    139e:	a9 01       	movw	r20, r18
    13a0:	db 01       	movw	r26, r22
    13a2:	01 c0       	rjmp	.+2      	; 0x13a6 <malloc+0x62>
    13a4:	ef 01       	movw	r28, r30
    13a6:	9a 01       	movw	r18, r20
    13a8:	bd 01       	movw	r22, r26
    13aa:	df 01       	movw	r26, r30
    13ac:	02 80       	ldd	r0, Z+2	; 0x02
    13ae:	f3 81       	ldd	r31, Z+3	; 0x03
    13b0:	e0 2d       	mov	r30, r0
    13b2:	d7 cf       	rjmp	.-82     	; 0x1362 <malloc+0x1e>
    13b4:	21 15       	cp	r18, r1
    13b6:	31 05       	cpc	r19, r1
    13b8:	f9 f0       	breq	.+62     	; 0x13f8 <malloc+0xb4>
    13ba:	28 1b       	sub	r18, r24
    13bc:	39 0b       	sbc	r19, r25
    13be:	24 30       	cpi	r18, 0x04	; 4
    13c0:	31 05       	cpc	r19, r1
    13c2:	80 f4       	brcc	.+32     	; 0x13e4 <malloc+0xa0>
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	9b 81       	ldd	r25, Y+3	; 0x03
    13c8:	61 15       	cp	r22, r1
    13ca:	71 05       	cpc	r23, r1
    13cc:	21 f0       	breq	.+8      	; 0x13d6 <malloc+0x92>
    13ce:	fb 01       	movw	r30, r22
    13d0:	93 83       	std	Z+3, r25	; 0x03
    13d2:	82 83       	std	Z+2, r24	; 0x02
    13d4:	04 c0       	rjmp	.+8      	; 0x13de <malloc+0x9a>
    13d6:	90 93 5c 03 	sts	0x035C, r25
    13da:	80 93 5b 03 	sts	0x035B, r24
    13de:	fe 01       	movw	r30, r28
    13e0:	32 96       	adiw	r30, 0x02	; 2
    13e2:	44 c0       	rjmp	.+136    	; 0x146c <malloc+0x128>
    13e4:	fe 01       	movw	r30, r28
    13e6:	e2 0f       	add	r30, r18
    13e8:	f3 1f       	adc	r31, r19
    13ea:	81 93       	st	Z+, r24
    13ec:	91 93       	st	Z+, r25
    13ee:	22 50       	subi	r18, 0x02	; 2
    13f0:	31 09       	sbc	r19, r1
    13f2:	39 83       	std	Y+1, r19	; 0x01
    13f4:	28 83       	st	Y, r18
    13f6:	3a c0       	rjmp	.+116    	; 0x146c <malloc+0x128>
    13f8:	20 91 59 03 	lds	r18, 0x0359
    13fc:	30 91 5a 03 	lds	r19, 0x035A
    1400:	23 2b       	or	r18, r19
    1402:	41 f4       	brne	.+16     	; 0x1414 <malloc+0xd0>
    1404:	20 91 02 02 	lds	r18, 0x0202
    1408:	30 91 03 02 	lds	r19, 0x0203
    140c:	30 93 5a 03 	sts	0x035A, r19
    1410:	20 93 59 03 	sts	0x0359, r18
    1414:	20 91 00 02 	lds	r18, 0x0200
    1418:	30 91 01 02 	lds	r19, 0x0201
    141c:	21 15       	cp	r18, r1
    141e:	31 05       	cpc	r19, r1
    1420:	41 f4       	brne	.+16     	; 0x1432 <malloc+0xee>
    1422:	2d b7       	in	r18, 0x3d	; 61
    1424:	3e b7       	in	r19, 0x3e	; 62
    1426:	40 91 04 02 	lds	r20, 0x0204
    142a:	50 91 05 02 	lds	r21, 0x0205
    142e:	24 1b       	sub	r18, r20
    1430:	35 0b       	sbc	r19, r21
    1432:	e0 91 59 03 	lds	r30, 0x0359
    1436:	f0 91 5a 03 	lds	r31, 0x035A
    143a:	e2 17       	cp	r30, r18
    143c:	f3 07       	cpc	r31, r19
    143e:	a0 f4       	brcc	.+40     	; 0x1468 <malloc+0x124>
    1440:	2e 1b       	sub	r18, r30
    1442:	3f 0b       	sbc	r19, r31
    1444:	28 17       	cp	r18, r24
    1446:	39 07       	cpc	r19, r25
    1448:	78 f0       	brcs	.+30     	; 0x1468 <malloc+0x124>
    144a:	ac 01       	movw	r20, r24
    144c:	4e 5f       	subi	r20, 0xFE	; 254
    144e:	5f 4f       	sbci	r21, 0xFF	; 255
    1450:	24 17       	cp	r18, r20
    1452:	35 07       	cpc	r19, r21
    1454:	48 f0       	brcs	.+18     	; 0x1468 <malloc+0x124>
    1456:	4e 0f       	add	r20, r30
    1458:	5f 1f       	adc	r21, r31
    145a:	50 93 5a 03 	sts	0x035A, r21
    145e:	40 93 59 03 	sts	0x0359, r20
    1462:	81 93       	st	Z+, r24
    1464:	91 93       	st	Z+, r25
    1466:	02 c0       	rjmp	.+4      	; 0x146c <malloc+0x128>
    1468:	e0 e0       	ldi	r30, 0x00	; 0
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	cf 01       	movw	r24, r30
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	08 95       	ret

00001474 <free>:
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	09 f4       	brne	.+2      	; 0x147e <free+0xa>
    147c:	87 c0       	rjmp	.+270    	; 0x158c <free+0x118>
    147e:	fc 01       	movw	r30, r24
    1480:	32 97       	sbiw	r30, 0x02	; 2
    1482:	13 82       	std	Z+3, r1	; 0x03
    1484:	12 82       	std	Z+2, r1	; 0x02
    1486:	c0 91 5b 03 	lds	r28, 0x035B
    148a:	d0 91 5c 03 	lds	r29, 0x035C
    148e:	20 97       	sbiw	r28, 0x00	; 0
    1490:	81 f4       	brne	.+32     	; 0x14b2 <free+0x3e>
    1492:	20 81       	ld	r18, Z
    1494:	31 81       	ldd	r19, Z+1	; 0x01
    1496:	28 0f       	add	r18, r24
    1498:	39 1f       	adc	r19, r25
    149a:	80 91 59 03 	lds	r24, 0x0359
    149e:	90 91 5a 03 	lds	r25, 0x035A
    14a2:	82 17       	cp	r24, r18
    14a4:	93 07       	cpc	r25, r19
    14a6:	79 f5       	brne	.+94     	; 0x1506 <free+0x92>
    14a8:	f0 93 5a 03 	sts	0x035A, r31
    14ac:	e0 93 59 03 	sts	0x0359, r30
    14b0:	6d c0       	rjmp	.+218    	; 0x158c <free+0x118>
    14b2:	de 01       	movw	r26, r28
    14b4:	20 e0       	ldi	r18, 0x00	; 0
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	ae 17       	cp	r26, r30
    14ba:	bf 07       	cpc	r27, r31
    14bc:	50 f4       	brcc	.+20     	; 0x14d2 <free+0x5e>
    14be:	12 96       	adiw	r26, 0x02	; 2
    14c0:	4d 91       	ld	r20, X+
    14c2:	5c 91       	ld	r21, X
    14c4:	13 97       	sbiw	r26, 0x03	; 3
    14c6:	9d 01       	movw	r18, r26
    14c8:	41 15       	cp	r20, r1
    14ca:	51 05       	cpc	r21, r1
    14cc:	09 f1       	breq	.+66     	; 0x1510 <free+0x9c>
    14ce:	da 01       	movw	r26, r20
    14d0:	f3 cf       	rjmp	.-26     	; 0x14b8 <free+0x44>
    14d2:	b3 83       	std	Z+3, r27	; 0x03
    14d4:	a2 83       	std	Z+2, r26	; 0x02
    14d6:	40 81       	ld	r20, Z
    14d8:	51 81       	ldd	r21, Z+1	; 0x01
    14da:	84 0f       	add	r24, r20
    14dc:	95 1f       	adc	r25, r21
    14de:	8a 17       	cp	r24, r26
    14e0:	9b 07       	cpc	r25, r27
    14e2:	71 f4       	brne	.+28     	; 0x1500 <free+0x8c>
    14e4:	8d 91       	ld	r24, X+
    14e6:	9c 91       	ld	r25, X
    14e8:	11 97       	sbiw	r26, 0x01	; 1
    14ea:	84 0f       	add	r24, r20
    14ec:	95 1f       	adc	r25, r21
    14ee:	02 96       	adiw	r24, 0x02	; 2
    14f0:	91 83       	std	Z+1, r25	; 0x01
    14f2:	80 83       	st	Z, r24
    14f4:	12 96       	adiw	r26, 0x02	; 2
    14f6:	8d 91       	ld	r24, X+
    14f8:	9c 91       	ld	r25, X
    14fa:	13 97       	sbiw	r26, 0x03	; 3
    14fc:	93 83       	std	Z+3, r25	; 0x03
    14fe:	82 83       	std	Z+2, r24	; 0x02
    1500:	21 15       	cp	r18, r1
    1502:	31 05       	cpc	r19, r1
    1504:	29 f4       	brne	.+10     	; 0x1510 <free+0x9c>
    1506:	f0 93 5c 03 	sts	0x035C, r31
    150a:	e0 93 5b 03 	sts	0x035B, r30
    150e:	3e c0       	rjmp	.+124    	; 0x158c <free+0x118>
    1510:	d9 01       	movw	r26, r18
    1512:	13 96       	adiw	r26, 0x03	; 3
    1514:	fc 93       	st	X, r31
    1516:	ee 93       	st	-X, r30
    1518:	12 97       	sbiw	r26, 0x02	; 2
    151a:	4d 91       	ld	r20, X+
    151c:	5d 91       	ld	r21, X+
    151e:	a4 0f       	add	r26, r20
    1520:	b5 1f       	adc	r27, r21
    1522:	ea 17       	cp	r30, r26
    1524:	fb 07       	cpc	r31, r27
    1526:	79 f4       	brne	.+30     	; 0x1546 <free+0xd2>
    1528:	80 81       	ld	r24, Z
    152a:	91 81       	ldd	r25, Z+1	; 0x01
    152c:	84 0f       	add	r24, r20
    152e:	95 1f       	adc	r25, r21
    1530:	02 96       	adiw	r24, 0x02	; 2
    1532:	d9 01       	movw	r26, r18
    1534:	11 96       	adiw	r26, 0x01	; 1
    1536:	9c 93       	st	X, r25
    1538:	8e 93       	st	-X, r24
    153a:	82 81       	ldd	r24, Z+2	; 0x02
    153c:	93 81       	ldd	r25, Z+3	; 0x03
    153e:	13 96       	adiw	r26, 0x03	; 3
    1540:	9c 93       	st	X, r25
    1542:	8e 93       	st	-X, r24
    1544:	12 97       	sbiw	r26, 0x02	; 2
    1546:	e0 e0       	ldi	r30, 0x00	; 0
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	9b 81       	ldd	r25, Y+3	; 0x03
    154e:	00 97       	sbiw	r24, 0x00	; 0
    1550:	19 f0       	breq	.+6      	; 0x1558 <free+0xe4>
    1552:	fe 01       	movw	r30, r28
    1554:	ec 01       	movw	r28, r24
    1556:	f9 cf       	rjmp	.-14     	; 0x154a <free+0xd6>
    1558:	ce 01       	movw	r24, r28
    155a:	02 96       	adiw	r24, 0x02	; 2
    155c:	28 81       	ld	r18, Y
    155e:	39 81       	ldd	r19, Y+1	; 0x01
    1560:	82 0f       	add	r24, r18
    1562:	93 1f       	adc	r25, r19
    1564:	20 91 59 03 	lds	r18, 0x0359
    1568:	30 91 5a 03 	lds	r19, 0x035A
    156c:	28 17       	cp	r18, r24
    156e:	39 07       	cpc	r19, r25
    1570:	69 f4       	brne	.+26     	; 0x158c <free+0x118>
    1572:	30 97       	sbiw	r30, 0x00	; 0
    1574:	29 f4       	brne	.+10     	; 0x1580 <free+0x10c>
    1576:	10 92 5c 03 	sts	0x035C, r1
    157a:	10 92 5b 03 	sts	0x035B, r1
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <free+0x110>
    1580:	13 82       	std	Z+3, r1	; 0x03
    1582:	12 82       	std	Z+2, r1	; 0x02
    1584:	d0 93 5a 03 	sts	0x035A, r29
    1588:	c0 93 59 03 	sts	0x0359, r28
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	08 95       	ret

00001592 <strnlen_P>:
    1592:	fc 01       	movw	r30, r24
    1594:	05 90       	lpm	r0, Z+
    1596:	61 50       	subi	r22, 0x01	; 1
    1598:	70 40       	sbci	r23, 0x00	; 0
    159a:	01 10       	cpse	r0, r1
    159c:	d8 f7       	brcc	.-10     	; 0x1594 <strnlen_P+0x2>
    159e:	80 95       	com	r24
    15a0:	90 95       	com	r25
    15a2:	8e 0f       	add	r24, r30
    15a4:	9f 1f       	adc	r25, r31
    15a6:	08 95       	ret

000015a8 <memset>:
    15a8:	dc 01       	movw	r26, r24
    15aa:	01 c0       	rjmp	.+2      	; 0x15ae <memset+0x6>
    15ac:	6d 93       	st	X+, r22
    15ae:	41 50       	subi	r20, 0x01	; 1
    15b0:	50 40       	sbci	r21, 0x00	; 0
    15b2:	e0 f7       	brcc	.-8      	; 0x15ac <memset+0x4>
    15b4:	08 95       	ret

000015b6 <strnlen>:
    15b6:	fc 01       	movw	r30, r24
    15b8:	61 50       	subi	r22, 0x01	; 1
    15ba:	70 40       	sbci	r23, 0x00	; 0
    15bc:	01 90       	ld	r0, Z+
    15be:	01 10       	cpse	r0, r1
    15c0:	d8 f7       	brcc	.-10     	; 0x15b8 <strnlen+0x2>
    15c2:	80 95       	com	r24
    15c4:	90 95       	com	r25
    15c6:	8e 0f       	add	r24, r30
    15c8:	9f 1f       	adc	r25, r31
    15ca:	08 95       	ret

000015cc <fputc>:
    15cc:	0f 93       	push	r16
    15ce:	1f 93       	push	r17
    15d0:	cf 93       	push	r28
    15d2:	df 93       	push	r29
    15d4:	18 2f       	mov	r17, r24
    15d6:	09 2f       	mov	r16, r25
    15d8:	eb 01       	movw	r28, r22
    15da:	8b 81       	ldd	r24, Y+3	; 0x03
    15dc:	81 fd       	sbrc	r24, 1
    15de:	03 c0       	rjmp	.+6      	; 0x15e6 <fputc+0x1a>
    15e0:	8f ef       	ldi	r24, 0xFF	; 255
    15e2:	9f ef       	ldi	r25, 0xFF	; 255
    15e4:	20 c0       	rjmp	.+64     	; 0x1626 <fputc+0x5a>
    15e6:	82 ff       	sbrs	r24, 2
    15e8:	10 c0       	rjmp	.+32     	; 0x160a <fputc+0x3e>
    15ea:	4e 81       	ldd	r20, Y+6	; 0x06
    15ec:	5f 81       	ldd	r21, Y+7	; 0x07
    15ee:	2c 81       	ldd	r18, Y+4	; 0x04
    15f0:	3d 81       	ldd	r19, Y+5	; 0x05
    15f2:	42 17       	cp	r20, r18
    15f4:	53 07       	cpc	r21, r19
    15f6:	7c f4       	brge	.+30     	; 0x1616 <fputc+0x4a>
    15f8:	e8 81       	ld	r30, Y
    15fa:	f9 81       	ldd	r31, Y+1	; 0x01
    15fc:	9f 01       	movw	r18, r30
    15fe:	2f 5f       	subi	r18, 0xFF	; 255
    1600:	3f 4f       	sbci	r19, 0xFF	; 255
    1602:	39 83       	std	Y+1, r19	; 0x01
    1604:	28 83       	st	Y, r18
    1606:	10 83       	st	Z, r17
    1608:	06 c0       	rjmp	.+12     	; 0x1616 <fputc+0x4a>
    160a:	e8 85       	ldd	r30, Y+8	; 0x08
    160c:	f9 85       	ldd	r31, Y+9	; 0x09
    160e:	81 2f       	mov	r24, r17
    1610:	19 95       	eicall
    1612:	89 2b       	or	r24, r25
    1614:	29 f7       	brne	.-54     	; 0x15e0 <fputc+0x14>
    1616:	2e 81       	ldd	r18, Y+6	; 0x06
    1618:	3f 81       	ldd	r19, Y+7	; 0x07
    161a:	2f 5f       	subi	r18, 0xFF	; 255
    161c:	3f 4f       	sbci	r19, 0xFF	; 255
    161e:	3f 83       	std	Y+7, r19	; 0x07
    1620:	2e 83       	std	Y+6, r18	; 0x06
    1622:	81 2f       	mov	r24, r17
    1624:	90 2f       	mov	r25, r16
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	1f 91       	pop	r17
    162c:	0f 91       	pop	r16
    162e:	08 95       	ret

00001630 <__ultoa_invert>:
    1630:	fa 01       	movw	r30, r20
    1632:	aa 27       	eor	r26, r26
    1634:	28 30       	cpi	r18, 0x08	; 8
    1636:	51 f1       	breq	.+84     	; 0x168c <__ultoa_invert+0x5c>
    1638:	20 31       	cpi	r18, 0x10	; 16
    163a:	81 f1       	breq	.+96     	; 0x169c <__ultoa_invert+0x6c>
    163c:	e8 94       	clt
    163e:	6f 93       	push	r22
    1640:	6e 7f       	andi	r22, 0xFE	; 254
    1642:	6e 5f       	subi	r22, 0xFE	; 254
    1644:	7f 4f       	sbci	r23, 0xFF	; 255
    1646:	8f 4f       	sbci	r24, 0xFF	; 255
    1648:	9f 4f       	sbci	r25, 0xFF	; 255
    164a:	af 4f       	sbci	r26, 0xFF	; 255
    164c:	b1 e0       	ldi	r27, 0x01	; 1
    164e:	3e d0       	rcall	.+124    	; 0x16cc <__ultoa_invert+0x9c>
    1650:	b4 e0       	ldi	r27, 0x04	; 4
    1652:	3c d0       	rcall	.+120    	; 0x16cc <__ultoa_invert+0x9c>
    1654:	67 0f       	add	r22, r23
    1656:	78 1f       	adc	r23, r24
    1658:	89 1f       	adc	r24, r25
    165a:	9a 1f       	adc	r25, r26
    165c:	a1 1d       	adc	r26, r1
    165e:	68 0f       	add	r22, r24
    1660:	79 1f       	adc	r23, r25
    1662:	8a 1f       	adc	r24, r26
    1664:	91 1d       	adc	r25, r1
    1666:	a1 1d       	adc	r26, r1
    1668:	6a 0f       	add	r22, r26
    166a:	71 1d       	adc	r23, r1
    166c:	81 1d       	adc	r24, r1
    166e:	91 1d       	adc	r25, r1
    1670:	a1 1d       	adc	r26, r1
    1672:	20 d0       	rcall	.+64     	; 0x16b4 <__ultoa_invert+0x84>
    1674:	09 f4       	brne	.+2      	; 0x1678 <__ultoa_invert+0x48>
    1676:	68 94       	set
    1678:	3f 91       	pop	r19
    167a:	2a e0       	ldi	r18, 0x0A	; 10
    167c:	26 9f       	mul	r18, r22
    167e:	11 24       	eor	r1, r1
    1680:	30 19       	sub	r19, r0
    1682:	30 5d       	subi	r19, 0xD0	; 208
    1684:	31 93       	st	Z+, r19
    1686:	de f6       	brtc	.-74     	; 0x163e <__ultoa_invert+0xe>
    1688:	cf 01       	movw	r24, r30
    168a:	08 95       	ret
    168c:	46 2f       	mov	r20, r22
    168e:	47 70       	andi	r20, 0x07	; 7
    1690:	40 5d       	subi	r20, 0xD0	; 208
    1692:	41 93       	st	Z+, r20
    1694:	b3 e0       	ldi	r27, 0x03	; 3
    1696:	0f d0       	rcall	.+30     	; 0x16b6 <__ultoa_invert+0x86>
    1698:	c9 f7       	brne	.-14     	; 0x168c <__ultoa_invert+0x5c>
    169a:	f6 cf       	rjmp	.-20     	; 0x1688 <__ultoa_invert+0x58>
    169c:	46 2f       	mov	r20, r22
    169e:	4f 70       	andi	r20, 0x0F	; 15
    16a0:	40 5d       	subi	r20, 0xD0	; 208
    16a2:	4a 33       	cpi	r20, 0x3A	; 58
    16a4:	18 f0       	brcs	.+6      	; 0x16ac <__ultoa_invert+0x7c>
    16a6:	49 5d       	subi	r20, 0xD9	; 217
    16a8:	31 fd       	sbrc	r19, 1
    16aa:	40 52       	subi	r20, 0x20	; 32
    16ac:	41 93       	st	Z+, r20
    16ae:	02 d0       	rcall	.+4      	; 0x16b4 <__ultoa_invert+0x84>
    16b0:	a9 f7       	brne	.-22     	; 0x169c <__ultoa_invert+0x6c>
    16b2:	ea cf       	rjmp	.-44     	; 0x1688 <__ultoa_invert+0x58>
    16b4:	b4 e0       	ldi	r27, 0x04	; 4
    16b6:	a6 95       	lsr	r26
    16b8:	97 95       	ror	r25
    16ba:	87 95       	ror	r24
    16bc:	77 95       	ror	r23
    16be:	67 95       	ror	r22
    16c0:	ba 95       	dec	r27
    16c2:	c9 f7       	brne	.-14     	; 0x16b6 <__ultoa_invert+0x86>
    16c4:	00 97       	sbiw	r24, 0x00	; 0
    16c6:	61 05       	cpc	r22, r1
    16c8:	71 05       	cpc	r23, r1
    16ca:	08 95       	ret
    16cc:	9b 01       	movw	r18, r22
    16ce:	ac 01       	movw	r20, r24
    16d0:	0a 2e       	mov	r0, r26
    16d2:	06 94       	lsr	r0
    16d4:	57 95       	ror	r21
    16d6:	47 95       	ror	r20
    16d8:	37 95       	ror	r19
    16da:	27 95       	ror	r18
    16dc:	ba 95       	dec	r27
    16de:	c9 f7       	brne	.-14     	; 0x16d2 <__ultoa_invert+0xa2>
    16e0:	62 0f       	add	r22, r18
    16e2:	73 1f       	adc	r23, r19
    16e4:	84 1f       	adc	r24, r20
    16e6:	95 1f       	adc	r25, r21
    16e8:	a0 1d       	adc	r26, r0
    16ea:	08 95       	ret

000016ec <_exit>:
    16ec:	f8 94       	cli

000016ee <__stop_program>:
    16ee:	ff cf       	rjmp	.-2      	; 0x16ee <__stop_program>
