
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000fe  00800100  00001f28  00001fbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f28  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e8  008001fe  008001fe  000020ba  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000020ba  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000270  00000000  00000000  00002116  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002ca0  00000000  00000000  00002386  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001060  00000000  00000000  00005026  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f8f  00000000  00000000  00006086  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000798  00000000  00000000  00007018  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007ab  00000000  00000000  000077b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001a37  00000000  00000000  00007f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000248  00000000  00000000  00009992  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <menuInit+0x112>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	11 e0       	ldi	r17, 0x01	; 1
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e8 e2       	ldi	r30, 0x28	; 40
     37c:	ff e1       	ldi	r31, 0x1F	; 31
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ae 3f       	cpi	r26, 0xFE	; 254
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	ae ef       	ldi	r26, 0xFE	; 254
     38e:	b1 e0       	ldi	r27, 0x01	; 1
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a6 3e       	cpi	r26, 0xE6	; 230
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 b8 06 	call	0xd70	; 0xd70 <main>
     39e:	0c 94 92 0f 	jmp	0x1f24	; 0x1f24 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <adc>:

// ADC read from channel
int adc(int channel){	
	char selectedAxis;
	// Swicth-case depending on MUX channel 	
	switch (channel)
     3a6:	83 30       	cpi	r24, 0x03	; 3
     3a8:	91 05       	cpc	r25, r1
     3aa:	39 f0       	breq	.+14     	; 0x3ba <adc+0x14>
     3ac:	84 30       	cpi	r24, 0x04	; 4
     3ae:	91 05       	cpc	r25, r1
     3b0:	31 f0       	breq	.+12     	; 0x3be <adc+0x18>
     3b2:	02 97       	sbiw	r24, 0x02	; 2
     3b4:	31 f0       	breq	.+12     	; 0x3c2 <adc+0x1c>
	{
		case 1:
		selectedAxis = 0b00000100;
     3b6:	84 e0       	ldi	r24, 0x04	; 4
     3b8:	05 c0       	rjmp	.+10     	; 0x3c4 <adc+0x1e>
		case 2:
		selectedAxis = 0b00000101;
		break;
		
		case 3:
		selectedAxis = 0b00000110;
     3ba:	86 e0       	ldi	r24, 0x06	; 6
		break;
     3bc:	03 c0       	rjmp	.+6      	; 0x3c4 <adc+0x1e>
		
		case 4:
		selectedAxis = 0b00000111;
     3be:	87 e0       	ldi	r24, 0x07	; 7
		break;
     3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <adc+0x1e>
		case 1:
		selectedAxis = 0b00000100;
		break;
		
		case 2:
		selectedAxis = 0b00000101;
     3c2:	85 e0       	ldi	r24, 0x05	; 5
		default:
		selectedAxis = 0b00000100;
		break;
	}
	
	*adcPointer = selectedAxis;
     3c4:	e0 91 06 01 	lds	r30, 0x0106
     3c8:	f0 91 07 01 	lds	r31, 0x0107
     3cc:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ce:	8f ef       	ldi	r24, 0xFF	; 255
     3d0:	9f e2       	ldi	r25, 0x2F	; 47
     3d2:	01 97       	sbiw	r24, 0x01	; 1
     3d4:	f1 f7       	brne	.-4      	; 0x3d2 <adc+0x2c>
     3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <adc+0x32>
     3d8:	00 00       	nop
	
	_delay_ms(10);
	
	return adcPointer[0];
     3da:	e0 91 06 01 	lds	r30, 0x0106
     3de:	f0 91 07 01 	lds	r31, 0x0107
     3e2:	80 81       	ld	r24, Z
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	08 95       	ret

000003e8 <CAN_setMode>:
	//CAN_setMode(MODE_LOOPBACK);
	CAN_setMode(MODE_NORMAL);
}

void CAN_setMode(char mode){
	MCP_bitMod(MCP_CANCTRL,MODE_MASK,mode);
     3e8:	48 2f       	mov	r20, r24
     3ea:	60 ee       	ldi	r22, 0xE0	; 224
     3ec:	8f e0       	ldi	r24, 0x0F	; 15
     3ee:	0e 94 ab 03 	call	0x756	; 0x756 <MCP_bitMod>
     3f2:	08 95       	ret

000003f4 <CAN_init>:
#include "MCP2515.h"
#include <string.h>
#include <util/delay.h>

void CAN_init(){
	MCP_init();
     3f4:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <MCP_init>
	//CAN_setMode(MODE_LOOPBACK);
	CAN_setMode(MODE_NORMAL);
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <CAN_setMode>
     3fe:	08 95       	ret

00000400 <CAN_sendMessage>:

void CAN_setMode(char mode){
	MCP_bitMod(MCP_CANCTRL,MODE_MASK,mode);
}

void CAN_sendMessage(CAN_message * newMessage){
     400:	ef 92       	push	r14
     402:	ff 92       	push	r15
     404:	0f 93       	push	r16
     406:	1f 93       	push	r17
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
     40c:	7c 01       	movw	r14, r24
	MCP_write(MCP_TXB0SIDL, (newMessage->id << 5));
     40e:	fc 01       	movw	r30, r24
     410:	60 81       	ld	r22, Z
     412:	62 95       	swap	r22
     414:	66 0f       	add	r22, r22
     416:	60 7e       	andi	r22, 0xE0	; 224
     418:	82 e3       	ldi	r24, 0x32	; 50
     41a:	0e 94 87 03 	call	0x70e	; 0x70e <MCP_write>
	MCP_write(MCP_TXB0SIDH, (newMessage->id >> 3));
     41e:	f7 01       	movw	r30, r14
     420:	60 81       	ld	r22, Z
     422:	66 95       	lsr	r22
     424:	66 95       	lsr	r22
     426:	66 95       	lsr	r22
     428:	81 e3       	ldi	r24, 0x31	; 49
     42a:	0e 94 87 03 	call	0x70e	; 0x70e <MCP_write>
	MCP_write(MCP_TXB0DLC, newMessage->length);
     42e:	f7 01       	movw	r30, r14
     430:	61 81       	ldd	r22, Z+1	; 0x01
     432:	85 e3       	ldi	r24, 0x35	; 53
     434:	0e 94 87 03 	call	0x70e	; 0x70e <MCP_write>
	
	for(int i=0; i<newMessage->length; i++){
     438:	f7 01       	movw	r30, r14
     43a:	81 81       	ldd	r24, Z+1	; 0x01
     43c:	88 23       	and	r24, r24
     43e:	99 f0       	breq	.+38     	; 0x466 <CAN_sendMessage+0x66>
     440:	87 01       	movw	r16, r14
     442:	0e 5f       	subi	r16, 0xFE	; 254
     444:	1f 4f       	sbci	r17, 0xFF	; 255
     446:	c0 e0       	ldi	r28, 0x00	; 0
     448:	d0 e0       	ldi	r29, 0x00	; 0
		MCP_write(MCP_TXB0D0 + i, newMessage->data[i]);
     44a:	f8 01       	movw	r30, r16
     44c:	61 91       	ld	r22, Z+
     44e:	8f 01       	movw	r16, r30
     450:	8c 2f       	mov	r24, r28
     452:	8a 5c       	subi	r24, 0xCA	; 202
     454:	0e 94 87 03 	call	0x70e	; 0x70e <MCP_write>
void CAN_sendMessage(CAN_message * newMessage){
	MCP_write(MCP_TXB0SIDL, (newMessage->id << 5));
	MCP_write(MCP_TXB0SIDH, (newMessage->id >> 3));
	MCP_write(MCP_TXB0DLC, newMessage->length);
	
	for(int i=0; i<newMessage->length; i++){
     458:	21 96       	adiw	r28, 0x01	; 1
     45a:	f7 01       	movw	r30, r14
     45c:	21 81       	ldd	r18, Z+1	; 0x01
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	c2 17       	cp	r28, r18
     462:	d3 07       	cpc	r29, r19
     464:	94 f3       	brlt	.-28     	; 0x44a <CAN_sendMessage+0x4a>
		MCP_write(MCP_TXB0D0 + i, newMessage->data[i]);
	}
	
	MCP_requestToSend(MCP_RTS_TX0);
     466:	81 e8       	ldi	r24, 0x81	; 129
     468:	0e 94 9d 03 	call	0x73a	; 0x73a <MCP_requestToSend>
}
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	0f 91       	pop	r16
     474:	ff 90       	pop	r15
     476:	ef 90       	pop	r14
     478:	08 95       	ret

0000047a <CAN_recieve>:

void CAN_recieve(CAN_message * newReceivedMessage){		
     47a:	1f 93       	push	r17
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	ec 01       	movw	r28, r24
	if(MCP_read(MCP_CANINTF), MCP_RX0IF){
     482:	8c e2       	ldi	r24, 0x2C	; 44
     484:	0e 94 73 03 	call	0x6e6	; 0x6e6 <MCP_read>
     488:	8f ef       	ldi	r24, 0xFF	; 255
     48a:	9f e2       	ldi	r25, 0x2F	; 47
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <CAN_recieve+0x12>
     490:	00 c0       	rjmp	.+0      	; 0x492 <CAN_recieve+0x18>
     492:	00 00       	nop
		_delay_ms(10);
		newReceivedMessage->id = (MCP_read(MCP_RXB0SIDH) << 3) | (MCP_read(MCP_RXB0SIDL) >> 5);
     494:	81 e6       	ldi	r24, 0x61	; 97
     496:	0e 94 73 03 	call	0x6e6	; 0x6e6 <MCP_read>
     49a:	18 2f       	mov	r17, r24
     49c:	82 e6       	ldi	r24, 0x62	; 98
     49e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <MCP_read>
     4a2:	11 0f       	add	r17, r17
     4a4:	11 0f       	add	r17, r17
     4a6:	11 0f       	add	r17, r17
     4a8:	82 95       	swap	r24
     4aa:	86 95       	lsr	r24
     4ac:	87 70       	andi	r24, 0x07	; 7
     4ae:	18 2b       	or	r17, r24
     4b0:	18 83       	st	Y, r17
		newReceivedMessage->length = MCP_read(MCP_RXB0DLC) & 0x0F;
     4b2:	85 e6       	ldi	r24, 0x65	; 101
     4b4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <MCP_read>
     4b8:	8f 70       	andi	r24, 0x0F	; 15
     4ba:	89 83       	std	Y+1, r24	; 0x01
		for(uint8_t i=0; i<newReceivedMessage->length; i++){
     4bc:	88 23       	and	r24, r24
     4be:	69 f0       	breq	.+26     	; 0x4da <CAN_recieve+0x60>
     4c0:	10 e0       	ldi	r17, 0x00	; 0
			newReceivedMessage->data[i] = MCP_read(MCP_RXB0D0 + i);
     4c2:	86 e6       	ldi	r24, 0x66	; 102
     4c4:	81 0f       	add	r24, r17
     4c6:	0e 94 73 03 	call	0x6e6	; 0x6e6 <MCP_read>
     4ca:	fe 01       	movw	r30, r28
     4cc:	e1 0f       	add	r30, r17
     4ce:	f1 1d       	adc	r31, r1
     4d0:	82 83       	std	Z+2, r24	; 0x02
void CAN_recieve(CAN_message * newReceivedMessage){		
	if(MCP_read(MCP_CANINTF), MCP_RX0IF){
		_delay_ms(10);
		newReceivedMessage->id = (MCP_read(MCP_RXB0SIDH) << 3) | (MCP_read(MCP_RXB0SIDL) >> 5);
		newReceivedMessage->length = MCP_read(MCP_RXB0DLC) & 0x0F;
		for(uint8_t i=0; i<newReceivedMessage->length; i++){
     4d2:	1f 5f       	subi	r17, 0xFF	; 255
     4d4:	89 81       	ldd	r24, Y+1	; 0x01
     4d6:	18 17       	cp	r17, r24
     4d8:	a0 f3       	brcs	.-24     	; 0x4c2 <CAN_recieve+0x48>
			newReceivedMessage->data[i] = MCP_read(MCP_RXB0D0 + i);
		}
		MCP_bitMod(MCP_CANINTF, MCP_RX0IF, 0);
     4da:	40 e0       	ldi	r20, 0x00	; 0
     4dc:	61 e0       	ldi	r22, 0x01	; 1
     4de:	8c e2       	ldi	r24, 0x2C	; 44
     4e0:	0e 94 ab 03 	call	0x756	; 0x756 <MCP_bitMod>
	}
}
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	1f 91       	pop	r17
     4ea:	08 95       	ret

000004ec <reMap>:

	return 0;
}

// Remapping input to new scale with range from min to max
int reMap(float input, float minVal, float maxVal, float scale){
     4ec:	4f 92       	push	r4
     4ee:	5f 92       	push	r5
     4f0:	6f 92       	push	r6
     4f2:	7f 92       	push	r7
     4f4:	af 92       	push	r10
     4f6:	bf 92       	push	r11
     4f8:	cf 92       	push	r12
     4fa:	df 92       	push	r13
     4fc:	ef 92       	push	r14
     4fe:	ff 92       	push	r15
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	00 d0       	rcall	.+0      	; 0x50a <__stack+0xb>
     50a:	00 d0       	rcall	.+0      	; 0x50c <__stack+0xd>
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
     510:	69 83       	std	Y+1, r22	; 0x01
     512:	7a 83       	std	Y+2, r23	; 0x02
     514:	8b 83       	std	Y+3, r24	; 0x03
     516:	9c 83       	std	Y+4, r25	; 0x04
     518:	c8 01       	movw	r24, r16
     51a:	b7 01       	movw	r22, r14

	// find range of input
	float range = maxVal - minVal;
     51c:	0e 94 b6 08 	call	0x116c	; 0x116c <__subsf3>
     520:	2b 01       	movw	r4, r22
     522:	3c 01       	movw	r6, r24

	if(range == 0) // cannot divide zero
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	a9 01       	movw	r20, r18
     52a:	0e 94 1b 09 	call	0x1236	; 0x1236 <__cmpsf2>
     52e:	81 11       	cpse	r24, r1
     530:	0c c0       	rjmp	.+24     	; 0x54a <__stack+0x4b>
		return scale/2; // return middle position
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	40 e0       	ldi	r20, 0x00	; 0
     538:	5f e3       	ldi	r21, 0x3F	; 63
     53a:	c6 01       	movw	r24, r12
     53c:	b5 01       	movw	r22, r10
     53e:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__mulsf3>
     542:	0e 94 87 09 	call	0x130e	; 0x130e <__fixsfsi>
     546:	cb 01       	movw	r24, r22
     548:	25 c0       	rjmp	.+74     	; 0x594 <__stack+0x95>
	
	else {
		int result = scale / range * input;
     54a:	a3 01       	movw	r20, r6
     54c:	92 01       	movw	r18, r4
     54e:	c6 01       	movw	r24, r12
     550:	b5 01       	movw	r22, r10
     552:	0e 94 1f 09 	call	0x123e	; 0x123e <__divsf3>
     556:	29 81       	ldd	r18, Y+1	; 0x01
     558:	3a 81       	ldd	r19, Y+2	; 0x02
     55a:	4b 81       	ldd	r20, Y+3	; 0x03
     55c:	5c 81       	ldd	r21, Y+4	; 0x04
     55e:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__mulsf3>
     562:	0e 94 87 09 	call	0x130e	; 0x130e <__fixsfsi>
     566:	2b 01       	movw	r4, r22
     568:	3c 01       	movw	r6, r24

		if(result > scale)
     56a:	88 27       	eor	r24, r24
     56c:	77 fd       	sbrc	r23, 7
     56e:	80 95       	com	r24
     570:	98 2f       	mov	r25, r24
     572:	0e 94 ba 09 	call	0x1374	; 0x1374 <__floatsisf>
     576:	9b 01       	movw	r18, r22
     578:	ac 01       	movw	r20, r24
     57a:	c6 01       	movw	r24, r12
     57c:	b5 01       	movw	r22, r10
     57e:	0e 94 1b 09 	call	0x1236	; 0x1236 <__cmpsf2>
     582:	88 23       	and	r24, r24
     584:	34 f4       	brge	.+12     	; 0x592 <__stack+0x93>
			return scale; // cap max output value
     586:	c6 01       	movw	r24, r12
     588:	b5 01       	movw	r22, r10
     58a:	0e 94 87 09 	call	0x130e	; 0x130e <__fixsfsi>
     58e:	cb 01       	movw	r24, r22
     590:	01 c0       	rjmp	.+2      	; 0x594 <__stack+0x95>
		else
			return result; // return remapped value
     592:	c2 01       	movw	r24, r4
	}
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	1f 91       	pop	r17
     5a2:	0f 91       	pop	r16
     5a4:	ff 90       	pop	r15
     5a6:	ef 90       	pop	r14
     5a8:	df 90       	pop	r13
     5aa:	cf 90       	pop	r12
     5ac:	bf 90       	pop	r11
     5ae:	af 90       	pop	r10
     5b0:	7f 90       	pop	r7
     5b2:	6f 90       	pop	r6
     5b4:	5f 90       	pop	r5
     5b6:	4f 90       	pop	r4
     5b8:	08 95       	ret

000005ba <getControlOutput>:
#include <stdio.h>
#include "joystick.h"


// Read, remap and auto adjust analog input
int getControlOutput(int channel, int newScale, int deadzone, int *minVal, int *maxVal){
     5ba:	2f 92       	push	r2
     5bc:	3f 92       	push	r3
     5be:	4f 92       	push	r4
     5c0:	5f 92       	push	r5
     5c2:	6f 92       	push	r6
     5c4:	7f 92       	push	r7
     5c6:	8f 92       	push	r8
     5c8:	9f 92       	push	r9
     5ca:	af 92       	push	r10
     5cc:	bf 92       	push	r11
     5ce:	cf 92       	push	r12
     5d0:	df 92       	push	r13
     5d2:	ef 92       	push	r14
     5d4:	ff 92       	push	r15
     5d6:	0f 93       	push	r16
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	00 d0       	rcall	.+0      	; 0x5e0 <getControlOutput+0x26>
     5e0:	00 d0       	rcall	.+0      	; 0x5e2 <getControlOutput+0x28>
     5e2:	00 d0       	rcall	.+0      	; 0x5e4 <getControlOutput+0x2a>
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
     5e8:	4b 01       	movw	r8, r22
     5ea:	1a 01       	movw	r2, r20
     5ec:	79 01       	movw	r14, r18

	int result = 0; // stores result
	int analogRead = 0; // stores value from adc
	int scale = newScale; // Scaling input to 0-100

	analogRead = adc(channel); // Reading input from ADC
     5ee:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <adc>
     5f2:	9e 83       	std	Y+6, r25	; 0x06
     5f4:	8d 83       	std	Y+5, r24	; 0x05
     5f6:	8f ef       	ldi	r24, 0xFF	; 255
     5f8:	9f e2       	ldi	r25, 0x2F	; 47
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <getControlOutput+0x40>
     5fe:	00 c0       	rjmp	.+0      	; 0x600 <getControlOutput+0x46>
     600:	00 00       	nop
	_delay_ms(10);

	// Auto adjusting range of input
	if(analogRead < *minVal)
     602:	f7 01       	movw	r30, r14
     604:	80 81       	ld	r24, Z
     606:	91 81       	ldd	r25, Z+1	; 0x01
     608:	2d 81       	ldd	r18, Y+5	; 0x05
     60a:	3e 81       	ldd	r19, Y+6	; 0x06
     60c:	28 17       	cp	r18, r24
     60e:	39 07       	cpc	r19, r25
     610:	14 f4       	brge	.+4      	; 0x616 <getControlOutput+0x5c>
		*minVal = analogRead;
     612:	31 83       	std	Z+1, r19	; 0x01
     614:	20 83       	st	Z, r18
	if(analogRead > *maxVal)
     616:	f8 01       	movw	r30, r16
     618:	80 81       	ld	r24, Z
     61a:	91 81       	ldd	r25, Z+1	; 0x01
     61c:	2d 81       	ldd	r18, Y+5	; 0x05
     61e:	3e 81       	ldd	r19, Y+6	; 0x06
     620:	82 17       	cp	r24, r18
     622:	93 07       	cpc	r25, r19
     624:	14 f4       	brge	.+4      	; 0x62a <getControlOutput+0x70>
		*maxVal = analogRead;
     626:	31 83       	std	Z+1, r19	; 0x01
     628:	20 83       	st	Z, r18

	// Remapping input from ADC to new scale
	result = reMap(analogRead, *minVal, *maxVal, scale);
     62a:	b4 01       	movw	r22, r8
     62c:	88 27       	eor	r24, r24
     62e:	77 fd       	sbrc	r23, 7
     630:	80 95       	com	r24
     632:	98 2f       	mov	r25, r24
     634:	0e 94 ba 09 	call	0x1374	; 0x1374 <__floatsisf>
     638:	5b 01       	movw	r10, r22
     63a:	6c 01       	movw	r12, r24
     63c:	f8 01       	movw	r30, r16
     63e:	60 81       	ld	r22, Z
     640:	71 81       	ldd	r23, Z+1	; 0x01
     642:	88 27       	eor	r24, r24
     644:	77 fd       	sbrc	r23, 7
     646:	80 95       	com	r24
     648:	98 2f       	mov	r25, r24
     64a:	0e 94 ba 09 	call	0x1374	; 0x1374 <__floatsisf>
     64e:	2b 01       	movw	r4, r22
     650:	3c 01       	movw	r6, r24
     652:	f7 01       	movw	r30, r14
     654:	60 81       	ld	r22, Z
     656:	71 81       	ldd	r23, Z+1	; 0x01
     658:	88 27       	eor	r24, r24
     65a:	77 fd       	sbrc	r23, 7
     65c:	80 95       	com	r24
     65e:	98 2f       	mov	r25, r24
     660:	0e 94 ba 09 	call	0x1374	; 0x1374 <__floatsisf>
     664:	69 83       	std	Y+1, r22	; 0x01
     666:	7a 83       	std	Y+2, r23	; 0x02
     668:	8b 83       	std	Y+3, r24	; 0x03
     66a:	9c 83       	std	Y+4, r25	; 0x04
     66c:	2d 81       	ldd	r18, Y+5	; 0x05
     66e:	3e 81       	ldd	r19, Y+6	; 0x06
     670:	b9 01       	movw	r22, r18
     672:	88 27       	eor	r24, r24
     674:	77 fd       	sbrc	r23, 7
     676:	80 95       	com	r24
     678:	98 2f       	mov	r25, r24
     67a:	0e 94 ba 09 	call	0x1374	; 0x1374 <__floatsisf>
     67e:	83 01       	movw	r16, r6
     680:	72 01       	movw	r14, r4
     682:	29 81       	ldd	r18, Y+1	; 0x01
     684:	3a 81       	ldd	r19, Y+2	; 0x02
     686:	4b 81       	ldd	r20, Y+3	; 0x03
     688:	5c 81       	ldd	r21, Y+4	; 0x04
     68a:	0e 94 76 02 	call	0x4ec	; 0x4ec <reMap>

	// deadzone
	if(result > scale/2 - deadzone && result < scale/2 + deadzone)
     68e:	94 01       	movw	r18, r8
     690:	99 20       	and	r9, r9
     692:	14 f4       	brge	.+4      	; 0x698 <getControlOutput+0xde>
     694:	2f 5f       	subi	r18, 0xFF	; 255
     696:	3f 4f       	sbci	r19, 0xFF	; 255
     698:	35 95       	asr	r19
     69a:	27 95       	ror	r18
     69c:	a9 01       	movw	r20, r18
     69e:	42 19       	sub	r20, r2
     6a0:	53 09       	sbc	r21, r3
     6a2:	48 17       	cp	r20, r24
     6a4:	59 07       	cpc	r21, r25
     6a6:	34 f4       	brge	.+12     	; 0x6b4 <getControlOutput+0xfa>
     6a8:	22 0e       	add	r2, r18
     6aa:	33 1e       	adc	r3, r19
     6ac:	82 15       	cp	r24, r2
     6ae:	93 05       	cpc	r25, r3
     6b0:	0c f4       	brge	.+2      	; 0x6b4 <getControlOutput+0xfa>
		result = scale/2;
     6b2:	c9 01       	movw	r24, r18

	return result;
}
     6b4:	26 96       	adiw	r28, 0x06	; 6
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	f8 94       	cli
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	cd bf       	out	0x3d, r28	; 61
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	ff 90       	pop	r15
     6ca:	ef 90       	pop	r14
     6cc:	df 90       	pop	r13
     6ce:	cf 90       	pop	r12
     6d0:	bf 90       	pop	r11
     6d2:	af 90       	pop	r10
     6d4:	9f 90       	pop	r9
     6d6:	8f 90       	pop	r8
     6d8:	7f 90       	pop	r7
     6da:	6f 90       	pop	r6
     6dc:	5f 90       	pop	r5
     6de:	4f 90       	pop	r4
     6e0:	3f 90       	pop	r3
     6e2:	2f 90       	pop	r2
     6e4:	08 95       	ret

000006e6 <MCP_read>:
void MCP_init(){
	SPI_init();
	MCP_reset();
}

char MCP_read(char adr){
     6e6:	cf 93       	push	r28
     6e8:	c8 2f       	mov	r28, r24
	SPI_slaveEnable(1); //enable CS pin	
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	0e 94 93 08 	call	0x1126	; 0x1126 <SPI_slaveEnable>
	SPI_write(MCP_READ); //set read instruction
     6f0:	83 e0       	ldi	r24, 0x03	; 3
     6f2:	0e 94 8a 08 	call	0x1114	; 0x1114 <SPI_write>
	SPI_write(adr); //set address
     6f6:	8c 2f       	mov	r24, r28
     6f8:	0e 94 8a 08 	call	0x1114	; 0x1114 <SPI_write>
	uint8_t temp = SPI_read(); //read from address	
     6fc:	0e 94 8e 08 	call	0x111c	; 0x111c <SPI_read>
     700:	c8 2f       	mov	r28, r24
	SPI_slaveEnable(0); //disable CS pin		
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	0e 94 93 08 	call	0x1126	; 0x1126 <SPI_slaveEnable>
	return temp;
}
     708:	8c 2f       	mov	r24, r28
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret

0000070e <MCP_write>:

void MCP_write(char adr, char data){
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	d8 2f       	mov	r29, r24
     714:	c6 2f       	mov	r28, r22
	SPI_slaveEnable(1); //enable CS pin	
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	0e 94 93 08 	call	0x1126	; 0x1126 <SPI_slaveEnable>
	SPI_write(MCP_WRITE); //set write instruction
     71c:	82 e0       	ldi	r24, 0x02	; 2
     71e:	0e 94 8a 08 	call	0x1114	; 0x1114 <SPI_write>
	SPI_write(adr); //set address
     722:	8d 2f       	mov	r24, r29
     724:	0e 94 8a 08 	call	0x1114	; 0x1114 <SPI_write>
	SPI_write(data); //write data	
     728:	8c 2f       	mov	r24, r28
     72a:	0e 94 8a 08 	call	0x1114	; 0x1114 <SPI_write>
	SPI_slaveEnable(0); //disable CS pin
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	0e 94 93 08 	call	0x1126	; 0x1126 <SPI_slaveEnable>
}
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	08 95       	ret

0000073a <MCP_requestToSend>:

void MCP_requestToSend(char txBuffer){
     73a:	cf 93       	push	r28
     73c:	c8 2f       	mov	r28, r24
	SPI_slaveEnable(1); //enable CS pin	
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	0e 94 93 08 	call	0x1126	; 0x1126 <SPI_slaveEnable>
	SPI_write(MCP_RTS_TX0 | txBuffer); //request-to-send	
     744:	8c 2f       	mov	r24, r28
     746:	81 68       	ori	r24, 0x81	; 129
     748:	0e 94 8a 08 	call	0x1114	; 0x1114 <SPI_write>
	SPI_slaveEnable(0); //disable CS pin
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	0e 94 93 08 	call	0x1126	; 0x1126 <SPI_slaveEnable>
}
     752:	cf 91       	pop	r28
     754:	08 95       	ret

00000756 <MCP_bitMod>:
	char temp = SPI_read();
	SPI_slaveEnable(0); //disable CS pin
	return temp;
}

void MCP_bitMod(char adr, char mask, char data){
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	18 2f       	mov	r17, r24
     75e:	d6 2f       	mov	r29, r22
     760:	c4 2f       	mov	r28, r20
	SPI_slaveEnable(1); //enable CS pin	
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	0e 94 93 08 	call	0x1126	; 0x1126 <SPI_slaveEnable>
	SPI_write(MCP_BITMOD); //bit modify instruction
     768:	85 e0       	ldi	r24, 0x05	; 5
     76a:	0e 94 8a 08 	call	0x1114	; 0x1114 <SPI_write>
	SPI_write(adr); //set address
     76e:	81 2f       	mov	r24, r17
     770:	0e 94 8a 08 	call	0x1114	; 0x1114 <SPI_write>
	SPI_write(mask); //set bitmask
     774:	8d 2f       	mov	r24, r29
     776:	0e 94 8a 08 	call	0x1114	; 0x1114 <SPI_write>
	SPI_write(data); //write data	
     77a:	8c 2f       	mov	r24, r28
     77c:	0e 94 8a 08 	call	0x1114	; 0x1114 <SPI_write>
	SPI_slaveEnable(0); //disable CS pin
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	0e 94 93 08 	call	0x1126	; 0x1126 <SPI_slaveEnable>
}
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	1f 91       	pop	r17
     78c:	08 95       	ret

0000078e <MCP_reset>:

void MCP_reset(){
	SPI_slaveEnable(1); //enable CS pin	
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	0e 94 93 08 	call	0x1126	; 0x1126 <SPI_slaveEnable>
	SPI_write(MCP_RESET); //reset instruction	
     794:	80 ec       	ldi	r24, 0xC0	; 192
     796:	0e 94 8a 08 	call	0x1114	; 0x1114 <SPI_write>
	SPI_slaveEnable(0); //disable CS pin
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	0e 94 93 08 	call	0x1126	; 0x1126 <SPI_slaveEnable>
     7a0:	08 95       	ret

000007a2 <MCP_init>:
#include <avr/io.h>
#include "MCP2515.h"
#include "SPI.h"

void MCP_init(){
	SPI_init();
     7a2:	0e 94 83 08 	call	0x1106	; 0x1106 <SPI_init>
	MCP_reset();
     7a6:	0e 94 c7 03 	call	0x78e	; 0x78e <MCP_reset>
     7aa:	08 95       	ret

000007ac <highScore>:
			OLED_ClearScreen();
		}*/
		_delay_ms(10);
	}
}
void highScore(){
     7ac:	08 95       	ret

000007ae <soundSetting>:
	//printf("highscore\n");
}
void soundSetting(){
	//printf("Sound toggle\n");
	sound.title = "Sound on";
     7ae:	8c e2       	ldi	r24, 0x2C	; 44
     7b0:	91 e0       	ldi	r25, 0x01	; 1
     7b2:	90 93 1b 02 	sts	0x021B, r25
     7b6:	80 93 1a 02 	sts	0x021A, r24
     7ba:	08 95       	ret

000007bc <aboutGame>:
}
void aboutGame(){
     7bc:	08 95       	ret

000007be <calibrationDummy>:
	//printf("about\n");
}
void calibrationDummy(){
     7be:	08 95       	ret

000007c0 <newGame>:
	OLED_ClearCol();
	OLED_Pos(currentPos + offset, 1);
	OLED_Print(" >");
}

void newGame(){
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	cd b7       	in	r28, 0x3d	; 61
     7c6:	de b7       	in	r29, 0x3e	; 62
     7c8:	c4 58       	subi	r28, 0x84	; 132
     7ca:	d1 09       	sbc	r29, r1
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	f8 94       	cli
     7d0:	de bf       	out	0x3e, r29	; 62
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	cd bf       	out	0x3d, r28	; 61
	//printf("New game\n");
	OLED_ClearScreen();
     7d6:	0e 94 d6 07 	call	0xfac	; 0xfac <OLED_ClearScreen>
	
	OLED_Pos(0,0);
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	0e 94 9b 07 	call	0xf36	; 0xf36 <OLED_Pos>
	OLED_Print("Game started!");
     7e6:	85 e3       	ldi	r24, 0x35	; 53
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	0e 94 4e 07 	call	0xe9c	; 0xe9c <OLED_Print>
	
	int maxMinValues[8] = {0,255,0,255,0,255,0,255}; // input ranges - max/min	
     7ee:	80 e1       	ldi	r24, 0x10	; 16
     7f0:	ec e1       	ldi	r30, 0x1C	; 28
     7f2:	f1 e0       	ldi	r31, 0x01	; 1
     7f4:	de 01       	movw	r26, r28
     7f6:	11 96       	adiw	r26, 0x01	; 1
     7f8:	01 90       	ld	r0, Z+
     7fa:	0d 92       	st	X+, r0
     7fc:	8a 95       	dec	r24
     7fe:	e1 f7       	brne	.-8      	; 0x7f8 <newGame+0x38>
	uint8_t joystickValueX = getControlOutput(1,100,5, &maxMinValues[0], &maxMinValues[1]);
     800:	8e 01       	movw	r16, r28
     802:	0d 5f       	subi	r16, 0xFD	; 253
     804:	1f 4f       	sbci	r17, 0xFF	; 255
     806:	9e 01       	movw	r18, r28
     808:	2f 5f       	subi	r18, 0xFF	; 255
     80a:	3f 4f       	sbci	r19, 0xFF	; 255
     80c:	45 e0       	ldi	r20, 0x05	; 5
     80e:	50 e0       	ldi	r21, 0x00	; 0
     810:	64 e6       	ldi	r22, 0x64	; 100
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 dd 02 	call	0x5ba	; 0x5ba <getControlOutput>
	uint8_t joystickValueY = getControlOutput(2,100,5, &maxMinValues[2], &maxMinValues[3]);
     81c:	0c 5f       	subi	r16, 0xFC	; 252
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	9e 01       	movw	r18, r28
     822:	2b 5f       	subi	r18, 0xFB	; 251
     824:	3f 4f       	sbci	r19, 0xFF	; 255
     826:	45 e0       	ldi	r20, 0x05	; 5
     828:	50 e0       	ldi	r21, 0x00	; 0
     82a:	64 e6       	ldi	r22, 0x64	; 100
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	82 e0       	ldi	r24, 0x02	; 2
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	0e 94 dd 02 	call	0x5ba	; 0x5ba <getControlOutput>
	uint8_t sliderValueA = getControlOutput(3,100,5, &maxMinValues[4], &maxMinValues[5]);
     836:	0c 5f       	subi	r16, 0xFC	; 252
     838:	1f 4f       	sbci	r17, 0xFF	; 255
     83a:	9e 01       	movw	r18, r28
     83c:	27 5f       	subi	r18, 0xF7	; 247
     83e:	3f 4f       	sbci	r19, 0xFF	; 255
     840:	45 e0       	ldi	r20, 0x05	; 5
     842:	50 e0       	ldi	r21, 0x00	; 0
     844:	64 e6       	ldi	r22, 0x64	; 100
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	83 e0       	ldi	r24, 0x03	; 3
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <getControlOutput>
	uint8_t leftButtonPressed = 0x01 & PINB;
     850:	86 b3       	in	r24, 0x16	; 22
		char joyX[33], joyY[33], buffer[10], buffer2[10], scorebuffer[10];
		itoa(joystickValueX,joyX,10);
		itoa(joystickValueY,joyY,10);
		itoa(score,scorebuffer,10);
		
		strcpy(buffer, "X: ");
     852:	5e 01       	movw	r10, r28
     854:	8b e7       	ldi	r24, 0x7B	; 123
     856:	a8 0e       	add	r10, r24
     858:	b1 1c       	adc	r11, r1
     85a:	0f 2e       	mov	r0, r31
     85c:	f8 e5       	ldi	r31, 0x58	; 88
     85e:	cf 2e       	mov	r12, r31
     860:	fa e3       	ldi	r31, 0x3A	; 58
     862:	df 2e       	mov	r13, r31
     864:	f0 e2       	ldi	r31, 0x20	; 32
     866:	ef 2e       	mov	r14, r31
     868:	f1 2c       	mov	r15, r1
     86a:	f0 2d       	mov	r31, r0
	
	CAN_message message, receivedMessage;
	
	while(1){
		
		joystickValueX = getControlOutput(1,100,5, &maxMinValues[0], &maxMinValues[1]);
     86c:	8e 01       	movw	r16, r28
     86e:	0d 5f       	subi	r16, 0xFD	; 253
     870:	1f 4f       	sbci	r17, 0xFF	; 255
     872:	9e 01       	movw	r18, r28
     874:	2f 5f       	subi	r18, 0xFF	; 255
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	45 e0       	ldi	r20, 0x05	; 5
     87a:	50 e0       	ldi	r21, 0x00	; 0
     87c:	64 e6       	ldi	r22, 0x64	; 100
     87e:	70 e0       	ldi	r23, 0x00	; 0
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 dd 02 	call	0x5ba	; 0x5ba <getControlOutput>
     888:	88 2e       	mov	r8, r24
		joystickValueY = getControlOutput(2,100,5, &maxMinValues[2], &maxMinValues[3]);
     88a:	0c 5f       	subi	r16, 0xFC	; 252
     88c:	1f 4f       	sbci	r17, 0xFF	; 255
     88e:	9e 01       	movw	r18, r28
     890:	2b 5f       	subi	r18, 0xFB	; 251
     892:	3f 4f       	sbci	r19, 0xFF	; 255
     894:	45 e0       	ldi	r20, 0x05	; 5
     896:	50 e0       	ldi	r21, 0x00	; 0
     898:	64 e6       	ldi	r22, 0x64	; 100
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	82 e0       	ldi	r24, 0x02	; 2
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0e 94 dd 02 	call	0x5ba	; 0x5ba <getControlOutput>
     8a4:	98 2e       	mov	r9, r24
		sliderValueA = getControlOutput(3,100,5, &maxMinValues[4], &maxMinValues[5]);
     8a6:	0c 5f       	subi	r16, 0xFC	; 252
     8a8:	1f 4f       	sbci	r17, 0xFF	; 255
     8aa:	9e 01       	movw	r18, r28
     8ac:	27 5f       	subi	r18, 0xF7	; 247
     8ae:	3f 4f       	sbci	r19, 0xFF	; 255
     8b0:	45 e0       	ldi	r20, 0x05	; 5
     8b2:	50 e0       	ldi	r21, 0x00	; 0
     8b4:	64 e6       	ldi	r22, 0x64	; 100
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	83 e0       	ldi	r24, 0x03	; 3
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0e 94 dd 02 	call	0x5ba	; 0x5ba <getControlOutput>
     8c0:	18 2f       	mov	r17, r24
		leftButtonPressed = 0x01 & PINB;		
     8c2:	06 b3       	in	r16, 0x16	; 22
		
		CAN_recieve(&receivedMessage);
     8c4:	ce 01       	movw	r24, r28
     8c6:	4b 96       	adiw	r24, 0x1b	; 27
     8c8:	0e 94 3d 02 	call	0x47a	; 0x47a <CAN_recieve>
		score = receivedMessage.data[0]-1;
     8cc:	7d 8c       	ldd	r7, Y+29	; 0x1d
     8ce:	7a 94       	dec	r7
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     8d0:	4a e0       	ldi	r20, 0x0A	; 10
     8d2:	be 01       	movw	r22, r28
     8d4:	6a 5b       	subi	r22, 0xBA	; 186
     8d6:	7f 4f       	sbci	r23, 0xFF	; 255
     8d8:	88 2d       	mov	r24, r8
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__itoa_ncheck>
     8e0:	4a e0       	ldi	r20, 0x0A	; 10
     8e2:	be 01       	movw	r22, r28
     8e4:	6b 5d       	subi	r22, 0xDB	; 219
     8e6:	7f 4f       	sbci	r23, 0xFF	; 255
     8e8:	89 2d       	mov	r24, r9
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__itoa_ncheck>
     8f0:	4a e0       	ldi	r20, 0x0A	; 10
     8f2:	be 01       	movw	r22, r28
     8f4:	69 59       	subi	r22, 0x99	; 153
     8f6:	7f 4f       	sbci	r23, 0xFF	; 255
     8f8:	87 2d       	mov	r24, r7
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <__itoa_ncheck>
		char joyX[33], joyY[33], buffer[10], buffer2[10], scorebuffer[10];
		itoa(joystickValueX,joyX,10);
		itoa(joystickValueY,joyY,10);
		itoa(score,scorebuffer,10);
		
		strcpy(buffer, "X: ");
     900:	f5 01       	movw	r30, r10
     902:	c0 82       	st	Z, r12
     904:	d1 82       	std	Z+1, r13	; 0x01
     906:	e2 82       	std	Z+2, r14	; 0x02
     908:	f3 82       	std	Z+3, r15	; 0x03
		strcat(buffer, joyX);
     90a:	be 01       	movw	r22, r28
     90c:	6a 5b       	subi	r22, 0xBA	; 186
     90e:	7f 4f       	sbci	r23, 0xFF	; 255
     910:	c5 01       	movw	r24, r10
     912:	0e 94 cd 0a 	call	0x159a	; 0x159a <strcat>
		strcat(buffer, " Y: ");
     916:	d5 01       	movw	r26, r10
     918:	0d 90       	ld	r0, X+
     91a:	00 20       	and	r0, r0
     91c:	e9 f7       	brne	.-6      	; 0x918 <newGame+0x158>
     91e:	11 97       	sbiw	r26, 0x01	; 1
     920:	95 e0       	ldi	r25, 0x05	; 5
     922:	e3 e4       	ldi	r30, 0x43	; 67
     924:	f1 e0       	ldi	r31, 0x01	; 1
     926:	01 90       	ld	r0, Z+
     928:	0d 92       	st	X+, r0
     92a:	9a 95       	dec	r25
     92c:	e1 f7       	brne	.-8      	; 0x926 <newGame+0x166>
		strcat(buffer, joyY);
     92e:	be 01       	movw	r22, r28
     930:	6b 5d       	subi	r22, 0xDB	; 219
     932:	7f 4f       	sbci	r23, 0xFF	; 255
     934:	c5 01       	movw	r24, r10
     936:	0e 94 cd 0a 	call	0x159a	; 0x159a <strcat>
		strcpy(buffer2, "Score: ");
     93a:	98 e0       	ldi	r25, 0x08	; 8
     93c:	e8 e4       	ldi	r30, 0x48	; 72
     93e:	f1 e0       	ldi	r31, 0x01	; 1
     940:	de 01       	movw	r26, r28
     942:	af 58       	subi	r26, 0x8F	; 143
     944:	bf 4f       	sbci	r27, 0xFF	; 255
     946:	01 90       	ld	r0, Z+
     948:	0d 92       	st	X+, r0
     94a:	9a 95       	dec	r25
     94c:	e1 f7       	brne	.-8      	; 0x946 <newGame+0x186>
		strcat(buffer2, scorebuffer);		
     94e:	be 01       	movw	r22, r28
     950:	69 59       	subi	r22, 0x99	; 153
     952:	7f 4f       	sbci	r23, 0xFF	; 255
     954:	ce 01       	movw	r24, r28
     956:	8f 58       	subi	r24, 0x8F	; 143
     958:	9f 4f       	sbci	r25, 0xFF	; 255
     95a:	0e 94 cd 0a 	call	0x159a	; 0x159a <strcat>
		
		//OLED_Pos(1,3);
		//OLED_Print(buffer);
		
		OLED_Pos(2,3);
     95e:	63 e0       	ldi	r22, 0x03	; 3
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	82 e0       	ldi	r24, 0x02	; 2
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	0e 94 9b 07 	call	0xf36	; 0xf36 <OLED_Pos>
		OLED_Print(buffer2);
     96a:	ce 01       	movw	r24, r28
     96c:	8f 58       	subi	r24, 0x8F	; 143
     96e:	9f 4f       	sbci	r25, 0xFF	; 255
     970:	0e 94 4e 07 	call	0xe9c	; 0xe9c <OLED_Print>
		else
			OLED_Pos(7,(int)(13.0f/100.0f*joystickValueX));
		
		OLED_Print("===");
		*/
		message.id = 3;
     974:	83 e0       	ldi	r24, 0x03	; 3
     976:	89 8b       	std	Y+17, r24	; 0x11
		message.length = 4;
     978:	84 e0       	ldi	r24, 0x04	; 4
     97a:	8a 8b       	std	Y+18, r24	; 0x12
	
	CAN_message message, receivedMessage;
	
	while(1){
		
		joystickValueX = getControlOutput(1,100,5, &maxMinValues[0], &maxMinValues[1]);
     97c:	8b 8a       	std	Y+19, r8	; 0x13
		joystickValueY = getControlOutput(2,100,5, &maxMinValues[2], &maxMinValues[3]);
     97e:	9c 8a       	std	Y+20, r9	; 0x14
		sliderValueA = getControlOutput(3,100,5, &maxMinValues[4], &maxMinValues[5]);
		leftButtonPressed = 0x01 & PINB;		
     980:	01 70       	andi	r16, 0x01	; 1
		message.id = 3;
		message.length = 4;
		
		message.data[0] = joystickValueX;
		message.data[1] = joystickValueY;
		message.data[2] = leftButtonPressed;
     982:	0d 8b       	std	Y+21, r16	; 0x15
	
	while(1){
		
		joystickValueX = getControlOutput(1,100,5, &maxMinValues[0], &maxMinValues[1]);
		joystickValueY = getControlOutput(2,100,5, &maxMinValues[2], &maxMinValues[3]);
		sliderValueA = getControlOutput(3,100,5, &maxMinValues[4], &maxMinValues[5]);
     984:	1e 8b       	std	Y+22, r17	; 0x16
		message.data[0] = joystickValueX;
		message.data[1] = joystickValueY;
		message.data[2] = leftButtonPressed;
		message.data[3] = sliderValueA;
		
		CAN_sendMessage(&message);
     986:	ce 01       	movw	r24, r28
     988:	41 96       	adiw	r24, 0x11	; 17
     98a:	0e 94 00 02 	call	0x400	; 0x400 <CAN_sendMessage>
     98e:	8f ef       	ldi	r24, 0xFF	; 255
     990:	9f e2       	ldi	r25, 0x2F	; 47
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	f1 f7       	brne	.-4      	; 0x992 <newGame+0x1d2>
     996:	00 c0       	rjmp	.+0      	; 0x998 <newGame+0x1d8>
     998:	00 00       	nop
     99a:	68 cf       	rjmp	.-304    	; 0x86c <newGame+0xac>

0000099c <printMenuToScreen>:
	//_delay_ms(500); // delay after keystroke
	}
}

// get children from parent node
void printMenuToScreen(struct MenuItem * nodeName){	
     99c:	ef 92       	push	r14
     99e:	ff 92       	push	r15
     9a0:	0f 93       	push	r16
     9a2:	1f 93       	push	r17
     9a4:	cf 93       	push	r28
     9a6:	df 93       	push	r29
     9a8:	7c 01       	movw	r14, r24
	//char * newTitle = strcat("-",strcat(nodeName->title,"-"));	
	OLED_Pos(0,4);
     9aa:	64 e0       	ldi	r22, 0x04	; 4
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	0e 94 9b 07 	call	0xf36	; 0xf36 <OLED_Pos>
	OLED_Print(nodeName->title);
     9b6:	d7 01       	movw	r26, r14
     9b8:	8d 91       	ld	r24, X+
     9ba:	9c 91       	ld	r25, X
     9bc:	0e 94 4e 07 	call	0xe9c	; 0xe9c <OLED_Print>
	
	for(int i=0; i<nodeName->numOfChildren; i++){
     9c0:	f7 01       	movw	r30, r14
     9c2:	26 89       	ldd	r18, Z+22	; 0x16
     9c4:	37 89       	ldd	r19, Z+23	; 0x17
     9c6:	12 16       	cp	r1, r18
     9c8:	13 06       	cpc	r1, r19
     9ca:	d4 f4       	brge	.+52     	; 0xa00 <printMenuToScreen+0x64>
     9cc:	87 01       	movw	r16, r14
     9ce:	0c 5f       	subi	r16, 0xFC	; 252
     9d0:	1f 4f       	sbci	r17, 0xFF	; 255
     9d2:	c0 e0       	ldi	r28, 0x00	; 0
     9d4:	d0 e0       	ldi	r29, 0x00	; 0
		OLED_Pos(i+2,4);
     9d6:	64 e0       	ldi	r22, 0x04	; 4
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	ce 01       	movw	r24, r28
     9dc:	02 96       	adiw	r24, 0x02	; 2
     9de:	0e 94 9b 07 	call	0xf36	; 0xf36 <OLED_Pos>
		OLED_Print(nodeName->children[i]->title);
     9e2:	d8 01       	movw	r26, r16
     9e4:	ed 91       	ld	r30, X+
     9e6:	fd 91       	ld	r31, X+
     9e8:	8d 01       	movw	r16, r26
     9ea:	80 81       	ld	r24, Z
     9ec:	91 81       	ldd	r25, Z+1	; 0x01
     9ee:	0e 94 4e 07 	call	0xe9c	; 0xe9c <OLED_Print>
void printMenuToScreen(struct MenuItem * nodeName){	
	//char * newTitle = strcat("-",strcat(nodeName->title,"-"));	
	OLED_Pos(0,4);
	OLED_Print(nodeName->title);
	
	for(int i=0; i<nodeName->numOfChildren; i++){
     9f2:	21 96       	adiw	r28, 0x01	; 1
     9f4:	f7 01       	movw	r30, r14
     9f6:	26 89       	ldd	r18, Z+22	; 0x16
     9f8:	37 89       	ldd	r19, Z+23	; 0x17
     9fa:	c2 17       	cp	r28, r18
     9fc:	d3 07       	cpc	r29, r19
     9fe:	5c f3       	brlt	.-42     	; 0x9d6 <printMenuToScreen+0x3a>
		OLED_Pos(i+2,4);
		OLED_Print(nodeName->children[i]->title);
	}
	if(nodeName->parent != NULL){
     a00:	d7 01       	movw	r26, r14
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	89 2b       	or	r24, r25
     a0c:	51 f0       	breq	.+20     	; 0xa22 <printMenuToScreen+0x86>
		OLED_Pos(nodeName->numOfChildren+2,4);
     a0e:	64 e0       	ldi	r22, 0x04	; 4
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	c9 01       	movw	r24, r18
     a14:	02 96       	adiw	r24, 0x02	; 2
     a16:	0e 94 9b 07 	call	0xf36	; 0xf36 <OLED_Pos>
		OLED_Print("Return");
     a1a:	89 e6       	ldi	r24, 0x69	; 105
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	0e 94 4e 07 	call	0xe9c	; 0xe9c <OLED_Print>
	}
}
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	1f 91       	pop	r17
     a28:	0f 91       	pop	r16
     a2a:	ff 90       	pop	r15
     a2c:	ef 90       	pop	r14
     a2e:	08 95       	ret

00000a30 <menuInit>:
#include <string.h>
#include "joystick.h"
#include "CAN.h"
#include <math.h>

void menuInit(){
     a30:	8f 92       	push	r8
     a32:	9f 92       	push	r9
     a34:	af 92       	push	r10
     a36:	bf 92       	push	r11
     a38:	cf 92       	push	r12
     a3a:	df 92       	push	r13
     a3c:	ef 92       	push	r14
     a3e:	ff 92       	push	r15
     a40:	0f 93       	push	r16
     a42:	1f 93       	push	r17
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
	
	OLED_ClearScreen();
     a48:	0e 94 d6 07 	call	0xfac	; 0xfac <OLED_ClearScreen>
	OLED_Pos(2, 1);
     a4c:	61 e0       	ldi	r22, 0x01	; 1
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	82 e0       	ldi	r24, 0x02	; 2
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	0e 94 9b 07 	call	0xf36	; 0xf36 <OLED_Pos>
	OLED_Print(" >");
     a58:	80 e7       	ldi	r24, 0x70	; 112
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	0e 94 4e 07 	call	0xe9c	; 0xe9c <OLED_Print>
	
	mainmenu.title = "Main menu";
     a60:	ea e7       	ldi	r30, 0x7A	; 122
     a62:	f2 e0       	ldi	r31, 0x02	; 2
     a64:	83 e7       	ldi	r24, 0x73	; 115
     a66:	91 e0       	ldi	r25, 0x01	; 1
     a68:	91 83       	std	Z+1, r25	; 0x01
     a6a:	80 83       	st	Z, r24
	newgame.title = "New game";
     a6c:	0f 2e       	mov	r0, r31
     a6e:	f2 e3       	ldi	r31, 0x32	; 50
     a70:	ef 2e       	mov	r14, r31
     a72:	f2 e0       	ldi	r31, 0x02	; 2
     a74:	ff 2e       	mov	r15, r31
     a76:	f0 2d       	mov	r31, r0
     a78:	8d e7       	ldi	r24, 0x7D	; 125
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	d7 01       	movw	r26, r14
     a7e:	8d 93       	st	X+, r24
     a80:	9c 93       	st	X, r25
	settings.title = "Settings";
     a82:	0f 2e       	mov	r0, r31
     a84:	f2 e0       	ldi	r31, 0x02	; 2
     a86:	8f 2e       	mov	r8, r31
     a88:	f2 e0       	ldi	r31, 0x02	; 2
     a8a:	9f 2e       	mov	r9, r31
     a8c:	f0 2d       	mov	r31, r0
     a8e:	86 e8       	ldi	r24, 0x86	; 134
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	e4 01       	movw	r28, r8
     a94:	99 83       	std	Y+1, r25	; 0x01
     a96:	88 83       	st	Y, r24
	highscore.title = "Highscore";
     a98:	02 ec       	ldi	r16, 0xC2	; 194
     a9a:	12 e0       	ldi	r17, 0x02	; 2
     a9c:	8f e8       	ldi	r24, 0x8F	; 143
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	d8 01       	movw	r26, r16
     aa2:	8d 93       	st	X+, r24
     aa4:	9c 93       	st	X, r25
	about.title = "About";
     aa6:	0f 2e       	mov	r0, r31
     aa8:	fa ea       	ldi	r31, 0xAA	; 170
     aaa:	af 2e       	mov	r10, r31
     aac:	f2 e0       	ldi	r31, 0x02	; 2
     aae:	bf 2e       	mov	r11, r31
     ab0:	f0 2d       	mov	r31, r0
     ab2:	89 e9       	ldi	r24, 0x99	; 153
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	e5 01       	movw	r28, r10
     ab8:	99 83       	std	Y+1, r25	; 0x01
     aba:	88 83       	st	Y, r24
	misc.title = "Misc";
     abc:	a2 e9       	ldi	r26, 0x92	; 146
     abe:	b2 e0       	ldi	r27, 0x02	; 2
     ac0:	8f e9       	ldi	r24, 0x9F	; 159
     ac2:	91 e0       	ldi	r25, 0x01	; 1
     ac4:	11 96       	adiw	r26, 0x01	; 1
     ac6:	9c 93       	st	X, r25
     ac8:	8e 93       	st	-X, r24
	sound.title = "Sound";
     aca:	4a e1       	ldi	r20, 0x1A	; 26
     acc:	52 e0       	ldi	r21, 0x02	; 2
     ace:	84 ea       	ldi	r24, 0xA4	; 164
     ad0:	91 e0       	ldi	r25, 0x01	; 1
     ad2:	ea 01       	movw	r28, r20
     ad4:	99 83       	std	Y+1, r25	; 0x01
     ad6:	88 83       	st	Y, r24
	calibration.title = "Calibration";
     ad8:	22 e6       	ldi	r18, 0x62	; 98
     ada:	32 e0       	ldi	r19, 0x02	; 2
     adc:	8a ea       	ldi	r24, 0xAA	; 170
     ade:	91 e0       	ldi	r25, 0x01	; 1
     ae0:	e9 01       	movw	r28, r18
     ae2:	99 83       	std	Y+1, r25	; 0x01
     ae4:	88 83       	st	Y, r24
	currentMenu = mainmenu;
}

// add child to parent node
void addChild(struct MenuItem * child, struct MenuItem * parentName, int (* function)()){	
	child->parent = parentName; // assign parent to child
     ae6:	f0 93 35 02 	sts	0x0235, r31
     aea:	e0 93 34 02 	sts	0x0234, r30
	parentName->children[parentName->numOfChildren] = child; // assign child to parent
     aee:	60 e9       	ldi	r22, 0x90	; 144
     af0:	72 e0       	ldi	r23, 0x02	; 2
     af2:	eb 01       	movw	r28, r22
     af4:	88 81       	ld	r24, Y
     af6:	99 81       	ldd	r25, Y+1	; 0x01
     af8:	6c 01       	movw	r12, r24
     afa:	cc 0c       	add	r12, r12
     afc:	dd 1c       	adc	r13, r13
     afe:	e6 01       	movw	r28, r12
     b00:	c2 58       	subi	r28, 0x82	; 130
     b02:	dd 4f       	sbci	r29, 0xFD	; 253
     b04:	f9 82       	std	Y+1, r15	; 0x01
     b06:	e8 82       	st	Y, r14
	parentName->numOfChildren++; // add to number of children
	child->fp = function;
     b08:	0f 2e       	mov	r0, r31
     b0a:	f0 ee       	ldi	r31, 0xE0	; 224
     b0c:	ef 2e       	mov	r14, r31
     b0e:	f3 e0       	ldi	r31, 0x03	; 3
     b10:	ff 2e       	mov	r15, r31
     b12:	f0 2d       	mov	r31, r0
     b14:	f0 92 47 02 	sts	0x0247, r15
     b18:	e0 92 46 02 	sts	0x0246, r14
	currentMenu = mainmenu;
}

// add child to parent node
void addChild(struct MenuItem * child, struct MenuItem * parentName, int (* function)()){	
	child->parent = parentName; // assign parent to child
     b1c:	f0 93 c5 02 	sts	0x02C5, r31
     b20:	e0 93 c4 02 	sts	0x02C4, r30
	parentName->children[parentName->numOfChildren] = child; // assign child to parent
     b24:	e6 01       	movw	r28, r12
     b26:	c0 58       	subi	r28, 0x80	; 128
     b28:	dd 4f       	sbci	r29, 0xFD	; 253
     b2a:	19 83       	std	Y+1, r17	; 0x01
     b2c:	08 83       	st	Y, r16
	parentName->numOfChildren++; // add to number of children
	child->fp = function;
     b2e:	06 ed       	ldi	r16, 0xD6	; 214
     b30:	13 e0       	ldi	r17, 0x03	; 3
     b32:	10 93 d7 02 	sts	0x02D7, r17
     b36:	00 93 d6 02 	sts	0x02D6, r16
	currentMenu = mainmenu;
}

// add child to parent node
void addChild(struct MenuItem * child, struct MenuItem * parentName, int (* function)()){	
	child->parent = parentName; // assign parent to child
     b3a:	f0 93 05 02 	sts	0x0205, r31
     b3e:	e0 93 04 02 	sts	0x0204, r30
	parentName->children[parentName->numOfChildren] = child; // assign child to parent
     b42:	8c 01       	movw	r16, r24
     b44:	0c 5f       	subi	r16, 0xFC	; 252
     b46:	1f 4f       	sbci	r17, 0xFF	; 255
     b48:	78 01       	movw	r14, r16
     b4a:	ee 0c       	add	r14, r14
     b4c:	ff 1c       	adc	r15, r15
     b4e:	e7 01       	movw	r28, r14
     b50:	c6 58       	subi	r28, 0x86	; 134
     b52:	dd 4f       	sbci	r29, 0xFD	; 253
     b54:	99 82       	std	Y+1, r9	; 0x01
     b56:	88 82       	st	Y, r8
	parentName->numOfChildren++; // add to number of children
	child->fp = function;
     b58:	10 92 17 02 	sts	0x0217, r1
     b5c:	10 92 16 02 	sts	0x0216, r1
	currentMenu = mainmenu;
}

// add child to parent node
void addChild(struct MenuItem * child, struct MenuItem * parentName, int (* function)()){	
	child->parent = parentName; // assign parent to child
     b60:	f0 93 95 02 	sts	0x0295, r31
     b64:	e0 93 94 02 	sts	0x0294, r30
	parentName->children[parentName->numOfChildren] = child; // assign child to parent
     b68:	f6 01       	movw	r30, r12
     b6a:	ec 57       	subi	r30, 0x7C	; 124
     b6c:	fd 4f       	sbci	r31, 0xFD	; 253
     b6e:	b1 83       	std	Z+1, r27	; 0x01
     b70:	a0 83       	st	Z, r26
	parentName->numOfChildren++; // add to number of children
     b72:	fb 01       	movw	r30, r22
     b74:	11 83       	std	Z+1, r17	; 0x01
     b76:	00 83       	st	Z, r16
	child->fp = function;
     b78:	10 92 a7 02 	sts	0x02A7, r1
     b7c:	10 92 a6 02 	sts	0x02A6, r1
	currentMenu = mainmenu;
}

// add child to parent node
void addChild(struct MenuItem * child, struct MenuItem * parentName, int (* function)()){	
	child->parent = parentName; // assign parent to child
     b80:	90 92 1d 02 	sts	0x021D, r9
     b84:	80 92 1c 02 	sts	0x021C, r8
	parentName->children[parentName->numOfChildren] = child; // assign child to parent
     b88:	e8 e1       	ldi	r30, 0x18	; 24
     b8a:	f2 e0       	ldi	r31, 0x02	; 2
     b8c:	80 81       	ld	r24, Z
     b8e:	91 81       	ldd	r25, Z+1	; 0x01
     b90:	ec 01       	movw	r28, r24
     b92:	cc 0f       	add	r28, r28
     b94:	dd 1f       	adc	r29, r29
     b96:	ca 5f       	subi	r28, 0xFA	; 250
     b98:	dd 4f       	sbci	r29, 0xFD	; 253
     b9a:	59 83       	std	Y+1, r21	; 0x01
     b9c:	48 83       	st	Y, r20
	parentName->numOfChildren++; // add to number of children
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	91 83       	std	Z+1, r25	; 0x01
     ba2:	80 83       	st	Z, r24
	child->fp = function;
     ba4:	87 ed       	ldi	r24, 0xD7	; 215
     ba6:	93 e0       	ldi	r25, 0x03	; 3
     ba8:	90 93 2f 02 	sts	0x022F, r25
     bac:	80 93 2e 02 	sts	0x022E, r24
	currentMenu = mainmenu;
}

// add child to parent node
void addChild(struct MenuItem * child, struct MenuItem * parentName, int (* function)()){	
	child->parent = parentName; // assign parent to child
     bb0:	b0 93 65 02 	sts	0x0265, r27
     bb4:	a0 93 64 02 	sts	0x0264, r26
	parentName->children[parentName->numOfChildren] = child; // assign child to parent
     bb8:	e8 ea       	ldi	r30, 0xA8	; 168
     bba:	f2 e0       	ldi	r31, 0x02	; 2
     bbc:	40 81       	ld	r20, Z
     bbe:	51 81       	ldd	r21, Z+1	; 0x01
     bc0:	ca 01       	movw	r24, r20
     bc2:	02 96       	adiw	r24, 0x02	; 2
     bc4:	ec 01       	movw	r28, r24
     bc6:	cc 0f       	add	r28, r28
     bc8:	dd 1f       	adc	r29, r29
     bca:	ce 56       	subi	r28, 0x6E	; 110
     bcc:	dd 4f       	sbci	r29, 0xFD	; 253
     bce:	39 83       	std	Y+1, r19	; 0x01
     bd0:	28 83       	st	Y, r18
	parentName->numOfChildren++; // add to number of children
	child->fp = function;
     bd2:	2f ed       	ldi	r18, 0xDF	; 223
     bd4:	33 e0       	ldi	r19, 0x03	; 3
     bd6:	30 93 77 02 	sts	0x0277, r19
     bda:	20 93 76 02 	sts	0x0276, r18
	currentMenu = mainmenu;
}

// add child to parent node
void addChild(struct MenuItem * child, struct MenuItem * parentName, int (* function)()){	
	child->parent = parentName; // assign parent to child
     bde:	b0 93 ad 02 	sts	0x02AD, r27
     be2:	a0 93 ac 02 	sts	0x02AC, r26
	parentName->children[parentName->numOfChildren] = child; // assign child to parent
     be6:	da 01       	movw	r26, r20
     be8:	aa 0f       	add	r26, r26
     bea:	bb 1f       	adc	r27, r27
     bec:	a8 56       	subi	r26, 0x68	; 104
     bee:	bd 4f       	sbci	r27, 0xFD	; 253
     bf0:	ad 92       	st	X+, r10
     bf2:	bc 92       	st	X, r11
	parentName->numOfChildren++; // add to number of children
     bf4:	91 83       	std	Z+1, r25	; 0x01
     bf6:	80 83       	st	Z, r24
	child->fp = function;
     bf8:	8e ed       	ldi	r24, 0xDE	; 222
     bfa:	93 e0       	ldi	r25, 0x03	; 3
     bfc:	90 93 bf 02 	sts	0x02BF, r25
     c00:	80 93 be 02 	sts	0x02BE, r24
	
	/*getChildren(&mainmenu);
	newgame.fp(); // run function from menu item node
	getParent(&newgame); // print parent node
	*/
	printMenuToScreen(&mainmenu);	
     c04:	8a e7       	ldi	r24, 0x7A	; 122
     c06:	92 e0       	ldi	r25, 0x02	; 2
     c08:	0e 94 ce 04 	call	0x99c	; 0x99c <printMenuToScreen>
	//printMenuToScreen(&settings);
	
	currentMenu = mainmenu;
     c0c:	88 e1       	ldi	r24, 0x18	; 24
     c0e:	ea e7       	ldi	r30, 0x7A	; 122
     c10:	f2 e0       	ldi	r31, 0x02	; 2
     c12:	aa e4       	ldi	r26, 0x4A	; 74
     c14:	b2 e0       	ldi	r27, 0x02	; 2
     c16:	01 90       	ld	r0, Z+
     c18:	0d 92       	st	X+, r0
     c1a:	8a 95       	dec	r24
     c1c:	e1 f7       	brne	.-8      	; 0xc16 <menuInit+0x1e6>
}
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	ff 90       	pop	r15
     c28:	ef 90       	pop	r14
     c2a:	df 90       	pop	r13
     c2c:	cf 90       	pop	r12
     c2e:	bf 90       	pop	r11
     c30:	af 90       	pop	r10
     c32:	9f 90       	pop	r9
     c34:	8f 90       	pop	r8
     c36:	08 95       	ret

00000c38 <printCursor>:
		printf("No parents...\n");
		return 0;
	}
}

void printCursor(int currentPos, int offset){
     c38:	0f 93       	push	r16
     c3a:	1f 93       	push	r17
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	8c 01       	movw	r16, r24
     c42:	eb 01       	movw	r28, r22
	OLED_ClearCol();
     c44:	0e 94 b9 07 	call	0xf72	; 0xf72 <OLED_ClearCol>
	OLED_Pos(currentPos + offset, 1);
     c48:	61 e0       	ldi	r22, 0x01	; 1
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	c8 01       	movw	r24, r16
     c4e:	8c 0f       	add	r24, r28
     c50:	9d 1f       	adc	r25, r29
     c52:	0e 94 9b 07 	call	0xf36	; 0xf36 <OLED_Pos>
	OLED_Print(" >");
     c56:	80 e7       	ldi	r24, 0x70	; 112
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	0e 94 4e 07 	call	0xe9c	; 0xe9c <OLED_Print>
}
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	08 95       	ret

00000c68 <setMenu>:
		printf("%d: %s\n", i, nodeName->children[i]->title);
	}
	printf("\n");
}
				
void setMenu(struct MenuItem * currentMenu, int joystick, int button, int *menuItem){
     c68:	ef 92       	push	r14
     c6a:	ff 92       	push	r15
     c6c:	0f 93       	push	r16
     c6e:	1f 93       	push	r17
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	ec 01       	movw	r28, r24
     c76:	89 01       	movw	r16, r18
	
	int maxItems = currentMenu->numOfChildren;//-1; // Set number of current menu items
     c78:	ee 88       	ldd	r14, Y+22	; 0x16
     c7a:	ff 88       	ldd	r15, Y+23	; 0x17
	
	if(button){ // On button pressed
     c7c:	45 2b       	or	r20, r21
     c7e:	09 f4       	brne	.+2      	; 0xc82 <setMenu+0x1a>
     c80:	70 c0       	rjmp	.+224    	; 0xd62 <setMenu+0xfa>
     c82:	2f ef       	ldi	r18, 0xFF	; 255
     c84:	3f ef       	ldi	r19, 0xFF	; 255
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	21 50       	subi	r18, 0x01	; 1
     c8a:	30 40       	sbci	r19, 0x00	; 0
     c8c:	80 40       	sbci	r24, 0x00	; 0
     c8e:	e1 f7       	brne	.-8      	; 0xc88 <setMenu+0x20>
     c90:	00 c0       	rjmp	.+0      	; 0xc92 <setMenu+0x2a>
     c92:	00 c0       	rjmp	.+0      	; 0xc94 <setMenu+0x2c>
		_delay_ms(200); // delay after keystroke
		
		printf("Maxitems: %d\n", maxItems);
     c94:	ff 92       	push	r15
     c96:	ef 92       	push	r14
     c98:	89 ed       	ldi	r24, 0xD9	; 217
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	9f 93       	push	r25
     c9e:	8f 93       	push	r24
     ca0:	0e 94 48 0b 	call	0x1690	; 0x1690 <printf>
		printf("MenuItem: %d\n", *menuItem);
     ca4:	f8 01       	movw	r30, r16
     ca6:	81 81       	ldd	r24, Z+1	; 0x01
     ca8:	8f 93       	push	r24
     caa:	80 81       	ld	r24, Z
     cac:	8f 93       	push	r24
     cae:	87 ee       	ldi	r24, 0xE7	; 231
     cb0:	91 e0       	ldi	r25, 0x01	; 1
     cb2:	9f 93       	push	r25
     cb4:	8f 93       	push	r24
     cb6:	0e 94 48 0b 	call	0x1690	; 0x1690 <printf>
		if (*menuItem == maxItems && maxItems >0){//(currentMenu->parent != NULL)){ // if has reached bottom of menu
     cba:	f8 01       	movw	r30, r16
     cbc:	80 81       	ld	r24, Z
     cbe:	91 81       	ldd	r25, Z+1	; 0x01
     cc0:	2d b7       	in	r18, 0x3d	; 61
     cc2:	3e b7       	in	r19, 0x3e	; 62
     cc4:	28 5f       	subi	r18, 0xF8	; 248
     cc6:	3f 4f       	sbci	r19, 0xFF	; 255
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	3e bf       	out	0x3e, r19	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	2d bf       	out	0x3d, r18	; 61
     cd2:	8e 15       	cp	r24, r14
     cd4:	9f 05       	cpc	r25, r15
     cd6:	f1 f4       	brne	.+60     	; 0xd14 <setMenu+0xac>
     cd8:	18 16       	cp	r1, r24
     cda:	19 06       	cpc	r1, r25
     cdc:	dc f4       	brge	.+54     	; 0xd14 <setMenu+0xac>
			printf("HJELPES\n");
     cde:	85 ef       	ldi	r24, 0xF5	; 245
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <puts>
			//menuInit();
			//_delay_ms(10);
			*currentMenu = *currentMenu->parent; // set parent menu as current menu
     ce6:	ea 81       	ldd	r30, Y+2	; 0x02
     ce8:	fb 81       	ldd	r31, Y+3	; 0x03
     cea:	88 e1       	ldi	r24, 0x18	; 24
     cec:	de 01       	movw	r26, r28
     cee:	01 90       	ld	r0, Z+
     cf0:	0d 92       	st	X+, r0
     cf2:	8a 95       	dec	r24
     cf4:	e1 f7       	brne	.-8      	; 0xcee <setMenu+0x86>
			OLED_ClearScreen(); // clear oled screen
     cf6:	0e 94 d6 07 	call	0xfac	; 0xfac <OLED_ClearScreen>
			printMenuToScreen(currentMenu); // Show menu on screen
     cfa:	ce 01       	movw	r24, r28
     cfc:	0e 94 ce 04 	call	0x99c	; 0x99c <printMenuToScreen>
			*menuItem = 0;
     d00:	f8 01       	movw	r30, r16
     d02:	11 82       	std	Z+1, r1	; 0x01
     d04:	10 82       	st	Z, r1
			printCursor(*menuItem, 2);
     d06:	62 e0       	ldi	r22, 0x02	; 2
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	0e 94 1c 06 	call	0xc38	; 0xc38 <printCursor>
	if(button){ // On button pressed
		_delay_ms(200); // delay after keystroke
		
		printf("Maxitems: %d\n", maxItems);
		printf("MenuItem: %d\n", *menuItem);
		if (*menuItem == maxItems && maxItems >0){//(currentMenu->parent != NULL)){ // if has reached bottom of menu
     d12:	27 c0       	rjmp	.+78     	; 0xd62 <setMenu+0xfa>
			OLED_ClearScreen(); // clear oled screen
			printMenuToScreen(currentMenu); // Show menu on screen
			*menuItem = 0;
			printCursor(*menuItem, 2);
		}
		else if(currentMenu->children[*menuItem]->children[0] != NULL){ // if item has child
     d14:	02 96       	adiw	r24, 0x02	; 2
     d16:	fc 01       	movw	r30, r24
     d18:	ee 0f       	add	r30, r30
     d1a:	ff 1f       	adc	r31, r31
     d1c:	ec 0f       	add	r30, r28
     d1e:	fd 1f       	adc	r31, r29
     d20:	01 90       	ld	r0, Z+
     d22:	f0 81       	ld	r31, Z
     d24:	e0 2d       	mov	r30, r0
     d26:	84 81       	ldd	r24, Z+4	; 0x04
     d28:	95 81       	ldd	r25, Z+5	; 0x05
     d2a:	89 2b       	or	r24, r25
     d2c:	b1 f0       	breq	.+44     	; 0xd5a <setMenu+0xf2>
			*currentMenu = *currentMenu->children[*menuItem]; // set child menu as current menu
     d2e:	88 e1       	ldi	r24, 0x18	; 24
     d30:	de 01       	movw	r26, r28
     d32:	01 90       	ld	r0, Z+
     d34:	0d 92       	st	X+, r0
     d36:	8a 95       	dec	r24
     d38:	e1 f7       	brne	.-8      	; 0xd32 <setMenu+0xca>
			*menuItem = 0;
     d3a:	f8 01       	movw	r30, r16
     d3c:	11 82       	std	Z+1, r1	; 0x01
     d3e:	10 82       	st	Z, r1
			OLED_ClearScreen(); // clear oled screen
     d40:	0e 94 d6 07 	call	0xfac	; 0xfac <OLED_ClearScreen>
			printMenuToScreen(currentMenu); // Show menu on screen
     d44:	ce 01       	movw	r24, r28
     d46:	0e 94 ce 04 	call	0x99c	; 0x99c <printMenuToScreen>
			printCursor(*menuItem, 2);
     d4a:	62 e0       	ldi	r22, 0x02	; 2
     d4c:	70 e0       	ldi	r23, 0x00	; 0
     d4e:	f8 01       	movw	r30, r16
     d50:	80 81       	ld	r24, Z
     d52:	91 81       	ldd	r25, Z+1	; 0x01
     d54:	0e 94 1c 06 	call	0xc38	; 0xc38 <printCursor>
     d58:	04 c0       	rjmp	.+8      	; 0xd62 <setMenu+0xfa>
		}
		else if(currentMenu->children[*menuItem]->fp() != NULL){ // else if child has function				
     d5a:	04 88       	ldd	r0, Z+20	; 0x14
     d5c:	f5 89       	ldd	r31, Z+21	; 0x15
     d5e:	e0 2d       	mov	r30, r0
     d60:	09 95       	icall
			////printf("Running function in %s\n", currentMenu->title);
			////currentMenu->children[menuItem]->fp(); // run function
		}
	//_delay_ms(500); // delay after keystroke
	}
}
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	ff 90       	pop	r15
     d6c:	ef 90       	pop	r14
     d6e:	08 95       	ret

00000d70 <main>:


int main()
{
	//Initialize commands
	uartInit();
     d70:	0e 94 a8 08 	call	0x1150	; 0x1150 <uartInit>
	sramInit();
     d74:	0e 94 99 08 	call	0x1132	; 0x1132 <sramInit>
	OLED_Init();
     d78:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <OLED_Init>
	menuInit();
     d7c:	0e 94 18 05 	call	0xa30	; 0xa30 <menuInit>
	CAN_init();
     d80:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <CAN_init>
		
		int8_t joystickValueY = getControlOutput(2,100,5, &maxMinValues[2], &maxMinValues[3]);
		uint8_t leftButtonPressed = 0x01 & PINB;
		
		//Menu
		maxItems = currentMenu.numOfChildren;
     d84:	c0 e6       	ldi	r28, 0x60	; 96
     d86:	d2 e0       	ldi	r29, 0x02	; 2
		if(joystickValueY != 50){						
			if(joystickValueY > 55 && currentMenuItem > 0)
				currentMenuItem--;
			else if(joystickValueY < 45 && currentMenuItem < maxItems-1)
				currentMenuItem++;
			else if(joystickValueY < 45 && currentMenuItem < maxItems && currentMenu.parent != NULL)
     d88:	0f 2e       	mov	r0, r31
     d8a:	fc e4       	ldi	r31, 0x4C	; 76
     d8c:	ef 2e       	mov	r14, r31
     d8e:	f2 e0       	ldi	r31, 0x02	; 2
     d90:	ff 2e       	mov	r15, r31
     d92:	f0 2d       	mov	r31, r0
	menuInit();
	CAN_init();
		
	while(1){
		
		int8_t joystickValueY = getControlOutput(2,100,5, &maxMinValues[2], &maxMinValues[3]);
     d94:	0e e0       	ldi	r16, 0x0E	; 14
     d96:	11 e0       	ldi	r17, 0x01	; 1
     d98:	2c e0       	ldi	r18, 0x0C	; 12
     d9a:	31 e0       	ldi	r19, 0x01	; 1
     d9c:	45 e0       	ldi	r20, 0x05	; 5
     d9e:	50 e0       	ldi	r21, 0x00	; 0
     da0:	64 e6       	ldi	r22, 0x64	; 100
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	82 e0       	ldi	r24, 0x02	; 2
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 dd 02 	call	0x5ba	; 0x5ba <getControlOutput>
     dac:	18 2f       	mov	r17, r24
		uint8_t leftButtonPressed = 0x01 & PINB;
     dae:	46 b3       	in	r20, 0x16	; 22
		
		//Menu
		maxItems = currentMenu.numOfChildren;
     db0:	28 81       	ld	r18, Y
     db2:	39 81       	ldd	r19, Y+1	; 0x01
     db4:	30 93 ff 01 	sts	0x01FF, r19
     db8:	20 93 fe 01 	sts	0x01FE, r18
		//printf("%s\n", currentMenu.title);
		setMenu(&currentMenu, joystickValueY, leftButtonPressed, &currentMenuItem);
     dbc:	41 70       	andi	r20, 0x01	; 1
     dbe:	68 2f       	mov	r22, r24
     dc0:	77 27       	eor	r23, r23
     dc2:	67 fd       	sbrc	r22, 7
     dc4:	70 95       	com	r23
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	32 e0       	ldi	r19, 0x02	; 2
     dca:	50 e0       	ldi	r21, 0x00	; 0
     dcc:	8a e4       	ldi	r24, 0x4A	; 74
     dce:	92 e0       	ldi	r25, 0x02	; 2
     dd0:	0e 94 34 06 	call	0xc68	; 0xc68 <setMenu>
		// Move menu cursor
		if(joystickValueY != 50){						
     dd4:	12 33       	cpi	r17, 0x32	; 50
     dd6:	f1 f2       	breq	.-68     	; 0xd94 <main+0x24>
			if(joystickValueY > 55 && currentMenuItem > 0)
     dd8:	18 33       	cpi	r17, 0x38	; 56
     dda:	74 f0       	brlt	.+28     	; 0xdf8 <main+0x88>
     ddc:	20 91 00 02 	lds	r18, 0x0200
     de0:	30 91 01 02 	lds	r19, 0x0201
     de4:	12 16       	cp	r1, r18
     de6:	13 06       	cpc	r1, r19
     de8:	3c f4       	brge	.+14     	; 0xdf8 <main+0x88>
				currentMenuItem--;
     dea:	21 50       	subi	r18, 0x01	; 1
     dec:	31 09       	sbc	r19, r1
     dee:	30 93 01 02 	sts	0x0201, r19
     df2:	20 93 00 02 	sts	0x0200, r18
     df6:	23 c0       	rjmp	.+70     	; 0xe3e <main+0xce>
			else if(joystickValueY < 45 && currentMenuItem < maxItems-1)
     df8:	1d 32       	cpi	r17, 0x2D	; 45
     dfa:	0c f5       	brge	.+66     	; 0xe3e <main+0xce>
     dfc:	20 91 fe 01 	lds	r18, 0x01FE
     e00:	30 91 ff 01 	lds	r19, 0x01FF
     e04:	80 91 00 02 	lds	r24, 0x0200
     e08:	90 91 01 02 	lds	r25, 0x0201
     e0c:	a9 01       	movw	r20, r18
     e0e:	41 50       	subi	r20, 0x01	; 1
     e10:	51 09       	sbc	r21, r1
     e12:	84 17       	cp	r24, r20
     e14:	95 07       	cpc	r25, r21
     e16:	34 f4       	brge	.+12     	; 0xe24 <main+0xb4>
				currentMenuItem++;
     e18:	01 96       	adiw	r24, 0x01	; 1
     e1a:	90 93 01 02 	sts	0x0201, r25
     e1e:	80 93 00 02 	sts	0x0200, r24
     e22:	0d c0       	rjmp	.+26     	; 0xe3e <main+0xce>
			else if(joystickValueY < 45 && currentMenuItem < maxItems && currentMenu.parent != NULL)
     e24:	82 17       	cp	r24, r18
     e26:	93 07       	cpc	r25, r19
     e28:	54 f4       	brge	.+20     	; 0xe3e <main+0xce>
     e2a:	f7 01       	movw	r30, r14
     e2c:	20 81       	ld	r18, Z
     e2e:	31 81       	ldd	r19, Z+1	; 0x01
     e30:	23 2b       	or	r18, r19
     e32:	29 f0       	breq	.+10     	; 0xe3e <main+0xce>
				currentMenuItem++;
     e34:	01 96       	adiw	r24, 0x01	; 1
     e36:	90 93 01 02 	sts	0x0201, r25
     e3a:	80 93 00 02 	sts	0x0200, r24
				
			OLED_ClearCol();
     e3e:	0e 94 b9 07 	call	0xf72	; 0xf72 <OLED_ClearCol>
			OLED_Pos(currentMenuItem+2, 1);
     e42:	80 91 00 02 	lds	r24, 0x0200
     e46:	90 91 01 02 	lds	r25, 0x0201
     e4a:	61 e0       	ldi	r22, 0x01	; 1
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	02 96       	adiw	r24, 0x02	; 2
     e50:	0e 94 9b 07 	call	0xf36	; 0xf36 <OLED_Pos>
			OLED_Print(" >");
     e54:	80 e7       	ldi	r24, 0x70	; 112
     e56:	91 e0       	ldi	r25, 0x01	; 1
     e58:	0e 94 4e 07 	call	0xe9c	; 0xe9c <OLED_Print>
     e5c:	ff ef       	ldi	r31, 0xFF	; 255
     e5e:	2f e7       	ldi	r18, 0x7F	; 127
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	f1 50       	subi	r31, 0x01	; 1
     e64:	20 40       	sbci	r18, 0x00	; 0
     e66:	80 40       	sbci	r24, 0x00	; 0
     e68:	e1 f7       	brne	.-8      	; 0xe62 <main+0xf2>
     e6a:	00 c0       	rjmp	.+0      	; 0xe6c <main+0xfc>
     e6c:	00 c0       	rjmp	.+0      	; 0xe6e <main+0xfe>
     e6e:	92 cf       	rjmp	.-220    	; 0xd94 <main+0x24>

00000e70 <OLED_PrintChar>:
		//Set higher column start address
		*OLED_Command = 0x10 + (column*(FONTWIDTH) >> 4);
	}
}

void OLED_PrintChar(char c) {
     e70:	28 e0       	ldi	r18, 0x08	; 8
     e72:	82 9f       	mul	r24, r18
     e74:	c0 01       	movw	r24, r0
     e76:	11 24       	eor	r1, r1
     e78:	fc 01       	movw	r30, r24
     e7a:	e0 59       	subi	r30, 0x90	; 144
     e7c:	f0 40       	sbci	r31, 0x00	; 0
	//Write a character
	for (int i = 0; i < FONTWIDTH; i++) {
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
		*OLED_Data = pgm_read_byte(&font8[c-' '][i]);
     e82:	a0 91 18 01 	lds	r26, 0x0118
     e86:	b0 91 19 01 	lds	r27, 0x0119
     e8a:	84 91       	lpm	r24, Z
     e8c:	8c 93       	st	X, r24
	}
}

void OLED_PrintChar(char c) {
	//Write a character
	for (int i = 0; i < FONTWIDTH; i++) {
     e8e:	2f 5f       	subi	r18, 0xFF	; 255
     e90:	3f 4f       	sbci	r19, 0xFF	; 255
     e92:	31 96       	adiw	r30, 0x01	; 1
     e94:	28 30       	cpi	r18, 0x08	; 8
     e96:	31 05       	cpc	r19, r1
     e98:	a1 f7       	brne	.-24     	; 0xe82 <OLED_PrintChar+0x12>
		*OLED_Data = pgm_read_byte(&font8[c-' '][i]);
	}	
	
}
     e9a:	08 95       	ret

00000e9c <OLED_Print>:

void OLED_Print(char *c) {
     e9c:	cf 93       	push	r28
     e9e:	df 93       	push	r29
     ea0:	ec 01       	movw	r28, r24
	int i = 0;	
	char tmp;
	//Write the complete string
	while(c[i] != '\0'){
     ea2:	88 81       	ld	r24, Y
     ea4:	88 23       	and	r24, r24
     ea6:	31 f0       	breq	.+12     	; 0xeb4 <OLED_Print+0x18>
     ea8:	21 96       	adiw	r28, 0x01	; 1
		OLED_PrintChar(c[i]);
     eaa:	0e 94 38 07 	call	0xe70	; 0xe70 <OLED_PrintChar>

void OLED_Print(char *c) {
	int i = 0;	
	char tmp;
	//Write the complete string
	while(c[i] != '\0'){
     eae:	89 91       	ld	r24, Y+
     eb0:	81 11       	cpse	r24, r1
     eb2:	fb cf       	rjmp	.-10     	; 0xeaa <OLED_Print+0xe>
		OLED_PrintChar(c[i]);
		i++;
	}
}
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	08 95       	ret

00000eba <OLED_Home>:
	}
}

//Set the cursor to the start of the screen
void OLED_Home(){
	*OLED_Command = 0x21;
     eba:	e0 91 1a 01 	lds	r30, 0x011A
     ebe:	f0 91 1b 01 	lds	r31, 0x011B
     ec2:	81 e2       	ldi	r24, 0x21	; 33
     ec4:	80 83       	st	Z, r24
	*OLED_Command = 0x00;
     ec6:	e0 91 1a 01 	lds	r30, 0x011A
     eca:	f0 91 1b 01 	lds	r31, 0x011B
     ece:	10 82       	st	Z, r1
	*OLED_Command = 0x7f;	
     ed0:	e0 91 1a 01 	lds	r30, 0x011A
     ed4:	f0 91 1b 01 	lds	r31, 0x011B
     ed8:	8f e7       	ldi	r24, 0x7F	; 127
     eda:	80 83       	st	Z, r24
	*OLED_Command = 0x22;
     edc:	e0 91 1a 01 	lds	r30, 0x011A
     ee0:	f0 91 1b 01 	lds	r31, 0x011B
     ee4:	82 e2       	ldi	r24, 0x22	; 34
     ee6:	80 83       	st	Z, r24
	*OLED_Command = 0x00;
     ee8:	e0 91 1a 01 	lds	r30, 0x011A
     eec:	f0 91 1b 01 	lds	r31, 0x011B
     ef0:	10 82       	st	Z, r1
	*OLED_Command = 0x07;
     ef2:	e0 91 1a 01 	lds	r30, 0x011A
     ef6:	f0 91 1b 01 	lds	r31, 0x011B
     efa:	87 e0       	ldi	r24, 0x07	; 7
     efc:	80 83       	st	Z, r24
     efe:	08 95       	ret

00000f00 <OLED_GotoLine>:
		i++;
	}
}

//Goto specific line
void OLED_GotoLine(uint8_t line){	
     f00:	cf 93       	push	r28
     f02:	c8 2f       	mov	r28, r24
	OLED_Home();	
     f04:	0e 94 5d 07 	call	0xeba	; 0xeba <OLED_Home>
	if(line < 8){
     f08:	c8 30       	cpi	r28, 0x08	; 8
     f0a:	98 f4       	brcc	.+38     	; 0xf32 <OLED_GotoLine+0x32>
		//Save page
		page = line;
     f0c:	c0 93 db 02 	sts	0x02DB, r28
		//Set lower column start address
		*OLED_Command = 0x00;
     f10:	e0 91 1a 01 	lds	r30, 0x011A
     f14:	f0 91 1b 01 	lds	r31, 0x011B
     f18:	10 82       	st	Z, r1
		//Set higher column start address
		*OLED_Command = 0x10;
     f1a:	e0 91 1a 01 	lds	r30, 0x011A
     f1e:	f0 91 1b 01 	lds	r31, 0x011B
     f22:	80 e1       	ldi	r24, 0x10	; 16
     f24:	80 83       	st	Z, r24
		//Set page address
		*OLED_Command = 0xB0 | line;
     f26:	e0 91 1a 01 	lds	r30, 0x011A
     f2a:	f0 91 1b 01 	lds	r31, 0x011B
     f2e:	c0 6b       	ori	r28, 0xB0	; 176
     f30:	c0 83       	st	Z, r28
	}
}
     f32:	cf 91       	pop	r28
     f34:	08 95       	ret

00000f36 <OLED_Pos>:
volatile char *OLED_Data = (char *) 0x1200;
uint8_t page, col;


//Goto specific line and column
void OLED_Pos(uint8_t line, uint8_t column){
     f36:	cf 93       	push	r28
     f38:	c6 2f       	mov	r28, r22
	
	OLED_GotoLine(line);
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	0e 94 80 07 	call	0xf00	; 0xf00 <OLED_GotoLine>
	
	if(column < 128/FONTWIDTH){
     f40:	c0 31       	cpi	r28, 0x10	; 16
     f42:	a8 f4       	brcc	.+42     	; 0xf6e <OLED_Pos+0x38>
		//Save page
		col = column*(FONTWIDTH);
     f44:	8c 2f       	mov	r24, r28
     f46:	88 0f       	add	r24, r24
     f48:	88 0f       	add	r24, r24
     f4a:	88 0f       	add	r24, r24
     f4c:	80 93 da 02 	sts	0x02DA, r24
		//Set lower column start address
		*OLED_Command = 0x00 + (column*(FONTWIDTH) >> 4);
     f50:	e0 91 1a 01 	lds	r30, 0x011A
     f54:	f0 91 1b 01 	lds	r31, 0x011B
     f58:	6c 2f       	mov	r22, r28
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	76 95       	lsr	r23
     f5e:	67 95       	ror	r22
     f60:	60 83       	st	Z, r22
		//Set higher column start address
		*OLED_Command = 0x10 + (column*(FONTWIDTH) >> 4);
     f62:	e0 91 1a 01 	lds	r30, 0x011A
     f66:	f0 91 1b 01 	lds	r31, 0x011B
     f6a:	60 5f       	subi	r22, 0xF0	; 240
     f6c:	60 83       	st	Z, r22
	}
}
     f6e:	cf 91       	pop	r28
     f70:	08 95       	ret

00000f72 <OLED_ClearCol>:
	}
	OLED_Home();
}

//Clear cursor col
void OLED_ClearCol(){
     f72:	1f 93       	push	r17
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
	for(uint8_t j=0; j<8; j++){
     f78:	c0 e0       	ldi	r28, 0x00	; 0
		OLED_Pos(j, 0);
     f7a:	10 e1       	ldi	r17, 0x10	; 16
     f7c:	d0 e0       	ldi	r29, 0x00	; 0
     f7e:	60 e0       	ldi	r22, 0x00	; 0
     f80:	8c 2f       	mov	r24, r28
     f82:	0e 94 9b 07 	call	0xf36	; 0xf36 <OLED_Pos>
     f86:	21 2f       	mov	r18, r17
     f88:	3d 2f       	mov	r19, r29
		for (int i = 0; i < FONTWIDTH*2; i++) {
			*OLED_Data = 0x00;
     f8a:	e0 91 18 01 	lds	r30, 0x0118
     f8e:	f0 91 19 01 	lds	r31, 0x0119
     f92:	10 82       	st	Z, r1
     f94:	21 50       	subi	r18, 0x01	; 1
     f96:	31 09       	sbc	r19, r1

//Clear cursor col
void OLED_ClearCol(){
	for(uint8_t j=0; j<8; j++){
		OLED_Pos(j, 0);
		for (int i = 0; i < FONTWIDTH*2; i++) {
     f98:	21 15       	cp	r18, r1
     f9a:	31 05       	cpc	r19, r1
     f9c:	b1 f7       	brne	.-20     	; 0xf8a <OLED_ClearCol+0x18>
	OLED_Home();
}

//Clear cursor col
void OLED_ClearCol(){
	for(uint8_t j=0; j<8; j++){
     f9e:	cf 5f       	subi	r28, 0xFF	; 255
     fa0:	c8 30       	cpi	r28, 0x08	; 8
     fa2:	69 f7       	brne	.-38     	; 0xf7e <OLED_ClearCol+0xc>
		for (int i = 0; i < FONTWIDTH*2; i++) {
			*OLED_Data = 0x00;
		}
	}
		
}
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	1f 91       	pop	r17
     faa:	08 95       	ret

00000fac <OLED_ClearScreen>:

//Removes all things written on the screen
void OLED_ClearScreen(){
     fac:	20 eb       	ldi	r18, 0xB0	; 176
	for(int page = 0; page < 8; page++){
		*OLED_Command = (0xB0 + page);
     fae:	40 e8       	ldi	r20, 0x80	; 128
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	e0 91 1a 01 	lds	r30, 0x011A
     fb6:	f0 91 1b 01 	lds	r31, 0x011B
     fba:	20 83       	st	Z, r18
     fbc:	84 2f       	mov	r24, r20
     fbe:	93 2f       	mov	r25, r19
		for(int i = 0; i < 128; ++i){
			*OLED_Data = 0x00;
     fc0:	e0 91 18 01 	lds	r30, 0x0118
     fc4:	f0 91 19 01 	lds	r31, 0x0119
     fc8:	10 82       	st	Z, r1
     fca:	01 97       	sbiw	r24, 0x01	; 1

//Removes all things written on the screen
void OLED_ClearScreen(){
	for(int page = 0; page < 8; page++){
		*OLED_Command = (0xB0 + page);
		for(int i = 0; i < 128; ++i){
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	c1 f7       	brne	.-16     	; 0xfc0 <OLED_ClearScreen+0x14>
     fd0:	2f 5f       	subi	r18, 0xFF	; 255
		
}

//Removes all things written on the screen
void OLED_ClearScreen(){
	for(int page = 0; page < 8; page++){
     fd2:	28 3b       	cpi	r18, 0xB8	; 184
     fd4:	71 f7       	brne	.-36     	; 0xfb2 <OLED_ClearScreen+0x6>
		for(int i = 0; i < 128; ++i){
			*OLED_Data = 0x00;
		}
			
	}
}
     fd6:	08 95       	ret

00000fd8 <OLED_Init>:
	
	//printf("Initializing OLED_ display... ");
	

	//Display off
	*OLED_Command = 0xAE;	
     fd8:	e0 91 1a 01 	lds	r30, 0x011A
     fdc:	f0 91 1b 01 	lds	r31, 0x011B
     fe0:	8e ea       	ldi	r24, 0xAE	; 174
     fe2:	80 83       	st	Z, r24
	//Segment remap
	*OLED_Command = 0xA1;
     fe4:	e0 91 1a 01 	lds	r30, 0x011A
     fe8:	f0 91 1b 01 	lds	r31, 0x011B
     fec:	81 ea       	ldi	r24, 0xA1	; 161
     fee:	80 83       	st	Z, r24
	//Common pads hardware: alternative
	*OLED_Command = 0xDA;
     ff0:	e0 91 1a 01 	lds	r30, 0x011A
     ff4:	f0 91 1b 01 	lds	r31, 0x011B
     ff8:	8a ed       	ldi	r24, 0xDA	; 218
     ffa:	80 83       	st	Z, r24
	*OLED_Command = 0x12;
     ffc:	e0 91 1a 01 	lds	r30, 0x011A
    1000:	f0 91 1b 01 	lds	r31, 0x011B
    1004:	82 e1       	ldi	r24, 0x12	; 18
    1006:	80 83       	st	Z, r24
	//Common output scan direction:com63~com0
	*OLED_Command = 0xC8;
    1008:	e0 91 1a 01 	lds	r30, 0x011A
    100c:	f0 91 1b 01 	lds	r31, 0x011B
    1010:	88 ec       	ldi	r24, 0xC8	; 200
    1012:	80 83       	st	Z, r24
	//Multiplex ration mode:63
	*OLED_Command = 0xA8;
    1014:	e0 91 1a 01 	lds	r30, 0x011A
    1018:	f0 91 1b 01 	lds	r31, 0x011B
    101c:	88 ea       	ldi	r24, 0xA8	; 168
    101e:	80 83       	st	Z, r24
	*OLED_Command = 0x3F;
    1020:	e0 91 1a 01 	lds	r30, 0x011A
    1024:	f0 91 1b 01 	lds	r31, 0x011B
    1028:	8f e3       	ldi	r24, 0x3F	; 63
    102a:	80 83       	st	Z, r24
	//Display divide ratio/osc. freq. mode
	
	*OLED_Command = 0xD5;
    102c:	e0 91 1a 01 	lds	r30, 0x011A
    1030:	f0 91 1b 01 	lds	r31, 0x011B
    1034:	85 ed       	ldi	r24, 0xD5	; 213
    1036:	80 83       	st	Z, r24
	*OLED_Command = 0x80;
    1038:	e0 91 1a 01 	lds	r30, 0x011A
    103c:	f0 91 1b 01 	lds	r31, 0x011B
    1040:	80 e8       	ldi	r24, 0x80	; 128
    1042:	80 83       	st	Z, r24
	//Contrast control
	*OLED_Command = 0x81;
    1044:	e0 91 1a 01 	lds	r30, 0x011A
    1048:	f0 91 1b 01 	lds	r31, 0x011B
    104c:	81 e8       	ldi	r24, 0x81	; 129
    104e:	80 83       	st	Z, r24
	*OLED_Command = 0x50;
    1050:	e0 91 1a 01 	lds	r30, 0x011A
    1054:	f0 91 1b 01 	lds	r31, 0x011B
    1058:	80 e5       	ldi	r24, 0x50	; 80
    105a:	80 83       	st	Z, r24
	//Set pre-charge period
	*OLED_Command = 0xD9;
    105c:	e0 91 1a 01 	lds	r30, 0x011A
    1060:	f0 91 1b 01 	lds	r31, 0x011B
    1064:	89 ed       	ldi	r24, 0xD9	; 217
    1066:	80 83       	st	Z, r24
	*OLED_Command = 0x21;
    1068:	e0 91 1a 01 	lds	r30, 0x011A
    106c:	f0 91 1b 01 	lds	r31, 0x011B
    1070:	81 e2       	ldi	r24, 0x21	; 33
    1072:	80 83       	st	Z, r24
	//Set Memory Addressing Mode
	*OLED_Command = 0x20;
    1074:	e0 91 1a 01 	lds	r30, 0x011A
    1078:	f0 91 1b 01 	lds	r31, 0x011B
    107c:	80 e2       	ldi	r24, 0x20	; 32
    107e:	80 83       	st	Z, r24
	*OLED_Command = 0x02;
    1080:	e0 91 1a 01 	lds	r30, 0x011A
    1084:	f0 91 1b 01 	lds	r31, 0x011B
    1088:	82 e0       	ldi	r24, 0x02	; 2
    108a:	80 83       	st	Z, r24
	//VCOM deselect level mode
	*OLED_Command = 0xDB;
    108c:	e0 91 1a 01 	lds	r30, 0x011A
    1090:	f0 91 1b 01 	lds	r31, 0x011B
    1094:	8b ed       	ldi	r24, 0xDB	; 219
    1096:	80 83       	st	Z, r24
	*OLED_Command = 0x30;
    1098:	e0 91 1a 01 	lds	r30, 0x011A
    109c:	f0 91 1b 01 	lds	r31, 0x011B
    10a0:	80 e3       	ldi	r24, 0x30	; 48
    10a2:	80 83       	st	Z, r24
	//Master configuration
	*OLED_Command = 0xAD;
    10a4:	e0 91 1a 01 	lds	r30, 0x011A
    10a8:	f0 91 1b 01 	lds	r31, 0x011B
    10ac:	8d ea       	ldi	r24, 0xAD	; 173
    10ae:	80 83       	st	Z, r24
	*OLED_Command = 0x00;
    10b0:	e0 91 1a 01 	lds	r30, 0x011A
    10b4:	f0 91 1b 01 	lds	r31, 0x011B
    10b8:	10 82       	st	Z, r1
	//Out follows RAM content
	*OLED_Command = 0xA4;
    10ba:	e0 91 1a 01 	lds	r30, 0x011A
    10be:	f0 91 1b 01 	lds	r31, 0x011B
    10c2:	84 ea       	ldi	r24, 0xA4	; 164
    10c4:	80 83       	st	Z, r24
	//Set normal display
	*OLED_Command = 0xA6;
    10c6:	e0 91 1a 01 	lds	r30, 0x011A
    10ca:	f0 91 1b 01 	lds	r31, 0x011B
    10ce:	86 ea       	ldi	r24, 0xA6	; 166
    10d0:	80 83       	st	Z, r24
	//Display on
	*OLED_Command = 0xAF;	
    10d2:	e0 91 1a 01 	lds	r30, 0x011A
    10d6:	f0 91 1b 01 	lds	r31, 0x011B
    10da:	8f ea       	ldi	r24, 0xAF	; 175
    10dc:	80 83       	st	Z, r24
	//Set page start address
	*OLED_Command = 0xB0;
    10de:	e0 91 1a 01 	lds	r30, 0x011A
    10e2:	f0 91 1b 01 	lds	r31, 0x011B
    10e6:	80 eb       	ldi	r24, 0xB0	; 176
    10e8:	80 83       	st	Z, r24
	//Set lower column start address
	*OLED_Command = 0x00;
    10ea:	e0 91 1a 01 	lds	r30, 0x011A
    10ee:	f0 91 1b 01 	lds	r31, 0x011B
    10f2:	10 82       	st	Z, r1
	//Set higher column start address
	*OLED_Command = 0x10;
    10f4:	e0 91 1a 01 	lds	r30, 0x011A
    10f8:	f0 91 1b 01 	lds	r31, 0x011B
    10fc:	80 e1       	ldi	r24, 0x10	; 16
    10fe:	80 83       	st	Z, r24
	
	//Goto start position
	OLED_ClearScreen();
    1100:	0e 94 d6 07 	call	0xfac	; 0xfac <OLED_ClearScreen>
    1104:	08 95       	ret

00001106 <SPI_init>:
#include "SPI.h"
#include <avr/io.h>
#include <util/delay.h>

void SPI_init(void){	
	DDR_SPI |= (1<<DD_MOSI) | (1<<DD_SCK) | (1<<SS_PIN); // Set MOSI and SCK output, all others input
    1106:	87 b3       	in	r24, 0x17	; 23
    1108:	80 6b       	ori	r24, 0xB0	; 176
    110a:	87 bb       	out	0x17, r24	; 23
	SPCR |=	(1<<SPE) | (1<<MSTR) | (1<<SPR0); // Enable SPI, Master, set clock rate fck/16
    110c:	8d b1       	in	r24, 0x0d	; 13
    110e:	81 65       	ori	r24, 0x51	; 81
    1110:	8d b9       	out	0x0d, r24	; 13
    1112:	08 95       	ret

00001114 <SPI_write>:
}

void SPI_write(char c){
	SPDR = c; // Start transmission
    1114:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1116:	77 9b       	sbis	0x0e, 7	; 14
    1118:	fe cf       	rjmp	.-4      	; 0x1116 <SPI_write+0x2>
}
    111a:	08 95       	ret

0000111c <SPI_read>:

char SPI_read(){
	SPI_write(0);
    111c:	80 e0       	ldi	r24, 0x00	; 0
    111e:	0e 94 8a 08 	call	0x1114	; 0x1114 <SPI_write>
	uint8_t temp = SPDR;
    1122:	8f b1       	in	r24, 0x0f	; 15
	return temp;
}
    1124:	08 95       	ret

00001126 <SPI_slaveEnable>:

void SPI_slaveEnable(uint8_t enable){	
	if(enable)
    1126:	88 23       	and	r24, r24
    1128:	11 f0       	breq	.+4      	; 0x112e <SPI_slaveEnable+0x8>
	PORTB	&=	~(1<<SS_PIN);
    112a:	c4 98       	cbi	0x18, 4	; 24
    112c:	08 95       	ret
	else if(!enable)
		PORTB	|=	(1<<SS_PIN);
    112e:	c4 9a       	sbi	0x18, 4	; 24
    1130:	08 95       	ret

00001132 <sramInit>:
	}
	printf("SRAM test completed with\n%4d errors in write phase and\n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
}

void sramInit(void){
	MCUCR |= (1 << SRE); 
    1132:	85 b7       	in	r24, 0x35	; 53
    1134:	80 68       	ori	r24, 0x80	; 128
    1136:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
    1138:	80 b7       	in	r24, 0x30	; 48
    113a:	80 62       	ori	r24, 0x20	; 32
    113c:	80 bf       	out	0x30, r24	; 48
    113e:	08 95       	ret

00001140 <uartTransmit>:

//Transmit data to serial port
void uartTransmit(unsigned char data)
{
	//Wait for empty transmit buffer
	while( !(UCSR0A & (1<<UDRE0)) );
    1140:	5d 9b       	sbis	0x0b, 5	; 11
    1142:	fe cf       	rjmp	.-4      	; 0x1140 <uartTransmit>
	//Put data into buffer, sends the data
	UDR0 = data;
    1144:	8c b9       	out	0x0c, r24	; 12
    1146:	08 95       	ret

00001148 <uartReceive>:

//Read data from serial port
unsigned char uartReceive()
{
	//Wait for data to be received
	while( !(UCSR0A & (1<<RXC0)) );
    1148:	5f 9b       	sbis	0x0b, 7	; 11
    114a:	fe cf       	rjmp	.-4      	; 0x1148 <uartReceive>
	//Get and return received data from buffer
	return
    114c:	8c b1       	in	r24, 0x0c	; 12
	UDR0;
    114e:	08 95       	ret

00001150 <uartInit>:
//Initialize values to enable uart communication
void uartInit()
{
	//Set baud rate
	unsigned int baud = UBBR;
	UBRR0H = (unsigned char)(baud>>8);
    1150:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)baud;
    1152:	8f e1       	ldi	r24, 0x1F	; 31
    1154:	89 b9       	out	0x09, r24	; 9
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1156:	88 e1       	ldi	r24, 0x18	; 24
    1158:	8a b9       	out	0x0a, r24	; 10
	//Set frame format: 8data, 2stop bit
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);	
    115a:	8e e8       	ldi	r24, 0x8E	; 142
    115c:	80 bd       	out	0x20, r24	; 32
	//Connect the printf function to self defined uart functions
	fdevopen(uartTransmit, uartReceive);
    115e:	64 ea       	ldi	r22, 0xA4	; 164
    1160:	78 e0       	ldi	r23, 0x08	; 8
    1162:	80 ea       	ldi	r24, 0xA0	; 160
    1164:	98 e0       	ldi	r25, 0x08	; 8
    1166:	0e 94 fd 0a 	call	0x15fa	; 0x15fa <fdevopen>
    116a:	08 95       	ret

0000116c <__subsf3>:
    116c:	50 58       	subi	r21, 0x80	; 128

0000116e <__addsf3>:
    116e:	bb 27       	eor	r27, r27
    1170:	aa 27       	eor	r26, r26
    1172:	0e d0       	rcall	.+28     	; 0x1190 <__addsf3x>
    1174:	75 c1       	rjmp	.+746    	; 0x1460 <__fp_round>
    1176:	66 d1       	rcall	.+716    	; 0x1444 <__fp_pscA>
    1178:	30 f0       	brcs	.+12     	; 0x1186 <__addsf3+0x18>
    117a:	6b d1       	rcall	.+726    	; 0x1452 <__fp_pscB>
    117c:	20 f0       	brcs	.+8      	; 0x1186 <__addsf3+0x18>
    117e:	31 f4       	brne	.+12     	; 0x118c <__addsf3+0x1e>
    1180:	9f 3f       	cpi	r25, 0xFF	; 255
    1182:	11 f4       	brne	.+4      	; 0x1188 <__addsf3+0x1a>
    1184:	1e f4       	brtc	.+6      	; 0x118c <__addsf3+0x1e>
    1186:	5b c1       	rjmp	.+694    	; 0x143e <__fp_nan>
    1188:	0e f4       	brtc	.+2      	; 0x118c <__addsf3+0x1e>
    118a:	e0 95       	com	r30
    118c:	e7 fb       	bst	r30, 7
    118e:	51 c1       	rjmp	.+674    	; 0x1432 <__fp_inf>

00001190 <__addsf3x>:
    1190:	e9 2f       	mov	r30, r25
    1192:	77 d1       	rcall	.+750    	; 0x1482 <__fp_split3>
    1194:	80 f3       	brcs	.-32     	; 0x1176 <__addsf3+0x8>
    1196:	ba 17       	cp	r27, r26
    1198:	62 07       	cpc	r22, r18
    119a:	73 07       	cpc	r23, r19
    119c:	84 07       	cpc	r24, r20
    119e:	95 07       	cpc	r25, r21
    11a0:	18 f0       	brcs	.+6      	; 0x11a8 <__addsf3x+0x18>
    11a2:	71 f4       	brne	.+28     	; 0x11c0 <__addsf3x+0x30>
    11a4:	9e f5       	brtc	.+102    	; 0x120c <__addsf3x+0x7c>
    11a6:	8f c1       	rjmp	.+798    	; 0x14c6 <__fp_zero>
    11a8:	0e f4       	brtc	.+2      	; 0x11ac <__addsf3x+0x1c>
    11aa:	e0 95       	com	r30
    11ac:	0b 2e       	mov	r0, r27
    11ae:	ba 2f       	mov	r27, r26
    11b0:	a0 2d       	mov	r26, r0
    11b2:	0b 01       	movw	r0, r22
    11b4:	b9 01       	movw	r22, r18
    11b6:	90 01       	movw	r18, r0
    11b8:	0c 01       	movw	r0, r24
    11ba:	ca 01       	movw	r24, r20
    11bc:	a0 01       	movw	r20, r0
    11be:	11 24       	eor	r1, r1
    11c0:	ff 27       	eor	r31, r31
    11c2:	59 1b       	sub	r21, r25
    11c4:	99 f0       	breq	.+38     	; 0x11ec <__addsf3x+0x5c>
    11c6:	59 3f       	cpi	r21, 0xF9	; 249
    11c8:	50 f4       	brcc	.+20     	; 0x11de <__addsf3x+0x4e>
    11ca:	50 3e       	cpi	r21, 0xE0	; 224
    11cc:	68 f1       	brcs	.+90     	; 0x1228 <__addsf3x+0x98>
    11ce:	1a 16       	cp	r1, r26
    11d0:	f0 40       	sbci	r31, 0x00	; 0
    11d2:	a2 2f       	mov	r26, r18
    11d4:	23 2f       	mov	r18, r19
    11d6:	34 2f       	mov	r19, r20
    11d8:	44 27       	eor	r20, r20
    11da:	58 5f       	subi	r21, 0xF8	; 248
    11dc:	f3 cf       	rjmp	.-26     	; 0x11c4 <__addsf3x+0x34>
    11de:	46 95       	lsr	r20
    11e0:	37 95       	ror	r19
    11e2:	27 95       	ror	r18
    11e4:	a7 95       	ror	r26
    11e6:	f0 40       	sbci	r31, 0x00	; 0
    11e8:	53 95       	inc	r21
    11ea:	c9 f7       	brne	.-14     	; 0x11de <__addsf3x+0x4e>
    11ec:	7e f4       	brtc	.+30     	; 0x120c <__addsf3x+0x7c>
    11ee:	1f 16       	cp	r1, r31
    11f0:	ba 0b       	sbc	r27, r26
    11f2:	62 0b       	sbc	r22, r18
    11f4:	73 0b       	sbc	r23, r19
    11f6:	84 0b       	sbc	r24, r20
    11f8:	ba f0       	brmi	.+46     	; 0x1228 <__addsf3x+0x98>
    11fa:	91 50       	subi	r25, 0x01	; 1
    11fc:	a1 f0       	breq	.+40     	; 0x1226 <__addsf3x+0x96>
    11fe:	ff 0f       	add	r31, r31
    1200:	bb 1f       	adc	r27, r27
    1202:	66 1f       	adc	r22, r22
    1204:	77 1f       	adc	r23, r23
    1206:	88 1f       	adc	r24, r24
    1208:	c2 f7       	brpl	.-16     	; 0x11fa <__addsf3x+0x6a>
    120a:	0e c0       	rjmp	.+28     	; 0x1228 <__addsf3x+0x98>
    120c:	ba 0f       	add	r27, r26
    120e:	62 1f       	adc	r22, r18
    1210:	73 1f       	adc	r23, r19
    1212:	84 1f       	adc	r24, r20
    1214:	48 f4       	brcc	.+18     	; 0x1228 <__addsf3x+0x98>
    1216:	87 95       	ror	r24
    1218:	77 95       	ror	r23
    121a:	67 95       	ror	r22
    121c:	b7 95       	ror	r27
    121e:	f7 95       	ror	r31
    1220:	9e 3f       	cpi	r25, 0xFE	; 254
    1222:	08 f0       	brcs	.+2      	; 0x1226 <__addsf3x+0x96>
    1224:	b3 cf       	rjmp	.-154    	; 0x118c <__addsf3+0x1e>
    1226:	93 95       	inc	r25
    1228:	88 0f       	add	r24, r24
    122a:	08 f0       	brcs	.+2      	; 0x122e <__addsf3x+0x9e>
    122c:	99 27       	eor	r25, r25
    122e:	ee 0f       	add	r30, r30
    1230:	97 95       	ror	r25
    1232:	87 95       	ror	r24
    1234:	08 95       	ret

00001236 <__cmpsf2>:
    1236:	d9 d0       	rcall	.+434    	; 0x13ea <__fp_cmp>
    1238:	08 f4       	brcc	.+2      	; 0x123c <__cmpsf2+0x6>
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	08 95       	ret

0000123e <__divsf3>:
    123e:	0c d0       	rcall	.+24     	; 0x1258 <__divsf3x>
    1240:	0f c1       	rjmp	.+542    	; 0x1460 <__fp_round>
    1242:	07 d1       	rcall	.+526    	; 0x1452 <__fp_pscB>
    1244:	40 f0       	brcs	.+16     	; 0x1256 <__divsf3+0x18>
    1246:	fe d0       	rcall	.+508    	; 0x1444 <__fp_pscA>
    1248:	30 f0       	brcs	.+12     	; 0x1256 <__divsf3+0x18>
    124a:	21 f4       	brne	.+8      	; 0x1254 <__divsf3+0x16>
    124c:	5f 3f       	cpi	r21, 0xFF	; 255
    124e:	19 f0       	breq	.+6      	; 0x1256 <__divsf3+0x18>
    1250:	f0 c0       	rjmp	.+480    	; 0x1432 <__fp_inf>
    1252:	51 11       	cpse	r21, r1
    1254:	39 c1       	rjmp	.+626    	; 0x14c8 <__fp_szero>
    1256:	f3 c0       	rjmp	.+486    	; 0x143e <__fp_nan>

00001258 <__divsf3x>:
    1258:	14 d1       	rcall	.+552    	; 0x1482 <__fp_split3>
    125a:	98 f3       	brcs	.-26     	; 0x1242 <__divsf3+0x4>

0000125c <__divsf3_pse>:
    125c:	99 23       	and	r25, r25
    125e:	c9 f3       	breq	.-14     	; 0x1252 <__divsf3+0x14>
    1260:	55 23       	and	r21, r21
    1262:	b1 f3       	breq	.-20     	; 0x1250 <__divsf3+0x12>
    1264:	95 1b       	sub	r25, r21
    1266:	55 0b       	sbc	r21, r21
    1268:	bb 27       	eor	r27, r27
    126a:	aa 27       	eor	r26, r26
    126c:	62 17       	cp	r22, r18
    126e:	73 07       	cpc	r23, r19
    1270:	84 07       	cpc	r24, r20
    1272:	38 f0       	brcs	.+14     	; 0x1282 <__divsf3_pse+0x26>
    1274:	9f 5f       	subi	r25, 0xFF	; 255
    1276:	5f 4f       	sbci	r21, 0xFF	; 255
    1278:	22 0f       	add	r18, r18
    127a:	33 1f       	adc	r19, r19
    127c:	44 1f       	adc	r20, r20
    127e:	aa 1f       	adc	r26, r26
    1280:	a9 f3       	breq	.-22     	; 0x126c <__divsf3_pse+0x10>
    1282:	33 d0       	rcall	.+102    	; 0x12ea <__divsf3_pse+0x8e>
    1284:	0e 2e       	mov	r0, r30
    1286:	3a f0       	brmi	.+14     	; 0x1296 <__divsf3_pse+0x3a>
    1288:	e0 e8       	ldi	r30, 0x80	; 128
    128a:	30 d0       	rcall	.+96     	; 0x12ec <__divsf3_pse+0x90>
    128c:	91 50       	subi	r25, 0x01	; 1
    128e:	50 40       	sbci	r21, 0x00	; 0
    1290:	e6 95       	lsr	r30
    1292:	00 1c       	adc	r0, r0
    1294:	ca f7       	brpl	.-14     	; 0x1288 <__divsf3_pse+0x2c>
    1296:	29 d0       	rcall	.+82     	; 0x12ea <__divsf3_pse+0x8e>
    1298:	fe 2f       	mov	r31, r30
    129a:	27 d0       	rcall	.+78     	; 0x12ea <__divsf3_pse+0x8e>
    129c:	66 0f       	add	r22, r22
    129e:	77 1f       	adc	r23, r23
    12a0:	88 1f       	adc	r24, r24
    12a2:	bb 1f       	adc	r27, r27
    12a4:	26 17       	cp	r18, r22
    12a6:	37 07       	cpc	r19, r23
    12a8:	48 07       	cpc	r20, r24
    12aa:	ab 07       	cpc	r26, r27
    12ac:	b0 e8       	ldi	r27, 0x80	; 128
    12ae:	09 f0       	breq	.+2      	; 0x12b2 <__divsf3_pse+0x56>
    12b0:	bb 0b       	sbc	r27, r27
    12b2:	80 2d       	mov	r24, r0
    12b4:	bf 01       	movw	r22, r30
    12b6:	ff 27       	eor	r31, r31
    12b8:	93 58       	subi	r25, 0x83	; 131
    12ba:	5f 4f       	sbci	r21, 0xFF	; 255
    12bc:	2a f0       	brmi	.+10     	; 0x12c8 <__divsf3_pse+0x6c>
    12be:	9e 3f       	cpi	r25, 0xFE	; 254
    12c0:	51 05       	cpc	r21, r1
    12c2:	68 f0       	brcs	.+26     	; 0x12de <__divsf3_pse+0x82>
    12c4:	b6 c0       	rjmp	.+364    	; 0x1432 <__fp_inf>
    12c6:	00 c1       	rjmp	.+512    	; 0x14c8 <__fp_szero>
    12c8:	5f 3f       	cpi	r21, 0xFF	; 255
    12ca:	ec f3       	brlt	.-6      	; 0x12c6 <__divsf3_pse+0x6a>
    12cc:	98 3e       	cpi	r25, 0xE8	; 232
    12ce:	dc f3       	brlt	.-10     	; 0x12c6 <__divsf3_pse+0x6a>
    12d0:	86 95       	lsr	r24
    12d2:	77 95       	ror	r23
    12d4:	67 95       	ror	r22
    12d6:	b7 95       	ror	r27
    12d8:	f7 95       	ror	r31
    12da:	9f 5f       	subi	r25, 0xFF	; 255
    12dc:	c9 f7       	brne	.-14     	; 0x12d0 <__divsf3_pse+0x74>
    12de:	88 0f       	add	r24, r24
    12e0:	91 1d       	adc	r25, r1
    12e2:	96 95       	lsr	r25
    12e4:	87 95       	ror	r24
    12e6:	97 f9       	bld	r25, 7
    12e8:	08 95       	ret
    12ea:	e1 e0       	ldi	r30, 0x01	; 1
    12ec:	66 0f       	add	r22, r22
    12ee:	77 1f       	adc	r23, r23
    12f0:	88 1f       	adc	r24, r24
    12f2:	bb 1f       	adc	r27, r27
    12f4:	62 17       	cp	r22, r18
    12f6:	73 07       	cpc	r23, r19
    12f8:	84 07       	cpc	r24, r20
    12fa:	ba 07       	cpc	r27, r26
    12fc:	20 f0       	brcs	.+8      	; 0x1306 <__divsf3_pse+0xaa>
    12fe:	62 1b       	sub	r22, r18
    1300:	73 0b       	sbc	r23, r19
    1302:	84 0b       	sbc	r24, r20
    1304:	ba 0b       	sbc	r27, r26
    1306:	ee 1f       	adc	r30, r30
    1308:	88 f7       	brcc	.-30     	; 0x12ec <__divsf3_pse+0x90>
    130a:	e0 95       	com	r30
    130c:	08 95       	ret

0000130e <__fixsfsi>:
    130e:	04 d0       	rcall	.+8      	; 0x1318 <__fixunssfsi>
    1310:	68 94       	set
    1312:	b1 11       	cpse	r27, r1
    1314:	d9 c0       	rjmp	.+434    	; 0x14c8 <__fp_szero>
    1316:	08 95       	ret

00001318 <__fixunssfsi>:
    1318:	bc d0       	rcall	.+376    	; 0x1492 <__fp_splitA>
    131a:	88 f0       	brcs	.+34     	; 0x133e <__fixunssfsi+0x26>
    131c:	9f 57       	subi	r25, 0x7F	; 127
    131e:	90 f0       	brcs	.+36     	; 0x1344 <__fixunssfsi+0x2c>
    1320:	b9 2f       	mov	r27, r25
    1322:	99 27       	eor	r25, r25
    1324:	b7 51       	subi	r27, 0x17	; 23
    1326:	a0 f0       	brcs	.+40     	; 0x1350 <__fixunssfsi+0x38>
    1328:	d1 f0       	breq	.+52     	; 0x135e <__fixunssfsi+0x46>
    132a:	66 0f       	add	r22, r22
    132c:	77 1f       	adc	r23, r23
    132e:	88 1f       	adc	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	1a f0       	brmi	.+6      	; 0x133a <__fixunssfsi+0x22>
    1334:	ba 95       	dec	r27
    1336:	c9 f7       	brne	.-14     	; 0x132a <__fixunssfsi+0x12>
    1338:	12 c0       	rjmp	.+36     	; 0x135e <__fixunssfsi+0x46>
    133a:	b1 30       	cpi	r27, 0x01	; 1
    133c:	81 f0       	breq	.+32     	; 0x135e <__fixunssfsi+0x46>
    133e:	c3 d0       	rcall	.+390    	; 0x14c6 <__fp_zero>
    1340:	b1 e0       	ldi	r27, 0x01	; 1
    1342:	08 95       	ret
    1344:	c0 c0       	rjmp	.+384    	; 0x14c6 <__fp_zero>
    1346:	67 2f       	mov	r22, r23
    1348:	78 2f       	mov	r23, r24
    134a:	88 27       	eor	r24, r24
    134c:	b8 5f       	subi	r27, 0xF8	; 248
    134e:	39 f0       	breq	.+14     	; 0x135e <__fixunssfsi+0x46>
    1350:	b9 3f       	cpi	r27, 0xF9	; 249
    1352:	cc f3       	brlt	.-14     	; 0x1346 <__fixunssfsi+0x2e>
    1354:	86 95       	lsr	r24
    1356:	77 95       	ror	r23
    1358:	67 95       	ror	r22
    135a:	b3 95       	inc	r27
    135c:	d9 f7       	brne	.-10     	; 0x1354 <__fixunssfsi+0x3c>
    135e:	3e f4       	brtc	.+14     	; 0x136e <__fixunssfsi+0x56>
    1360:	90 95       	com	r25
    1362:	80 95       	com	r24
    1364:	70 95       	com	r23
    1366:	61 95       	neg	r22
    1368:	7f 4f       	sbci	r23, 0xFF	; 255
    136a:	8f 4f       	sbci	r24, 0xFF	; 255
    136c:	9f 4f       	sbci	r25, 0xFF	; 255
    136e:	08 95       	ret

00001370 <__floatunsisf>:
    1370:	e8 94       	clt
    1372:	09 c0       	rjmp	.+18     	; 0x1386 <__floatsisf+0x12>

00001374 <__floatsisf>:
    1374:	97 fb       	bst	r25, 7
    1376:	3e f4       	brtc	.+14     	; 0x1386 <__floatsisf+0x12>
    1378:	90 95       	com	r25
    137a:	80 95       	com	r24
    137c:	70 95       	com	r23
    137e:	61 95       	neg	r22
    1380:	7f 4f       	sbci	r23, 0xFF	; 255
    1382:	8f 4f       	sbci	r24, 0xFF	; 255
    1384:	9f 4f       	sbci	r25, 0xFF	; 255
    1386:	99 23       	and	r25, r25
    1388:	a9 f0       	breq	.+42     	; 0x13b4 <__floatsisf+0x40>
    138a:	f9 2f       	mov	r31, r25
    138c:	96 e9       	ldi	r25, 0x96	; 150
    138e:	bb 27       	eor	r27, r27
    1390:	93 95       	inc	r25
    1392:	f6 95       	lsr	r31
    1394:	87 95       	ror	r24
    1396:	77 95       	ror	r23
    1398:	67 95       	ror	r22
    139a:	b7 95       	ror	r27
    139c:	f1 11       	cpse	r31, r1
    139e:	f8 cf       	rjmp	.-16     	; 0x1390 <__floatsisf+0x1c>
    13a0:	fa f4       	brpl	.+62     	; 0x13e0 <__floatsisf+0x6c>
    13a2:	bb 0f       	add	r27, r27
    13a4:	11 f4       	brne	.+4      	; 0x13aa <__floatsisf+0x36>
    13a6:	60 ff       	sbrs	r22, 0
    13a8:	1b c0       	rjmp	.+54     	; 0x13e0 <__floatsisf+0x6c>
    13aa:	6f 5f       	subi	r22, 0xFF	; 255
    13ac:	7f 4f       	sbci	r23, 0xFF	; 255
    13ae:	8f 4f       	sbci	r24, 0xFF	; 255
    13b0:	9f 4f       	sbci	r25, 0xFF	; 255
    13b2:	16 c0       	rjmp	.+44     	; 0x13e0 <__floatsisf+0x6c>
    13b4:	88 23       	and	r24, r24
    13b6:	11 f0       	breq	.+4      	; 0x13bc <__floatsisf+0x48>
    13b8:	96 e9       	ldi	r25, 0x96	; 150
    13ba:	11 c0       	rjmp	.+34     	; 0x13de <__floatsisf+0x6a>
    13bc:	77 23       	and	r23, r23
    13be:	21 f0       	breq	.+8      	; 0x13c8 <__floatsisf+0x54>
    13c0:	9e e8       	ldi	r25, 0x8E	; 142
    13c2:	87 2f       	mov	r24, r23
    13c4:	76 2f       	mov	r23, r22
    13c6:	05 c0       	rjmp	.+10     	; 0x13d2 <__floatsisf+0x5e>
    13c8:	66 23       	and	r22, r22
    13ca:	71 f0       	breq	.+28     	; 0x13e8 <__floatsisf+0x74>
    13cc:	96 e8       	ldi	r25, 0x86	; 134
    13ce:	86 2f       	mov	r24, r22
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	60 e0       	ldi	r22, 0x00	; 0
    13d4:	2a f0       	brmi	.+10     	; 0x13e0 <__floatsisf+0x6c>
    13d6:	9a 95       	dec	r25
    13d8:	66 0f       	add	r22, r22
    13da:	77 1f       	adc	r23, r23
    13dc:	88 1f       	adc	r24, r24
    13de:	da f7       	brpl	.-10     	; 0x13d6 <__floatsisf+0x62>
    13e0:	88 0f       	add	r24, r24
    13e2:	96 95       	lsr	r25
    13e4:	87 95       	ror	r24
    13e6:	97 f9       	bld	r25, 7
    13e8:	08 95       	ret

000013ea <__fp_cmp>:
    13ea:	99 0f       	add	r25, r25
    13ec:	00 08       	sbc	r0, r0
    13ee:	55 0f       	add	r21, r21
    13f0:	aa 0b       	sbc	r26, r26
    13f2:	e0 e8       	ldi	r30, 0x80	; 128
    13f4:	fe ef       	ldi	r31, 0xFE	; 254
    13f6:	16 16       	cp	r1, r22
    13f8:	17 06       	cpc	r1, r23
    13fa:	e8 07       	cpc	r30, r24
    13fc:	f9 07       	cpc	r31, r25
    13fe:	c0 f0       	brcs	.+48     	; 0x1430 <__fp_cmp+0x46>
    1400:	12 16       	cp	r1, r18
    1402:	13 06       	cpc	r1, r19
    1404:	e4 07       	cpc	r30, r20
    1406:	f5 07       	cpc	r31, r21
    1408:	98 f0       	brcs	.+38     	; 0x1430 <__fp_cmp+0x46>
    140a:	62 1b       	sub	r22, r18
    140c:	73 0b       	sbc	r23, r19
    140e:	84 0b       	sbc	r24, r20
    1410:	95 0b       	sbc	r25, r21
    1412:	39 f4       	brne	.+14     	; 0x1422 <__fp_cmp+0x38>
    1414:	0a 26       	eor	r0, r26
    1416:	61 f0       	breq	.+24     	; 0x1430 <__fp_cmp+0x46>
    1418:	23 2b       	or	r18, r19
    141a:	24 2b       	or	r18, r20
    141c:	25 2b       	or	r18, r21
    141e:	21 f4       	brne	.+8      	; 0x1428 <__fp_cmp+0x3e>
    1420:	08 95       	ret
    1422:	0a 26       	eor	r0, r26
    1424:	09 f4       	brne	.+2      	; 0x1428 <__fp_cmp+0x3e>
    1426:	a1 40       	sbci	r26, 0x01	; 1
    1428:	a6 95       	lsr	r26
    142a:	8f ef       	ldi	r24, 0xFF	; 255
    142c:	81 1d       	adc	r24, r1
    142e:	81 1d       	adc	r24, r1
    1430:	08 95       	ret

00001432 <__fp_inf>:
    1432:	97 f9       	bld	r25, 7
    1434:	9f 67       	ori	r25, 0x7F	; 127
    1436:	80 e8       	ldi	r24, 0x80	; 128
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	60 e0       	ldi	r22, 0x00	; 0
    143c:	08 95       	ret

0000143e <__fp_nan>:
    143e:	9f ef       	ldi	r25, 0xFF	; 255
    1440:	80 ec       	ldi	r24, 0xC0	; 192
    1442:	08 95       	ret

00001444 <__fp_pscA>:
    1444:	00 24       	eor	r0, r0
    1446:	0a 94       	dec	r0
    1448:	16 16       	cp	r1, r22
    144a:	17 06       	cpc	r1, r23
    144c:	18 06       	cpc	r1, r24
    144e:	09 06       	cpc	r0, r25
    1450:	08 95       	ret

00001452 <__fp_pscB>:
    1452:	00 24       	eor	r0, r0
    1454:	0a 94       	dec	r0
    1456:	12 16       	cp	r1, r18
    1458:	13 06       	cpc	r1, r19
    145a:	14 06       	cpc	r1, r20
    145c:	05 06       	cpc	r0, r21
    145e:	08 95       	ret

00001460 <__fp_round>:
    1460:	09 2e       	mov	r0, r25
    1462:	03 94       	inc	r0
    1464:	00 0c       	add	r0, r0
    1466:	11 f4       	brne	.+4      	; 0x146c <__fp_round+0xc>
    1468:	88 23       	and	r24, r24
    146a:	52 f0       	brmi	.+20     	; 0x1480 <__fp_round+0x20>
    146c:	bb 0f       	add	r27, r27
    146e:	40 f4       	brcc	.+16     	; 0x1480 <__fp_round+0x20>
    1470:	bf 2b       	or	r27, r31
    1472:	11 f4       	brne	.+4      	; 0x1478 <__fp_round+0x18>
    1474:	60 ff       	sbrs	r22, 0
    1476:	04 c0       	rjmp	.+8      	; 0x1480 <__fp_round+0x20>
    1478:	6f 5f       	subi	r22, 0xFF	; 255
    147a:	7f 4f       	sbci	r23, 0xFF	; 255
    147c:	8f 4f       	sbci	r24, 0xFF	; 255
    147e:	9f 4f       	sbci	r25, 0xFF	; 255
    1480:	08 95       	ret

00001482 <__fp_split3>:
    1482:	57 fd       	sbrc	r21, 7
    1484:	90 58       	subi	r25, 0x80	; 128
    1486:	44 0f       	add	r20, r20
    1488:	55 1f       	adc	r21, r21
    148a:	59 f0       	breq	.+22     	; 0x14a2 <__fp_splitA+0x10>
    148c:	5f 3f       	cpi	r21, 0xFF	; 255
    148e:	71 f0       	breq	.+28     	; 0x14ac <__fp_splitA+0x1a>
    1490:	47 95       	ror	r20

00001492 <__fp_splitA>:
    1492:	88 0f       	add	r24, r24
    1494:	97 fb       	bst	r25, 7
    1496:	99 1f       	adc	r25, r25
    1498:	61 f0       	breq	.+24     	; 0x14b2 <__fp_splitA+0x20>
    149a:	9f 3f       	cpi	r25, 0xFF	; 255
    149c:	79 f0       	breq	.+30     	; 0x14bc <__fp_splitA+0x2a>
    149e:	87 95       	ror	r24
    14a0:	08 95       	ret
    14a2:	12 16       	cp	r1, r18
    14a4:	13 06       	cpc	r1, r19
    14a6:	14 06       	cpc	r1, r20
    14a8:	55 1f       	adc	r21, r21
    14aa:	f2 cf       	rjmp	.-28     	; 0x1490 <__fp_split3+0xe>
    14ac:	46 95       	lsr	r20
    14ae:	f1 df       	rcall	.-30     	; 0x1492 <__fp_splitA>
    14b0:	08 c0       	rjmp	.+16     	; 0x14c2 <__fp_splitA+0x30>
    14b2:	16 16       	cp	r1, r22
    14b4:	17 06       	cpc	r1, r23
    14b6:	18 06       	cpc	r1, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	f1 cf       	rjmp	.-30     	; 0x149e <__fp_splitA+0xc>
    14bc:	86 95       	lsr	r24
    14be:	71 05       	cpc	r23, r1
    14c0:	61 05       	cpc	r22, r1
    14c2:	08 94       	sec
    14c4:	08 95       	ret

000014c6 <__fp_zero>:
    14c6:	e8 94       	clt

000014c8 <__fp_szero>:
    14c8:	bb 27       	eor	r27, r27
    14ca:	66 27       	eor	r22, r22
    14cc:	77 27       	eor	r23, r23
    14ce:	cb 01       	movw	r24, r22
    14d0:	97 f9       	bld	r25, 7
    14d2:	08 95       	ret

000014d4 <__mulsf3>:
    14d4:	0b d0       	rcall	.+22     	; 0x14ec <__mulsf3x>
    14d6:	c4 cf       	rjmp	.-120    	; 0x1460 <__fp_round>
    14d8:	b5 df       	rcall	.-150    	; 0x1444 <__fp_pscA>
    14da:	28 f0       	brcs	.+10     	; 0x14e6 <__mulsf3+0x12>
    14dc:	ba df       	rcall	.-140    	; 0x1452 <__fp_pscB>
    14de:	18 f0       	brcs	.+6      	; 0x14e6 <__mulsf3+0x12>
    14e0:	95 23       	and	r25, r21
    14e2:	09 f0       	breq	.+2      	; 0x14e6 <__mulsf3+0x12>
    14e4:	a6 cf       	rjmp	.-180    	; 0x1432 <__fp_inf>
    14e6:	ab cf       	rjmp	.-170    	; 0x143e <__fp_nan>
    14e8:	11 24       	eor	r1, r1
    14ea:	ee cf       	rjmp	.-36     	; 0x14c8 <__fp_szero>

000014ec <__mulsf3x>:
    14ec:	ca df       	rcall	.-108    	; 0x1482 <__fp_split3>
    14ee:	a0 f3       	brcs	.-24     	; 0x14d8 <__mulsf3+0x4>

000014f0 <__mulsf3_pse>:
    14f0:	95 9f       	mul	r25, r21
    14f2:	d1 f3       	breq	.-12     	; 0x14e8 <__mulsf3+0x14>
    14f4:	95 0f       	add	r25, r21
    14f6:	50 e0       	ldi	r21, 0x00	; 0
    14f8:	55 1f       	adc	r21, r21
    14fa:	62 9f       	mul	r22, r18
    14fc:	f0 01       	movw	r30, r0
    14fe:	72 9f       	mul	r23, r18
    1500:	bb 27       	eor	r27, r27
    1502:	f0 0d       	add	r31, r0
    1504:	b1 1d       	adc	r27, r1
    1506:	63 9f       	mul	r22, r19
    1508:	aa 27       	eor	r26, r26
    150a:	f0 0d       	add	r31, r0
    150c:	b1 1d       	adc	r27, r1
    150e:	aa 1f       	adc	r26, r26
    1510:	64 9f       	mul	r22, r20
    1512:	66 27       	eor	r22, r22
    1514:	b0 0d       	add	r27, r0
    1516:	a1 1d       	adc	r26, r1
    1518:	66 1f       	adc	r22, r22
    151a:	82 9f       	mul	r24, r18
    151c:	22 27       	eor	r18, r18
    151e:	b0 0d       	add	r27, r0
    1520:	a1 1d       	adc	r26, r1
    1522:	62 1f       	adc	r22, r18
    1524:	73 9f       	mul	r23, r19
    1526:	b0 0d       	add	r27, r0
    1528:	a1 1d       	adc	r26, r1
    152a:	62 1f       	adc	r22, r18
    152c:	83 9f       	mul	r24, r19
    152e:	a0 0d       	add	r26, r0
    1530:	61 1d       	adc	r22, r1
    1532:	22 1f       	adc	r18, r18
    1534:	74 9f       	mul	r23, r20
    1536:	33 27       	eor	r19, r19
    1538:	a0 0d       	add	r26, r0
    153a:	61 1d       	adc	r22, r1
    153c:	23 1f       	adc	r18, r19
    153e:	84 9f       	mul	r24, r20
    1540:	60 0d       	add	r22, r0
    1542:	21 1d       	adc	r18, r1
    1544:	82 2f       	mov	r24, r18
    1546:	76 2f       	mov	r23, r22
    1548:	6a 2f       	mov	r22, r26
    154a:	11 24       	eor	r1, r1
    154c:	9f 57       	subi	r25, 0x7F	; 127
    154e:	50 40       	sbci	r21, 0x00	; 0
    1550:	8a f0       	brmi	.+34     	; 0x1574 <__mulsf3_pse+0x84>
    1552:	e1 f0       	breq	.+56     	; 0x158c <__mulsf3_pse+0x9c>
    1554:	88 23       	and	r24, r24
    1556:	4a f0       	brmi	.+18     	; 0x156a <__mulsf3_pse+0x7a>
    1558:	ee 0f       	add	r30, r30
    155a:	ff 1f       	adc	r31, r31
    155c:	bb 1f       	adc	r27, r27
    155e:	66 1f       	adc	r22, r22
    1560:	77 1f       	adc	r23, r23
    1562:	88 1f       	adc	r24, r24
    1564:	91 50       	subi	r25, 0x01	; 1
    1566:	50 40       	sbci	r21, 0x00	; 0
    1568:	a9 f7       	brne	.-22     	; 0x1554 <__mulsf3_pse+0x64>
    156a:	9e 3f       	cpi	r25, 0xFE	; 254
    156c:	51 05       	cpc	r21, r1
    156e:	70 f0       	brcs	.+28     	; 0x158c <__mulsf3_pse+0x9c>
    1570:	60 cf       	rjmp	.-320    	; 0x1432 <__fp_inf>
    1572:	aa cf       	rjmp	.-172    	; 0x14c8 <__fp_szero>
    1574:	5f 3f       	cpi	r21, 0xFF	; 255
    1576:	ec f3       	brlt	.-6      	; 0x1572 <__mulsf3_pse+0x82>
    1578:	98 3e       	cpi	r25, 0xE8	; 232
    157a:	dc f3       	brlt	.-10     	; 0x1572 <__mulsf3_pse+0x82>
    157c:	86 95       	lsr	r24
    157e:	77 95       	ror	r23
    1580:	67 95       	ror	r22
    1582:	b7 95       	ror	r27
    1584:	f7 95       	ror	r31
    1586:	e7 95       	ror	r30
    1588:	9f 5f       	subi	r25, 0xFF	; 255
    158a:	c1 f7       	brne	.-16     	; 0x157c <__mulsf3_pse+0x8c>
    158c:	fe 2b       	or	r31, r30
    158e:	88 0f       	add	r24, r24
    1590:	91 1d       	adc	r25, r1
    1592:	96 95       	lsr	r25
    1594:	87 95       	ror	r24
    1596:	97 f9       	bld	r25, 7
    1598:	08 95       	ret

0000159a <strcat>:
    159a:	fb 01       	movw	r30, r22
    159c:	dc 01       	movw	r26, r24
    159e:	0d 90       	ld	r0, X+
    15a0:	00 20       	and	r0, r0
    15a2:	e9 f7       	brne	.-6      	; 0x159e <strcat+0x4>
    15a4:	11 97       	sbiw	r26, 0x01	; 1
    15a6:	01 90       	ld	r0, Z+
    15a8:	0d 92       	st	X+, r0
    15aa:	00 20       	and	r0, r0
    15ac:	e1 f7       	brne	.-8      	; 0x15a6 <strcat+0xc>
    15ae:	08 95       	ret

000015b0 <__itoa_ncheck>:
    15b0:	bb 27       	eor	r27, r27
    15b2:	4a 30       	cpi	r20, 0x0A	; 10
    15b4:	31 f4       	brne	.+12     	; 0x15c2 <__itoa_ncheck+0x12>
    15b6:	99 23       	and	r25, r25
    15b8:	22 f4       	brpl	.+8      	; 0x15c2 <__itoa_ncheck+0x12>
    15ba:	bd e2       	ldi	r27, 0x2D	; 45
    15bc:	90 95       	com	r25
    15be:	81 95       	neg	r24
    15c0:	9f 4f       	sbci	r25, 0xFF	; 255
    15c2:	0c 94 e4 0a 	jmp	0x15c8	; 0x15c8 <__utoa_common>

000015c6 <__utoa_ncheck>:
    15c6:	bb 27       	eor	r27, r27

000015c8 <__utoa_common>:
    15c8:	fb 01       	movw	r30, r22
    15ca:	55 27       	eor	r21, r21
    15cc:	aa 27       	eor	r26, r26
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	aa 1f       	adc	r26, r26
    15d4:	a4 17       	cp	r26, r20
    15d6:	10 f0       	brcs	.+4      	; 0x15dc <__utoa_common+0x14>
    15d8:	a4 1b       	sub	r26, r20
    15da:	83 95       	inc	r24
    15dc:	50 51       	subi	r21, 0x10	; 16
    15de:	b9 f7       	brne	.-18     	; 0x15ce <__utoa_common+0x6>
    15e0:	a0 5d       	subi	r26, 0xD0	; 208
    15e2:	aa 33       	cpi	r26, 0x3A	; 58
    15e4:	08 f0       	brcs	.+2      	; 0x15e8 <__utoa_common+0x20>
    15e6:	a9 5d       	subi	r26, 0xD9	; 217
    15e8:	a1 93       	st	Z+, r26
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	79 f7       	brne	.-34     	; 0x15cc <__utoa_common+0x4>
    15ee:	b1 11       	cpse	r27, r1
    15f0:	b1 93       	st	Z+, r27
    15f2:	11 92       	st	Z+, r1
    15f4:	cb 01       	movw	r24, r22
    15f6:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <strrev>

000015fa <fdevopen>:
    15fa:	0f 93       	push	r16
    15fc:	1f 93       	push	r17
    15fe:	cf 93       	push	r28
    1600:	df 93       	push	r29
    1602:	ec 01       	movw	r28, r24
    1604:	8b 01       	movw	r16, r22
    1606:	00 97       	sbiw	r24, 0x00	; 0
    1608:	31 f4       	brne	.+12     	; 0x1616 <fdevopen+0x1c>
    160a:	61 15       	cp	r22, r1
    160c:	71 05       	cpc	r23, r1
    160e:	19 f4       	brne	.+6      	; 0x1616 <fdevopen+0x1c>
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	38 c0       	rjmp	.+112    	; 0x1686 <fdevopen+0x8c>
    1616:	6e e0       	ldi	r22, 0x0E	; 14
    1618:	70 e0       	ldi	r23, 0x00	; 0
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <calloc>
    1622:	fc 01       	movw	r30, r24
    1624:	00 97       	sbiw	r24, 0x00	; 0
    1626:	a1 f3       	breq	.-24     	; 0x1610 <fdevopen+0x16>
    1628:	80 e8       	ldi	r24, 0x80	; 128
    162a:	83 83       	std	Z+3, r24	; 0x03
    162c:	01 15       	cp	r16, r1
    162e:	11 05       	cpc	r17, r1
    1630:	71 f0       	breq	.+28     	; 0x164e <fdevopen+0x54>
    1632:	13 87       	std	Z+11, r17	; 0x0b
    1634:	02 87       	std	Z+10, r16	; 0x0a
    1636:	81 e8       	ldi	r24, 0x81	; 129
    1638:	83 83       	std	Z+3, r24	; 0x03
    163a:	80 91 dc 02 	lds	r24, 0x02DC
    163e:	90 91 dd 02 	lds	r25, 0x02DD
    1642:	89 2b       	or	r24, r25
    1644:	21 f4       	brne	.+8      	; 0x164e <fdevopen+0x54>
    1646:	f0 93 dd 02 	sts	0x02DD, r31
    164a:	e0 93 dc 02 	sts	0x02DC, r30
    164e:	20 97       	sbiw	r28, 0x00	; 0
    1650:	c9 f0       	breq	.+50     	; 0x1684 <fdevopen+0x8a>
    1652:	d1 87       	std	Z+9, r29	; 0x09
    1654:	c0 87       	std	Z+8, r28	; 0x08
    1656:	83 81       	ldd	r24, Z+3	; 0x03
    1658:	82 60       	ori	r24, 0x02	; 2
    165a:	83 83       	std	Z+3, r24	; 0x03
    165c:	80 91 de 02 	lds	r24, 0x02DE
    1660:	90 91 df 02 	lds	r25, 0x02DF
    1664:	89 2b       	or	r24, r25
    1666:	71 f4       	brne	.+28     	; 0x1684 <fdevopen+0x8a>
    1668:	f0 93 df 02 	sts	0x02DF, r31
    166c:	e0 93 de 02 	sts	0x02DE, r30
    1670:	80 91 e0 02 	lds	r24, 0x02E0
    1674:	90 91 e1 02 	lds	r25, 0x02E1
    1678:	89 2b       	or	r24, r25
    167a:	21 f4       	brne	.+8      	; 0x1684 <fdevopen+0x8a>
    167c:	f0 93 e1 02 	sts	0x02E1, r31
    1680:	e0 93 e0 02 	sts	0x02E0, r30
    1684:	cf 01       	movw	r24, r30
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	1f 91       	pop	r17
    168c:	0f 91       	pop	r16
    168e:	08 95       	ret

00001690 <printf>:
    1690:	a0 e0       	ldi	r26, 0x00	; 0
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	ee e4       	ldi	r30, 0x4E	; 78
    1696:	fb e0       	ldi	r31, 0x0B	; 11
    1698:	0c 94 6b 0f 	jmp	0x1ed6	; 0x1ed6 <__prologue_saves__+0x20>
    169c:	fe 01       	movw	r30, r28
    169e:	35 96       	adiw	r30, 0x05	; 5
    16a0:	61 91       	ld	r22, Z+
    16a2:	71 91       	ld	r23, Z+
    16a4:	af 01       	movw	r20, r30
    16a6:	80 91 de 02 	lds	r24, 0x02DE
    16aa:	90 91 df 02 	lds	r25, 0x02DF
    16ae:	0e 94 89 0b 	call	0x1712	; 0x1712 <vfprintf>
    16b2:	e2 e0       	ldi	r30, 0x02	; 2
    16b4:	0c 94 87 0f 	jmp	0x1f0e	; 0x1f0e <__epilogue_restores__+0x20>

000016b8 <puts>:
    16b8:	0f 93       	push	r16
    16ba:	1f 93       	push	r17
    16bc:	cf 93       	push	r28
    16be:	df 93       	push	r29
    16c0:	e0 91 de 02 	lds	r30, 0x02DE
    16c4:	f0 91 df 02 	lds	r31, 0x02DF
    16c8:	23 81       	ldd	r18, Z+3	; 0x03
    16ca:	21 ff       	sbrs	r18, 1
    16cc:	1b c0       	rjmp	.+54     	; 0x1704 <puts+0x4c>
    16ce:	ec 01       	movw	r28, r24
    16d0:	00 e0       	ldi	r16, 0x00	; 0
    16d2:	10 e0       	ldi	r17, 0x00	; 0
    16d4:	89 91       	ld	r24, Y+
    16d6:	60 91 de 02 	lds	r22, 0x02DE
    16da:	70 91 df 02 	lds	r23, 0x02DF
    16de:	db 01       	movw	r26, r22
    16e0:	18 96       	adiw	r26, 0x08	; 8
    16e2:	ed 91       	ld	r30, X+
    16e4:	fc 91       	ld	r31, X
    16e6:	19 97       	sbiw	r26, 0x09	; 9
    16e8:	88 23       	and	r24, r24
    16ea:	31 f0       	breq	.+12     	; 0x16f8 <puts+0x40>
    16ec:	09 95       	icall
    16ee:	89 2b       	or	r24, r25
    16f0:	89 f3       	breq	.-30     	; 0x16d4 <puts+0x1c>
    16f2:	0f ef       	ldi	r16, 0xFF	; 255
    16f4:	1f ef       	ldi	r17, 0xFF	; 255
    16f6:	ee cf       	rjmp	.-36     	; 0x16d4 <puts+0x1c>
    16f8:	8a e0       	ldi	r24, 0x0A	; 10
    16fa:	09 95       	icall
    16fc:	89 2b       	or	r24, r25
    16fe:	11 f4       	brne	.+4      	; 0x1704 <puts+0x4c>
    1700:	c8 01       	movw	r24, r16
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <puts+0x50>
    1704:	8f ef       	ldi	r24, 0xFF	; 255
    1706:	9f ef       	ldi	r25, 0xFF	; 255
    1708:	df 91       	pop	r29
    170a:	cf 91       	pop	r28
    170c:	1f 91       	pop	r17
    170e:	0f 91       	pop	r16
    1710:	08 95       	ret

00001712 <vfprintf>:
    1712:	ac e0       	ldi	r26, 0x0C	; 12
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	ef e8       	ldi	r30, 0x8F	; 143
    1718:	fb e0       	ldi	r31, 0x0B	; 11
    171a:	0c 94 5b 0f 	jmp	0x1eb6	; 0x1eb6 <__prologue_saves__>
    171e:	7c 01       	movw	r14, r24
    1720:	6b 01       	movw	r12, r22
    1722:	8a 01       	movw	r16, r20
    1724:	fc 01       	movw	r30, r24
    1726:	17 82       	std	Z+7, r1	; 0x07
    1728:	16 82       	std	Z+6, r1	; 0x06
    172a:	83 81       	ldd	r24, Z+3	; 0x03
    172c:	81 ff       	sbrs	r24, 1
    172e:	bd c1       	rjmp	.+890    	; 0x1aaa <vfprintf+0x398>
    1730:	ce 01       	movw	r24, r28
    1732:	01 96       	adiw	r24, 0x01	; 1
    1734:	4c 01       	movw	r8, r24
    1736:	f7 01       	movw	r30, r14
    1738:	93 81       	ldd	r25, Z+3	; 0x03
    173a:	f6 01       	movw	r30, r12
    173c:	93 fd       	sbrc	r25, 3
    173e:	85 91       	lpm	r24, Z+
    1740:	93 ff       	sbrs	r25, 3
    1742:	81 91       	ld	r24, Z+
    1744:	6f 01       	movw	r12, r30
    1746:	88 23       	and	r24, r24
    1748:	09 f4       	brne	.+2      	; 0x174c <vfprintf+0x3a>
    174a:	ab c1       	rjmp	.+854    	; 0x1aa2 <vfprintf+0x390>
    174c:	85 32       	cpi	r24, 0x25	; 37
    174e:	39 f4       	brne	.+14     	; 0x175e <vfprintf+0x4c>
    1750:	93 fd       	sbrc	r25, 3
    1752:	85 91       	lpm	r24, Z+
    1754:	93 ff       	sbrs	r25, 3
    1756:	81 91       	ld	r24, Z+
    1758:	6f 01       	movw	r12, r30
    175a:	85 32       	cpi	r24, 0x25	; 37
    175c:	29 f4       	brne	.+10     	; 0x1768 <vfprintf+0x56>
    175e:	b7 01       	movw	r22, r14
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <fputc>
    1766:	e7 cf       	rjmp	.-50     	; 0x1736 <vfprintf+0x24>
    1768:	51 2c       	mov	r5, r1
    176a:	31 2c       	mov	r3, r1
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	20 32       	cpi	r18, 0x20	; 32
    1770:	a0 f4       	brcc	.+40     	; 0x179a <vfprintf+0x88>
    1772:	8b 32       	cpi	r24, 0x2B	; 43
    1774:	69 f0       	breq	.+26     	; 0x1790 <vfprintf+0x7e>
    1776:	30 f4       	brcc	.+12     	; 0x1784 <vfprintf+0x72>
    1778:	80 32       	cpi	r24, 0x20	; 32
    177a:	59 f0       	breq	.+22     	; 0x1792 <vfprintf+0x80>
    177c:	83 32       	cpi	r24, 0x23	; 35
    177e:	69 f4       	brne	.+26     	; 0x179a <vfprintf+0x88>
    1780:	20 61       	ori	r18, 0x10	; 16
    1782:	2c c0       	rjmp	.+88     	; 0x17dc <vfprintf+0xca>
    1784:	8d 32       	cpi	r24, 0x2D	; 45
    1786:	39 f0       	breq	.+14     	; 0x1796 <vfprintf+0x84>
    1788:	80 33       	cpi	r24, 0x30	; 48
    178a:	39 f4       	brne	.+14     	; 0x179a <vfprintf+0x88>
    178c:	21 60       	ori	r18, 0x01	; 1
    178e:	26 c0       	rjmp	.+76     	; 0x17dc <vfprintf+0xca>
    1790:	22 60       	ori	r18, 0x02	; 2
    1792:	24 60       	ori	r18, 0x04	; 4
    1794:	23 c0       	rjmp	.+70     	; 0x17dc <vfprintf+0xca>
    1796:	28 60       	ori	r18, 0x08	; 8
    1798:	21 c0       	rjmp	.+66     	; 0x17dc <vfprintf+0xca>
    179a:	27 fd       	sbrc	r18, 7
    179c:	27 c0       	rjmp	.+78     	; 0x17ec <vfprintf+0xda>
    179e:	30 ed       	ldi	r19, 0xD0	; 208
    17a0:	38 0f       	add	r19, r24
    17a2:	3a 30       	cpi	r19, 0x0A	; 10
    17a4:	78 f4       	brcc	.+30     	; 0x17c4 <vfprintf+0xb2>
    17a6:	26 ff       	sbrs	r18, 6
    17a8:	06 c0       	rjmp	.+12     	; 0x17b6 <vfprintf+0xa4>
    17aa:	fa e0       	ldi	r31, 0x0A	; 10
    17ac:	5f 9e       	mul	r5, r31
    17ae:	30 0d       	add	r19, r0
    17b0:	11 24       	eor	r1, r1
    17b2:	53 2e       	mov	r5, r19
    17b4:	13 c0       	rjmp	.+38     	; 0x17dc <vfprintf+0xca>
    17b6:	8a e0       	ldi	r24, 0x0A	; 10
    17b8:	38 9e       	mul	r3, r24
    17ba:	30 0d       	add	r19, r0
    17bc:	11 24       	eor	r1, r1
    17be:	33 2e       	mov	r3, r19
    17c0:	20 62       	ori	r18, 0x20	; 32
    17c2:	0c c0       	rjmp	.+24     	; 0x17dc <vfprintf+0xca>
    17c4:	8e 32       	cpi	r24, 0x2E	; 46
    17c6:	21 f4       	brne	.+8      	; 0x17d0 <vfprintf+0xbe>
    17c8:	26 fd       	sbrc	r18, 6
    17ca:	6b c1       	rjmp	.+726    	; 0x1aa2 <vfprintf+0x390>
    17cc:	20 64       	ori	r18, 0x40	; 64
    17ce:	06 c0       	rjmp	.+12     	; 0x17dc <vfprintf+0xca>
    17d0:	8c 36       	cpi	r24, 0x6C	; 108
    17d2:	11 f4       	brne	.+4      	; 0x17d8 <vfprintf+0xc6>
    17d4:	20 68       	ori	r18, 0x80	; 128
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <vfprintf+0xca>
    17d8:	88 36       	cpi	r24, 0x68	; 104
    17da:	41 f4       	brne	.+16     	; 0x17ec <vfprintf+0xda>
    17dc:	f6 01       	movw	r30, r12
    17de:	93 fd       	sbrc	r25, 3
    17e0:	85 91       	lpm	r24, Z+
    17e2:	93 ff       	sbrs	r25, 3
    17e4:	81 91       	ld	r24, Z+
    17e6:	6f 01       	movw	r12, r30
    17e8:	81 11       	cpse	r24, r1
    17ea:	c1 cf       	rjmp	.-126    	; 0x176e <vfprintf+0x5c>
    17ec:	98 2f       	mov	r25, r24
    17ee:	9f 7d       	andi	r25, 0xDF	; 223
    17f0:	95 54       	subi	r25, 0x45	; 69
    17f2:	93 30       	cpi	r25, 0x03	; 3
    17f4:	28 f4       	brcc	.+10     	; 0x1800 <vfprintf+0xee>
    17f6:	0c 5f       	subi	r16, 0xFC	; 252
    17f8:	1f 4f       	sbci	r17, 0xFF	; 255
    17fa:	ff e3       	ldi	r31, 0x3F	; 63
    17fc:	f9 83       	std	Y+1, r31	; 0x01
    17fe:	0d c0       	rjmp	.+26     	; 0x181a <vfprintf+0x108>
    1800:	83 36       	cpi	r24, 0x63	; 99
    1802:	31 f0       	breq	.+12     	; 0x1810 <vfprintf+0xfe>
    1804:	83 37       	cpi	r24, 0x73	; 115
    1806:	71 f0       	breq	.+28     	; 0x1824 <vfprintf+0x112>
    1808:	83 35       	cpi	r24, 0x53	; 83
    180a:	09 f0       	breq	.+2      	; 0x180e <vfprintf+0xfc>
    180c:	5b c0       	rjmp	.+182    	; 0x18c4 <vfprintf+0x1b2>
    180e:	22 c0       	rjmp	.+68     	; 0x1854 <vfprintf+0x142>
    1810:	f8 01       	movw	r30, r16
    1812:	80 81       	ld	r24, Z
    1814:	89 83       	std	Y+1, r24	; 0x01
    1816:	0e 5f       	subi	r16, 0xFE	; 254
    1818:	1f 4f       	sbci	r17, 0xFF	; 255
    181a:	44 24       	eor	r4, r4
    181c:	43 94       	inc	r4
    181e:	51 2c       	mov	r5, r1
    1820:	54 01       	movw	r10, r8
    1822:	15 c0       	rjmp	.+42     	; 0x184e <vfprintf+0x13c>
    1824:	38 01       	movw	r6, r16
    1826:	f2 e0       	ldi	r31, 0x02	; 2
    1828:	6f 0e       	add	r6, r31
    182a:	71 1c       	adc	r7, r1
    182c:	f8 01       	movw	r30, r16
    182e:	a0 80       	ld	r10, Z
    1830:	b1 80       	ldd	r11, Z+1	; 0x01
    1832:	26 ff       	sbrs	r18, 6
    1834:	03 c0       	rjmp	.+6      	; 0x183c <vfprintf+0x12a>
    1836:	65 2d       	mov	r22, r5
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <vfprintf+0x12e>
    183c:	6f ef       	ldi	r22, 0xFF	; 255
    183e:	7f ef       	ldi	r23, 0xFF	; 255
    1840:	c5 01       	movw	r24, r10
    1842:	2c 87       	std	Y+12, r18	; 0x0c
    1844:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <strnlen>
    1848:	2c 01       	movw	r4, r24
    184a:	83 01       	movw	r16, r6
    184c:	2c 85       	ldd	r18, Y+12	; 0x0c
    184e:	2f 77       	andi	r18, 0x7F	; 127
    1850:	22 2e       	mov	r2, r18
    1852:	17 c0       	rjmp	.+46     	; 0x1882 <vfprintf+0x170>
    1854:	38 01       	movw	r6, r16
    1856:	f2 e0       	ldi	r31, 0x02	; 2
    1858:	6f 0e       	add	r6, r31
    185a:	71 1c       	adc	r7, r1
    185c:	f8 01       	movw	r30, r16
    185e:	a0 80       	ld	r10, Z
    1860:	b1 80       	ldd	r11, Z+1	; 0x01
    1862:	26 ff       	sbrs	r18, 6
    1864:	03 c0       	rjmp	.+6      	; 0x186c <vfprintf+0x15a>
    1866:	65 2d       	mov	r22, r5
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <vfprintf+0x15e>
    186c:	6f ef       	ldi	r22, 0xFF	; 255
    186e:	7f ef       	ldi	r23, 0xFF	; 255
    1870:	c5 01       	movw	r24, r10
    1872:	2c 87       	std	Y+12, r18	; 0x0c
    1874:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <strnlen_P>
    1878:	2c 01       	movw	r4, r24
    187a:	2c 85       	ldd	r18, Y+12	; 0x0c
    187c:	20 68       	ori	r18, 0x80	; 128
    187e:	22 2e       	mov	r2, r18
    1880:	83 01       	movw	r16, r6
    1882:	23 fc       	sbrc	r2, 3
    1884:	1b c0       	rjmp	.+54     	; 0x18bc <vfprintf+0x1aa>
    1886:	83 2d       	mov	r24, r3
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	48 16       	cp	r4, r24
    188c:	59 06       	cpc	r5, r25
    188e:	b0 f4       	brcc	.+44     	; 0x18bc <vfprintf+0x1aa>
    1890:	b7 01       	movw	r22, r14
    1892:	80 e2       	ldi	r24, 0x20	; 32
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <fputc>
    189a:	3a 94       	dec	r3
    189c:	f4 cf       	rjmp	.-24     	; 0x1886 <vfprintf+0x174>
    189e:	f5 01       	movw	r30, r10
    18a0:	27 fc       	sbrc	r2, 7
    18a2:	85 91       	lpm	r24, Z+
    18a4:	27 fe       	sbrs	r2, 7
    18a6:	81 91       	ld	r24, Z+
    18a8:	5f 01       	movw	r10, r30
    18aa:	b7 01       	movw	r22, r14
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <fputc>
    18b2:	31 10       	cpse	r3, r1
    18b4:	3a 94       	dec	r3
    18b6:	f1 e0       	ldi	r31, 0x01	; 1
    18b8:	4f 1a       	sub	r4, r31
    18ba:	51 08       	sbc	r5, r1
    18bc:	41 14       	cp	r4, r1
    18be:	51 04       	cpc	r5, r1
    18c0:	71 f7       	brne	.-36     	; 0x189e <vfprintf+0x18c>
    18c2:	e5 c0       	rjmp	.+458    	; 0x1a8e <vfprintf+0x37c>
    18c4:	84 36       	cpi	r24, 0x64	; 100
    18c6:	11 f0       	breq	.+4      	; 0x18cc <vfprintf+0x1ba>
    18c8:	89 36       	cpi	r24, 0x69	; 105
    18ca:	39 f5       	brne	.+78     	; 0x191a <vfprintf+0x208>
    18cc:	f8 01       	movw	r30, r16
    18ce:	27 ff       	sbrs	r18, 7
    18d0:	07 c0       	rjmp	.+14     	; 0x18e0 <vfprintf+0x1ce>
    18d2:	60 81       	ld	r22, Z
    18d4:	71 81       	ldd	r23, Z+1	; 0x01
    18d6:	82 81       	ldd	r24, Z+2	; 0x02
    18d8:	93 81       	ldd	r25, Z+3	; 0x03
    18da:	0c 5f       	subi	r16, 0xFC	; 252
    18dc:	1f 4f       	sbci	r17, 0xFF	; 255
    18de:	08 c0       	rjmp	.+16     	; 0x18f0 <vfprintf+0x1de>
    18e0:	60 81       	ld	r22, Z
    18e2:	71 81       	ldd	r23, Z+1	; 0x01
    18e4:	88 27       	eor	r24, r24
    18e6:	77 fd       	sbrc	r23, 7
    18e8:	80 95       	com	r24
    18ea:	98 2f       	mov	r25, r24
    18ec:	0e 5f       	subi	r16, 0xFE	; 254
    18ee:	1f 4f       	sbci	r17, 0xFF	; 255
    18f0:	2f 76       	andi	r18, 0x6F	; 111
    18f2:	b2 2e       	mov	r11, r18
    18f4:	97 ff       	sbrs	r25, 7
    18f6:	09 c0       	rjmp	.+18     	; 0x190a <vfprintf+0x1f8>
    18f8:	90 95       	com	r25
    18fa:	80 95       	com	r24
    18fc:	70 95       	com	r23
    18fe:	61 95       	neg	r22
    1900:	7f 4f       	sbci	r23, 0xFF	; 255
    1902:	8f 4f       	sbci	r24, 0xFF	; 255
    1904:	9f 4f       	sbci	r25, 0xFF	; 255
    1906:	20 68       	ori	r18, 0x80	; 128
    1908:	b2 2e       	mov	r11, r18
    190a:	2a e0       	ldi	r18, 0x0A	; 10
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	a4 01       	movw	r20, r8
    1910:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__ultoa_invert>
    1914:	a8 2e       	mov	r10, r24
    1916:	a8 18       	sub	r10, r8
    1918:	44 c0       	rjmp	.+136    	; 0x19a2 <vfprintf+0x290>
    191a:	85 37       	cpi	r24, 0x75	; 117
    191c:	29 f4       	brne	.+10     	; 0x1928 <vfprintf+0x216>
    191e:	2f 7e       	andi	r18, 0xEF	; 239
    1920:	b2 2e       	mov	r11, r18
    1922:	2a e0       	ldi	r18, 0x0A	; 10
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	25 c0       	rjmp	.+74     	; 0x1972 <vfprintf+0x260>
    1928:	f2 2f       	mov	r31, r18
    192a:	f9 7f       	andi	r31, 0xF9	; 249
    192c:	bf 2e       	mov	r11, r31
    192e:	8f 36       	cpi	r24, 0x6F	; 111
    1930:	c1 f0       	breq	.+48     	; 0x1962 <vfprintf+0x250>
    1932:	18 f4       	brcc	.+6      	; 0x193a <vfprintf+0x228>
    1934:	88 35       	cpi	r24, 0x58	; 88
    1936:	79 f0       	breq	.+30     	; 0x1956 <vfprintf+0x244>
    1938:	b4 c0       	rjmp	.+360    	; 0x1aa2 <vfprintf+0x390>
    193a:	80 37       	cpi	r24, 0x70	; 112
    193c:	19 f0       	breq	.+6      	; 0x1944 <vfprintf+0x232>
    193e:	88 37       	cpi	r24, 0x78	; 120
    1940:	21 f0       	breq	.+8      	; 0x194a <vfprintf+0x238>
    1942:	af c0       	rjmp	.+350    	; 0x1aa2 <vfprintf+0x390>
    1944:	2f 2f       	mov	r18, r31
    1946:	20 61       	ori	r18, 0x10	; 16
    1948:	b2 2e       	mov	r11, r18
    194a:	b4 fe       	sbrs	r11, 4
    194c:	0d c0       	rjmp	.+26     	; 0x1968 <vfprintf+0x256>
    194e:	8b 2d       	mov	r24, r11
    1950:	84 60       	ori	r24, 0x04	; 4
    1952:	b8 2e       	mov	r11, r24
    1954:	09 c0       	rjmp	.+18     	; 0x1968 <vfprintf+0x256>
    1956:	24 ff       	sbrs	r18, 4
    1958:	0a c0       	rjmp	.+20     	; 0x196e <vfprintf+0x25c>
    195a:	9f 2f       	mov	r25, r31
    195c:	96 60       	ori	r25, 0x06	; 6
    195e:	b9 2e       	mov	r11, r25
    1960:	06 c0       	rjmp	.+12     	; 0x196e <vfprintf+0x25c>
    1962:	28 e0       	ldi	r18, 0x08	; 8
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	05 c0       	rjmp	.+10     	; 0x1972 <vfprintf+0x260>
    1968:	20 e1       	ldi	r18, 0x10	; 16
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <vfprintf+0x260>
    196e:	20 e1       	ldi	r18, 0x10	; 16
    1970:	32 e0       	ldi	r19, 0x02	; 2
    1972:	f8 01       	movw	r30, r16
    1974:	b7 fe       	sbrs	r11, 7
    1976:	07 c0       	rjmp	.+14     	; 0x1986 <vfprintf+0x274>
    1978:	60 81       	ld	r22, Z
    197a:	71 81       	ldd	r23, Z+1	; 0x01
    197c:	82 81       	ldd	r24, Z+2	; 0x02
    197e:	93 81       	ldd	r25, Z+3	; 0x03
    1980:	0c 5f       	subi	r16, 0xFC	; 252
    1982:	1f 4f       	sbci	r17, 0xFF	; 255
    1984:	06 c0       	rjmp	.+12     	; 0x1992 <vfprintf+0x280>
    1986:	60 81       	ld	r22, Z
    1988:	71 81       	ldd	r23, Z+1	; 0x01
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	0e 5f       	subi	r16, 0xFE	; 254
    1990:	1f 4f       	sbci	r17, 0xFF	; 255
    1992:	a4 01       	movw	r20, r8
    1994:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <__ultoa_invert>
    1998:	a8 2e       	mov	r10, r24
    199a:	a8 18       	sub	r10, r8
    199c:	fb 2d       	mov	r31, r11
    199e:	ff 77       	andi	r31, 0x7F	; 127
    19a0:	bf 2e       	mov	r11, r31
    19a2:	b6 fe       	sbrs	r11, 6
    19a4:	0b c0       	rjmp	.+22     	; 0x19bc <vfprintf+0x2aa>
    19a6:	2b 2d       	mov	r18, r11
    19a8:	2e 7f       	andi	r18, 0xFE	; 254
    19aa:	a5 14       	cp	r10, r5
    19ac:	50 f4       	brcc	.+20     	; 0x19c2 <vfprintf+0x2b0>
    19ae:	b4 fe       	sbrs	r11, 4
    19b0:	0a c0       	rjmp	.+20     	; 0x19c6 <vfprintf+0x2b4>
    19b2:	b2 fc       	sbrc	r11, 2
    19b4:	08 c0       	rjmp	.+16     	; 0x19c6 <vfprintf+0x2b4>
    19b6:	2b 2d       	mov	r18, r11
    19b8:	2e 7e       	andi	r18, 0xEE	; 238
    19ba:	05 c0       	rjmp	.+10     	; 0x19c6 <vfprintf+0x2b4>
    19bc:	7a 2c       	mov	r7, r10
    19be:	2b 2d       	mov	r18, r11
    19c0:	03 c0       	rjmp	.+6      	; 0x19c8 <vfprintf+0x2b6>
    19c2:	7a 2c       	mov	r7, r10
    19c4:	01 c0       	rjmp	.+2      	; 0x19c8 <vfprintf+0x2b6>
    19c6:	75 2c       	mov	r7, r5
    19c8:	24 ff       	sbrs	r18, 4
    19ca:	0d c0       	rjmp	.+26     	; 0x19e6 <vfprintf+0x2d4>
    19cc:	fe 01       	movw	r30, r28
    19ce:	ea 0d       	add	r30, r10
    19d0:	f1 1d       	adc	r31, r1
    19d2:	80 81       	ld	r24, Z
    19d4:	80 33       	cpi	r24, 0x30	; 48
    19d6:	11 f4       	brne	.+4      	; 0x19dc <vfprintf+0x2ca>
    19d8:	29 7e       	andi	r18, 0xE9	; 233
    19da:	09 c0       	rjmp	.+18     	; 0x19ee <vfprintf+0x2dc>
    19dc:	22 ff       	sbrs	r18, 2
    19de:	06 c0       	rjmp	.+12     	; 0x19ec <vfprintf+0x2da>
    19e0:	73 94       	inc	r7
    19e2:	73 94       	inc	r7
    19e4:	04 c0       	rjmp	.+8      	; 0x19ee <vfprintf+0x2dc>
    19e6:	82 2f       	mov	r24, r18
    19e8:	86 78       	andi	r24, 0x86	; 134
    19ea:	09 f0       	breq	.+2      	; 0x19ee <vfprintf+0x2dc>
    19ec:	73 94       	inc	r7
    19ee:	23 fd       	sbrc	r18, 3
    19f0:	13 c0       	rjmp	.+38     	; 0x1a18 <vfprintf+0x306>
    19f2:	20 ff       	sbrs	r18, 0
    19f4:	06 c0       	rjmp	.+12     	; 0x1a02 <vfprintf+0x2f0>
    19f6:	5a 2c       	mov	r5, r10
    19f8:	73 14       	cp	r7, r3
    19fa:	18 f4       	brcc	.+6      	; 0x1a02 <vfprintf+0x2f0>
    19fc:	53 0c       	add	r5, r3
    19fe:	57 18       	sub	r5, r7
    1a00:	73 2c       	mov	r7, r3
    1a02:	73 14       	cp	r7, r3
    1a04:	68 f4       	brcc	.+26     	; 0x1a20 <vfprintf+0x30e>
    1a06:	b7 01       	movw	r22, r14
    1a08:	80 e2       	ldi	r24, 0x20	; 32
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	2c 87       	std	Y+12, r18	; 0x0c
    1a0e:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <fputc>
    1a12:	73 94       	inc	r7
    1a14:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a16:	f5 cf       	rjmp	.-22     	; 0x1a02 <vfprintf+0x2f0>
    1a18:	73 14       	cp	r7, r3
    1a1a:	10 f4       	brcc	.+4      	; 0x1a20 <vfprintf+0x30e>
    1a1c:	37 18       	sub	r3, r7
    1a1e:	01 c0       	rjmp	.+2      	; 0x1a22 <vfprintf+0x310>
    1a20:	31 2c       	mov	r3, r1
    1a22:	24 ff       	sbrs	r18, 4
    1a24:	12 c0       	rjmp	.+36     	; 0x1a4a <vfprintf+0x338>
    1a26:	b7 01       	movw	r22, r14
    1a28:	80 e3       	ldi	r24, 0x30	; 48
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	2c 87       	std	Y+12, r18	; 0x0c
    1a2e:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <fputc>
    1a32:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a34:	22 ff       	sbrs	r18, 2
    1a36:	17 c0       	rjmp	.+46     	; 0x1a66 <vfprintf+0x354>
    1a38:	21 ff       	sbrs	r18, 1
    1a3a:	03 c0       	rjmp	.+6      	; 0x1a42 <vfprintf+0x330>
    1a3c:	88 e5       	ldi	r24, 0x58	; 88
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <vfprintf+0x334>
    1a42:	88 e7       	ldi	r24, 0x78	; 120
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	b7 01       	movw	r22, r14
    1a48:	0c c0       	rjmp	.+24     	; 0x1a62 <vfprintf+0x350>
    1a4a:	82 2f       	mov	r24, r18
    1a4c:	86 78       	andi	r24, 0x86	; 134
    1a4e:	59 f0       	breq	.+22     	; 0x1a66 <vfprintf+0x354>
    1a50:	21 fd       	sbrc	r18, 1
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <vfprintf+0x346>
    1a54:	80 e2       	ldi	r24, 0x20	; 32
    1a56:	01 c0       	rjmp	.+2      	; 0x1a5a <vfprintf+0x348>
    1a58:	8b e2       	ldi	r24, 0x2B	; 43
    1a5a:	27 fd       	sbrc	r18, 7
    1a5c:	8d e2       	ldi	r24, 0x2D	; 45
    1a5e:	b7 01       	movw	r22, r14
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <fputc>
    1a66:	a5 14       	cp	r10, r5
    1a68:	38 f4       	brcc	.+14     	; 0x1a78 <vfprintf+0x366>
    1a6a:	b7 01       	movw	r22, r14
    1a6c:	80 e3       	ldi	r24, 0x30	; 48
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <fputc>
    1a74:	5a 94       	dec	r5
    1a76:	f7 cf       	rjmp	.-18     	; 0x1a66 <vfprintf+0x354>
    1a78:	aa 94       	dec	r10
    1a7a:	f4 01       	movw	r30, r8
    1a7c:	ea 0d       	add	r30, r10
    1a7e:	f1 1d       	adc	r31, r1
    1a80:	80 81       	ld	r24, Z
    1a82:	b7 01       	movw	r22, r14
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <fputc>
    1a8a:	a1 10       	cpse	r10, r1
    1a8c:	f5 cf       	rjmp	.-22     	; 0x1a78 <vfprintf+0x366>
    1a8e:	33 20       	and	r3, r3
    1a90:	09 f4       	brne	.+2      	; 0x1a94 <vfprintf+0x382>
    1a92:	51 ce       	rjmp	.-862    	; 0x1736 <vfprintf+0x24>
    1a94:	b7 01       	movw	r22, r14
    1a96:	80 e2       	ldi	r24, 0x20	; 32
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <fputc>
    1a9e:	3a 94       	dec	r3
    1aa0:	f6 cf       	rjmp	.-20     	; 0x1a8e <vfprintf+0x37c>
    1aa2:	f7 01       	movw	r30, r14
    1aa4:	86 81       	ldd	r24, Z+6	; 0x06
    1aa6:	97 81       	ldd	r25, Z+7	; 0x07
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <vfprintf+0x39c>
    1aaa:	8f ef       	ldi	r24, 0xFF	; 255
    1aac:	9f ef       	ldi	r25, 0xFF	; 255
    1aae:	2c 96       	adiw	r28, 0x0c	; 12
    1ab0:	e2 e1       	ldi	r30, 0x12	; 18
    1ab2:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__epilogue_restores__>

00001ab6 <calloc>:
    1ab6:	0f 93       	push	r16
    1ab8:	1f 93       	push	r17
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	86 9f       	mul	r24, r22
    1ac0:	80 01       	movw	r16, r0
    1ac2:	87 9f       	mul	r24, r23
    1ac4:	10 0d       	add	r17, r0
    1ac6:	96 9f       	mul	r25, r22
    1ac8:	10 0d       	add	r17, r0
    1aca:	11 24       	eor	r1, r1
    1acc:	c8 01       	movw	r24, r16
    1ace:	0e 94 77 0d 	call	0x1aee	; 0x1aee <malloc>
    1ad2:	ec 01       	movw	r28, r24
    1ad4:	00 97       	sbiw	r24, 0x00	; 0
    1ad6:	29 f0       	breq	.+10     	; 0x1ae2 <calloc+0x2c>
    1ad8:	a8 01       	movw	r20, r16
    1ada:	60 e0       	ldi	r22, 0x00	; 0
    1adc:	70 e0       	ldi	r23, 0x00	; 0
    1ade:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <memset>
    1ae2:	ce 01       	movw	r24, r28
    1ae4:	df 91       	pop	r29
    1ae6:	cf 91       	pop	r28
    1ae8:	1f 91       	pop	r17
    1aea:	0f 91       	pop	r16
    1aec:	08 95       	ret

00001aee <malloc>:
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	82 30       	cpi	r24, 0x02	; 2
    1af4:	91 05       	cpc	r25, r1
    1af6:	10 f4       	brcc	.+4      	; 0x1afc <malloc+0xe>
    1af8:	82 e0       	ldi	r24, 0x02	; 2
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	e0 91 e4 02 	lds	r30, 0x02E4
    1b00:	f0 91 e5 02 	lds	r31, 0x02E5
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	a0 e0       	ldi	r26, 0x00	; 0
    1b0a:	b0 e0       	ldi	r27, 0x00	; 0
    1b0c:	30 97       	sbiw	r30, 0x00	; 0
    1b0e:	39 f1       	breq	.+78     	; 0x1b5e <malloc+0x70>
    1b10:	40 81       	ld	r20, Z
    1b12:	51 81       	ldd	r21, Z+1	; 0x01
    1b14:	48 17       	cp	r20, r24
    1b16:	59 07       	cpc	r21, r25
    1b18:	b8 f0       	brcs	.+46     	; 0x1b48 <malloc+0x5a>
    1b1a:	48 17       	cp	r20, r24
    1b1c:	59 07       	cpc	r21, r25
    1b1e:	71 f4       	brne	.+28     	; 0x1b3c <malloc+0x4e>
    1b20:	82 81       	ldd	r24, Z+2	; 0x02
    1b22:	93 81       	ldd	r25, Z+3	; 0x03
    1b24:	10 97       	sbiw	r26, 0x00	; 0
    1b26:	29 f0       	breq	.+10     	; 0x1b32 <malloc+0x44>
    1b28:	13 96       	adiw	r26, 0x03	; 3
    1b2a:	9c 93       	st	X, r25
    1b2c:	8e 93       	st	-X, r24
    1b2e:	12 97       	sbiw	r26, 0x02	; 2
    1b30:	2c c0       	rjmp	.+88     	; 0x1b8a <malloc+0x9c>
    1b32:	90 93 e5 02 	sts	0x02E5, r25
    1b36:	80 93 e4 02 	sts	0x02E4, r24
    1b3a:	27 c0       	rjmp	.+78     	; 0x1b8a <malloc+0x9c>
    1b3c:	21 15       	cp	r18, r1
    1b3e:	31 05       	cpc	r19, r1
    1b40:	31 f0       	breq	.+12     	; 0x1b4e <malloc+0x60>
    1b42:	42 17       	cp	r20, r18
    1b44:	53 07       	cpc	r21, r19
    1b46:	18 f0       	brcs	.+6      	; 0x1b4e <malloc+0x60>
    1b48:	a9 01       	movw	r20, r18
    1b4a:	db 01       	movw	r26, r22
    1b4c:	01 c0       	rjmp	.+2      	; 0x1b50 <malloc+0x62>
    1b4e:	ef 01       	movw	r28, r30
    1b50:	9a 01       	movw	r18, r20
    1b52:	bd 01       	movw	r22, r26
    1b54:	df 01       	movw	r26, r30
    1b56:	02 80       	ldd	r0, Z+2	; 0x02
    1b58:	f3 81       	ldd	r31, Z+3	; 0x03
    1b5a:	e0 2d       	mov	r30, r0
    1b5c:	d7 cf       	rjmp	.-82     	; 0x1b0c <malloc+0x1e>
    1b5e:	21 15       	cp	r18, r1
    1b60:	31 05       	cpc	r19, r1
    1b62:	f9 f0       	breq	.+62     	; 0x1ba2 <malloc+0xb4>
    1b64:	28 1b       	sub	r18, r24
    1b66:	39 0b       	sbc	r19, r25
    1b68:	24 30       	cpi	r18, 0x04	; 4
    1b6a:	31 05       	cpc	r19, r1
    1b6c:	80 f4       	brcc	.+32     	; 0x1b8e <malloc+0xa0>
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	9b 81       	ldd	r25, Y+3	; 0x03
    1b72:	61 15       	cp	r22, r1
    1b74:	71 05       	cpc	r23, r1
    1b76:	21 f0       	breq	.+8      	; 0x1b80 <malloc+0x92>
    1b78:	fb 01       	movw	r30, r22
    1b7a:	93 83       	std	Z+3, r25	; 0x03
    1b7c:	82 83       	std	Z+2, r24	; 0x02
    1b7e:	04 c0       	rjmp	.+8      	; 0x1b88 <malloc+0x9a>
    1b80:	90 93 e5 02 	sts	0x02E5, r25
    1b84:	80 93 e4 02 	sts	0x02E4, r24
    1b88:	fe 01       	movw	r30, r28
    1b8a:	32 96       	adiw	r30, 0x02	; 2
    1b8c:	44 c0       	rjmp	.+136    	; 0x1c16 <malloc+0x128>
    1b8e:	fe 01       	movw	r30, r28
    1b90:	e2 0f       	add	r30, r18
    1b92:	f3 1f       	adc	r31, r19
    1b94:	81 93       	st	Z+, r24
    1b96:	91 93       	st	Z+, r25
    1b98:	22 50       	subi	r18, 0x02	; 2
    1b9a:	31 09       	sbc	r19, r1
    1b9c:	39 83       	std	Y+1, r19	; 0x01
    1b9e:	28 83       	st	Y, r18
    1ba0:	3a c0       	rjmp	.+116    	; 0x1c16 <malloc+0x128>
    1ba2:	20 91 e2 02 	lds	r18, 0x02E2
    1ba6:	30 91 e3 02 	lds	r19, 0x02E3
    1baa:	23 2b       	or	r18, r19
    1bac:	41 f4       	brne	.+16     	; 0x1bbe <malloc+0xd0>
    1bae:	20 91 02 01 	lds	r18, 0x0102
    1bb2:	30 91 03 01 	lds	r19, 0x0103
    1bb6:	30 93 e3 02 	sts	0x02E3, r19
    1bba:	20 93 e2 02 	sts	0x02E2, r18
    1bbe:	20 91 00 01 	lds	r18, 0x0100
    1bc2:	30 91 01 01 	lds	r19, 0x0101
    1bc6:	21 15       	cp	r18, r1
    1bc8:	31 05       	cpc	r19, r1
    1bca:	41 f4       	brne	.+16     	; 0x1bdc <malloc+0xee>
    1bcc:	2d b7       	in	r18, 0x3d	; 61
    1bce:	3e b7       	in	r19, 0x3e	; 62
    1bd0:	40 91 04 01 	lds	r20, 0x0104
    1bd4:	50 91 05 01 	lds	r21, 0x0105
    1bd8:	24 1b       	sub	r18, r20
    1bda:	35 0b       	sbc	r19, r21
    1bdc:	e0 91 e2 02 	lds	r30, 0x02E2
    1be0:	f0 91 e3 02 	lds	r31, 0x02E3
    1be4:	e2 17       	cp	r30, r18
    1be6:	f3 07       	cpc	r31, r19
    1be8:	a0 f4       	brcc	.+40     	; 0x1c12 <malloc+0x124>
    1bea:	2e 1b       	sub	r18, r30
    1bec:	3f 0b       	sbc	r19, r31
    1bee:	28 17       	cp	r18, r24
    1bf0:	39 07       	cpc	r19, r25
    1bf2:	78 f0       	brcs	.+30     	; 0x1c12 <malloc+0x124>
    1bf4:	ac 01       	movw	r20, r24
    1bf6:	4e 5f       	subi	r20, 0xFE	; 254
    1bf8:	5f 4f       	sbci	r21, 0xFF	; 255
    1bfa:	24 17       	cp	r18, r20
    1bfc:	35 07       	cpc	r19, r21
    1bfe:	48 f0       	brcs	.+18     	; 0x1c12 <malloc+0x124>
    1c00:	4e 0f       	add	r20, r30
    1c02:	5f 1f       	adc	r21, r31
    1c04:	50 93 e3 02 	sts	0x02E3, r21
    1c08:	40 93 e2 02 	sts	0x02E2, r20
    1c0c:	81 93       	st	Z+, r24
    1c0e:	91 93       	st	Z+, r25
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <malloc+0x128>
    1c12:	e0 e0       	ldi	r30, 0x00	; 0
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	cf 01       	movw	r24, r30
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	08 95       	ret

00001c1e <free>:
    1c1e:	cf 93       	push	r28
    1c20:	df 93       	push	r29
    1c22:	00 97       	sbiw	r24, 0x00	; 0
    1c24:	09 f4       	brne	.+2      	; 0x1c28 <free+0xa>
    1c26:	87 c0       	rjmp	.+270    	; 0x1d36 <free+0x118>
    1c28:	fc 01       	movw	r30, r24
    1c2a:	32 97       	sbiw	r30, 0x02	; 2
    1c2c:	13 82       	std	Z+3, r1	; 0x03
    1c2e:	12 82       	std	Z+2, r1	; 0x02
    1c30:	c0 91 e4 02 	lds	r28, 0x02E4
    1c34:	d0 91 e5 02 	lds	r29, 0x02E5
    1c38:	20 97       	sbiw	r28, 0x00	; 0
    1c3a:	81 f4       	brne	.+32     	; 0x1c5c <free+0x3e>
    1c3c:	20 81       	ld	r18, Z
    1c3e:	31 81       	ldd	r19, Z+1	; 0x01
    1c40:	28 0f       	add	r18, r24
    1c42:	39 1f       	adc	r19, r25
    1c44:	80 91 e2 02 	lds	r24, 0x02E2
    1c48:	90 91 e3 02 	lds	r25, 0x02E3
    1c4c:	82 17       	cp	r24, r18
    1c4e:	93 07       	cpc	r25, r19
    1c50:	79 f5       	brne	.+94     	; 0x1cb0 <free+0x92>
    1c52:	f0 93 e3 02 	sts	0x02E3, r31
    1c56:	e0 93 e2 02 	sts	0x02E2, r30
    1c5a:	6d c0       	rjmp	.+218    	; 0x1d36 <free+0x118>
    1c5c:	de 01       	movw	r26, r28
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	ae 17       	cp	r26, r30
    1c64:	bf 07       	cpc	r27, r31
    1c66:	50 f4       	brcc	.+20     	; 0x1c7c <free+0x5e>
    1c68:	12 96       	adiw	r26, 0x02	; 2
    1c6a:	4d 91       	ld	r20, X+
    1c6c:	5c 91       	ld	r21, X
    1c6e:	13 97       	sbiw	r26, 0x03	; 3
    1c70:	9d 01       	movw	r18, r26
    1c72:	41 15       	cp	r20, r1
    1c74:	51 05       	cpc	r21, r1
    1c76:	09 f1       	breq	.+66     	; 0x1cba <free+0x9c>
    1c78:	da 01       	movw	r26, r20
    1c7a:	f3 cf       	rjmp	.-26     	; 0x1c62 <free+0x44>
    1c7c:	b3 83       	std	Z+3, r27	; 0x03
    1c7e:	a2 83       	std	Z+2, r26	; 0x02
    1c80:	40 81       	ld	r20, Z
    1c82:	51 81       	ldd	r21, Z+1	; 0x01
    1c84:	84 0f       	add	r24, r20
    1c86:	95 1f       	adc	r25, r21
    1c88:	8a 17       	cp	r24, r26
    1c8a:	9b 07       	cpc	r25, r27
    1c8c:	71 f4       	brne	.+28     	; 0x1caa <free+0x8c>
    1c8e:	8d 91       	ld	r24, X+
    1c90:	9c 91       	ld	r25, X
    1c92:	11 97       	sbiw	r26, 0x01	; 1
    1c94:	84 0f       	add	r24, r20
    1c96:	95 1f       	adc	r25, r21
    1c98:	02 96       	adiw	r24, 0x02	; 2
    1c9a:	91 83       	std	Z+1, r25	; 0x01
    1c9c:	80 83       	st	Z, r24
    1c9e:	12 96       	adiw	r26, 0x02	; 2
    1ca0:	8d 91       	ld	r24, X+
    1ca2:	9c 91       	ld	r25, X
    1ca4:	13 97       	sbiw	r26, 0x03	; 3
    1ca6:	93 83       	std	Z+3, r25	; 0x03
    1ca8:	82 83       	std	Z+2, r24	; 0x02
    1caa:	21 15       	cp	r18, r1
    1cac:	31 05       	cpc	r19, r1
    1cae:	29 f4       	brne	.+10     	; 0x1cba <free+0x9c>
    1cb0:	f0 93 e5 02 	sts	0x02E5, r31
    1cb4:	e0 93 e4 02 	sts	0x02E4, r30
    1cb8:	3e c0       	rjmp	.+124    	; 0x1d36 <free+0x118>
    1cba:	d9 01       	movw	r26, r18
    1cbc:	13 96       	adiw	r26, 0x03	; 3
    1cbe:	fc 93       	st	X, r31
    1cc0:	ee 93       	st	-X, r30
    1cc2:	12 97       	sbiw	r26, 0x02	; 2
    1cc4:	4d 91       	ld	r20, X+
    1cc6:	5d 91       	ld	r21, X+
    1cc8:	a4 0f       	add	r26, r20
    1cca:	b5 1f       	adc	r27, r21
    1ccc:	ea 17       	cp	r30, r26
    1cce:	fb 07       	cpc	r31, r27
    1cd0:	79 f4       	brne	.+30     	; 0x1cf0 <free+0xd2>
    1cd2:	80 81       	ld	r24, Z
    1cd4:	91 81       	ldd	r25, Z+1	; 0x01
    1cd6:	84 0f       	add	r24, r20
    1cd8:	95 1f       	adc	r25, r21
    1cda:	02 96       	adiw	r24, 0x02	; 2
    1cdc:	d9 01       	movw	r26, r18
    1cde:	11 96       	adiw	r26, 0x01	; 1
    1ce0:	9c 93       	st	X, r25
    1ce2:	8e 93       	st	-X, r24
    1ce4:	82 81       	ldd	r24, Z+2	; 0x02
    1ce6:	93 81       	ldd	r25, Z+3	; 0x03
    1ce8:	13 96       	adiw	r26, 0x03	; 3
    1cea:	9c 93       	st	X, r25
    1cec:	8e 93       	st	-X, r24
    1cee:	12 97       	sbiw	r26, 0x02	; 2
    1cf0:	e0 e0       	ldi	r30, 0x00	; 0
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf6:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf8:	00 97       	sbiw	r24, 0x00	; 0
    1cfa:	19 f0       	breq	.+6      	; 0x1d02 <free+0xe4>
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	ec 01       	movw	r28, r24
    1d00:	f9 cf       	rjmp	.-14     	; 0x1cf4 <free+0xd6>
    1d02:	ce 01       	movw	r24, r28
    1d04:	02 96       	adiw	r24, 0x02	; 2
    1d06:	28 81       	ld	r18, Y
    1d08:	39 81       	ldd	r19, Y+1	; 0x01
    1d0a:	82 0f       	add	r24, r18
    1d0c:	93 1f       	adc	r25, r19
    1d0e:	20 91 e2 02 	lds	r18, 0x02E2
    1d12:	30 91 e3 02 	lds	r19, 0x02E3
    1d16:	28 17       	cp	r18, r24
    1d18:	39 07       	cpc	r19, r25
    1d1a:	69 f4       	brne	.+26     	; 0x1d36 <free+0x118>
    1d1c:	30 97       	sbiw	r30, 0x00	; 0
    1d1e:	29 f4       	brne	.+10     	; 0x1d2a <free+0x10c>
    1d20:	10 92 e5 02 	sts	0x02E5, r1
    1d24:	10 92 e4 02 	sts	0x02E4, r1
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <free+0x110>
    1d2a:	13 82       	std	Z+3, r1	; 0x03
    1d2c:	12 82       	std	Z+2, r1	; 0x02
    1d2e:	d0 93 e3 02 	sts	0x02E3, r29
    1d32:	c0 93 e2 02 	sts	0x02E2, r28
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	08 95       	ret

00001d3c <strnlen_P>:
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	05 90       	lpm	r0, Z+
    1d40:	61 50       	subi	r22, 0x01	; 1
    1d42:	70 40       	sbci	r23, 0x00	; 0
    1d44:	01 10       	cpse	r0, r1
    1d46:	d8 f7       	brcc	.-10     	; 0x1d3e <strnlen_P+0x2>
    1d48:	80 95       	com	r24
    1d4a:	90 95       	com	r25
    1d4c:	8e 0f       	add	r24, r30
    1d4e:	9f 1f       	adc	r25, r31
    1d50:	08 95       	ret

00001d52 <memset>:
    1d52:	dc 01       	movw	r26, r24
    1d54:	01 c0       	rjmp	.+2      	; 0x1d58 <memset+0x6>
    1d56:	6d 93       	st	X+, r22
    1d58:	41 50       	subi	r20, 0x01	; 1
    1d5a:	50 40       	sbci	r21, 0x00	; 0
    1d5c:	e0 f7       	brcc	.-8      	; 0x1d56 <memset+0x4>
    1d5e:	08 95       	ret

00001d60 <strnlen>:
    1d60:	fc 01       	movw	r30, r24
    1d62:	61 50       	subi	r22, 0x01	; 1
    1d64:	70 40       	sbci	r23, 0x00	; 0
    1d66:	01 90       	ld	r0, Z+
    1d68:	01 10       	cpse	r0, r1
    1d6a:	d8 f7       	brcc	.-10     	; 0x1d62 <strnlen+0x2>
    1d6c:	80 95       	com	r24
    1d6e:	90 95       	com	r25
    1d70:	8e 0f       	add	r24, r30
    1d72:	9f 1f       	adc	r25, r31
    1d74:	08 95       	ret

00001d76 <strrev>:
    1d76:	dc 01       	movw	r26, r24
    1d78:	fc 01       	movw	r30, r24
    1d7a:	67 2f       	mov	r22, r23
    1d7c:	71 91       	ld	r23, Z+
    1d7e:	77 23       	and	r23, r23
    1d80:	e1 f7       	brne	.-8      	; 0x1d7a <strrev+0x4>
    1d82:	32 97       	sbiw	r30, 0x02	; 2
    1d84:	04 c0       	rjmp	.+8      	; 0x1d8e <strrev+0x18>
    1d86:	7c 91       	ld	r23, X
    1d88:	6d 93       	st	X+, r22
    1d8a:	70 83       	st	Z, r23
    1d8c:	62 91       	ld	r22, -Z
    1d8e:	ae 17       	cp	r26, r30
    1d90:	bf 07       	cpc	r27, r31
    1d92:	c8 f3       	brcs	.-14     	; 0x1d86 <strrev+0x10>
    1d94:	08 95       	ret

00001d96 <fputc>:
    1d96:	0f 93       	push	r16
    1d98:	1f 93       	push	r17
    1d9a:	cf 93       	push	r28
    1d9c:	df 93       	push	r29
    1d9e:	18 2f       	mov	r17, r24
    1da0:	09 2f       	mov	r16, r25
    1da2:	eb 01       	movw	r28, r22
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	81 fd       	sbrc	r24, 1
    1da8:	03 c0       	rjmp	.+6      	; 0x1db0 <fputc+0x1a>
    1daa:	8f ef       	ldi	r24, 0xFF	; 255
    1dac:	9f ef       	ldi	r25, 0xFF	; 255
    1dae:	20 c0       	rjmp	.+64     	; 0x1df0 <fputc+0x5a>
    1db0:	82 ff       	sbrs	r24, 2
    1db2:	10 c0       	rjmp	.+32     	; 0x1dd4 <fputc+0x3e>
    1db4:	4e 81       	ldd	r20, Y+6	; 0x06
    1db6:	5f 81       	ldd	r21, Y+7	; 0x07
    1db8:	2c 81       	ldd	r18, Y+4	; 0x04
    1dba:	3d 81       	ldd	r19, Y+5	; 0x05
    1dbc:	42 17       	cp	r20, r18
    1dbe:	53 07       	cpc	r21, r19
    1dc0:	7c f4       	brge	.+30     	; 0x1de0 <fputc+0x4a>
    1dc2:	e8 81       	ld	r30, Y
    1dc4:	f9 81       	ldd	r31, Y+1	; 0x01
    1dc6:	9f 01       	movw	r18, r30
    1dc8:	2f 5f       	subi	r18, 0xFF	; 255
    1dca:	3f 4f       	sbci	r19, 0xFF	; 255
    1dcc:	39 83       	std	Y+1, r19	; 0x01
    1dce:	28 83       	st	Y, r18
    1dd0:	10 83       	st	Z, r17
    1dd2:	06 c0       	rjmp	.+12     	; 0x1de0 <fputc+0x4a>
    1dd4:	e8 85       	ldd	r30, Y+8	; 0x08
    1dd6:	f9 85       	ldd	r31, Y+9	; 0x09
    1dd8:	81 2f       	mov	r24, r17
    1dda:	09 95       	icall
    1ddc:	89 2b       	or	r24, r25
    1dde:	29 f7       	brne	.-54     	; 0x1daa <fputc+0x14>
    1de0:	2e 81       	ldd	r18, Y+6	; 0x06
    1de2:	3f 81       	ldd	r19, Y+7	; 0x07
    1de4:	2f 5f       	subi	r18, 0xFF	; 255
    1de6:	3f 4f       	sbci	r19, 0xFF	; 255
    1de8:	3f 83       	std	Y+7, r19	; 0x07
    1dea:	2e 83       	std	Y+6, r18	; 0x06
    1dec:	81 2f       	mov	r24, r17
    1dee:	90 2f       	mov	r25, r16
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	08 95       	ret

00001dfa <__ultoa_invert>:
    1dfa:	fa 01       	movw	r30, r20
    1dfc:	aa 27       	eor	r26, r26
    1dfe:	28 30       	cpi	r18, 0x08	; 8
    1e00:	51 f1       	breq	.+84     	; 0x1e56 <__ultoa_invert+0x5c>
    1e02:	20 31       	cpi	r18, 0x10	; 16
    1e04:	81 f1       	breq	.+96     	; 0x1e66 <__ultoa_invert+0x6c>
    1e06:	e8 94       	clt
    1e08:	6f 93       	push	r22
    1e0a:	6e 7f       	andi	r22, 0xFE	; 254
    1e0c:	6e 5f       	subi	r22, 0xFE	; 254
    1e0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1e10:	8f 4f       	sbci	r24, 0xFF	; 255
    1e12:	9f 4f       	sbci	r25, 0xFF	; 255
    1e14:	af 4f       	sbci	r26, 0xFF	; 255
    1e16:	b1 e0       	ldi	r27, 0x01	; 1
    1e18:	3e d0       	rcall	.+124    	; 0x1e96 <__ultoa_invert+0x9c>
    1e1a:	b4 e0       	ldi	r27, 0x04	; 4
    1e1c:	3c d0       	rcall	.+120    	; 0x1e96 <__ultoa_invert+0x9c>
    1e1e:	67 0f       	add	r22, r23
    1e20:	78 1f       	adc	r23, r24
    1e22:	89 1f       	adc	r24, r25
    1e24:	9a 1f       	adc	r25, r26
    1e26:	a1 1d       	adc	r26, r1
    1e28:	68 0f       	add	r22, r24
    1e2a:	79 1f       	adc	r23, r25
    1e2c:	8a 1f       	adc	r24, r26
    1e2e:	91 1d       	adc	r25, r1
    1e30:	a1 1d       	adc	r26, r1
    1e32:	6a 0f       	add	r22, r26
    1e34:	71 1d       	adc	r23, r1
    1e36:	81 1d       	adc	r24, r1
    1e38:	91 1d       	adc	r25, r1
    1e3a:	a1 1d       	adc	r26, r1
    1e3c:	20 d0       	rcall	.+64     	; 0x1e7e <__ultoa_invert+0x84>
    1e3e:	09 f4       	brne	.+2      	; 0x1e42 <__ultoa_invert+0x48>
    1e40:	68 94       	set
    1e42:	3f 91       	pop	r19
    1e44:	2a e0       	ldi	r18, 0x0A	; 10
    1e46:	26 9f       	mul	r18, r22
    1e48:	11 24       	eor	r1, r1
    1e4a:	30 19       	sub	r19, r0
    1e4c:	30 5d       	subi	r19, 0xD0	; 208
    1e4e:	31 93       	st	Z+, r19
    1e50:	de f6       	brtc	.-74     	; 0x1e08 <__ultoa_invert+0xe>
    1e52:	cf 01       	movw	r24, r30
    1e54:	08 95       	ret
    1e56:	46 2f       	mov	r20, r22
    1e58:	47 70       	andi	r20, 0x07	; 7
    1e5a:	40 5d       	subi	r20, 0xD0	; 208
    1e5c:	41 93       	st	Z+, r20
    1e5e:	b3 e0       	ldi	r27, 0x03	; 3
    1e60:	0f d0       	rcall	.+30     	; 0x1e80 <__ultoa_invert+0x86>
    1e62:	c9 f7       	brne	.-14     	; 0x1e56 <__ultoa_invert+0x5c>
    1e64:	f6 cf       	rjmp	.-20     	; 0x1e52 <__ultoa_invert+0x58>
    1e66:	46 2f       	mov	r20, r22
    1e68:	4f 70       	andi	r20, 0x0F	; 15
    1e6a:	40 5d       	subi	r20, 0xD0	; 208
    1e6c:	4a 33       	cpi	r20, 0x3A	; 58
    1e6e:	18 f0       	brcs	.+6      	; 0x1e76 <__ultoa_invert+0x7c>
    1e70:	49 5d       	subi	r20, 0xD9	; 217
    1e72:	31 fd       	sbrc	r19, 1
    1e74:	40 52       	subi	r20, 0x20	; 32
    1e76:	41 93       	st	Z+, r20
    1e78:	02 d0       	rcall	.+4      	; 0x1e7e <__ultoa_invert+0x84>
    1e7a:	a9 f7       	brne	.-22     	; 0x1e66 <__ultoa_invert+0x6c>
    1e7c:	ea cf       	rjmp	.-44     	; 0x1e52 <__ultoa_invert+0x58>
    1e7e:	b4 e0       	ldi	r27, 0x04	; 4
    1e80:	a6 95       	lsr	r26
    1e82:	97 95       	ror	r25
    1e84:	87 95       	ror	r24
    1e86:	77 95       	ror	r23
    1e88:	67 95       	ror	r22
    1e8a:	ba 95       	dec	r27
    1e8c:	c9 f7       	brne	.-14     	; 0x1e80 <__ultoa_invert+0x86>
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	61 05       	cpc	r22, r1
    1e92:	71 05       	cpc	r23, r1
    1e94:	08 95       	ret
    1e96:	9b 01       	movw	r18, r22
    1e98:	ac 01       	movw	r20, r24
    1e9a:	0a 2e       	mov	r0, r26
    1e9c:	06 94       	lsr	r0
    1e9e:	57 95       	ror	r21
    1ea0:	47 95       	ror	r20
    1ea2:	37 95       	ror	r19
    1ea4:	27 95       	ror	r18
    1ea6:	ba 95       	dec	r27
    1ea8:	c9 f7       	brne	.-14     	; 0x1e9c <__ultoa_invert+0xa2>
    1eaa:	62 0f       	add	r22, r18
    1eac:	73 1f       	adc	r23, r19
    1eae:	84 1f       	adc	r24, r20
    1eb0:	95 1f       	adc	r25, r21
    1eb2:	a0 1d       	adc	r26, r0
    1eb4:	08 95       	ret

00001eb6 <__prologue_saves__>:
    1eb6:	2f 92       	push	r2
    1eb8:	3f 92       	push	r3
    1eba:	4f 92       	push	r4
    1ebc:	5f 92       	push	r5
    1ebe:	6f 92       	push	r6
    1ec0:	7f 92       	push	r7
    1ec2:	8f 92       	push	r8
    1ec4:	9f 92       	push	r9
    1ec6:	af 92       	push	r10
    1ec8:	bf 92       	push	r11
    1eca:	cf 92       	push	r12
    1ecc:	df 92       	push	r13
    1ece:	ef 92       	push	r14
    1ed0:	ff 92       	push	r15
    1ed2:	0f 93       	push	r16
    1ed4:	1f 93       	push	r17
    1ed6:	cf 93       	push	r28
    1ed8:	df 93       	push	r29
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	ca 1b       	sub	r28, r26
    1ee0:	db 0b       	sbc	r29, r27
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	f8 94       	cli
    1ee6:	de bf       	out	0x3e, r29	; 62
    1ee8:	0f be       	out	0x3f, r0	; 63
    1eea:	cd bf       	out	0x3d, r28	; 61
    1eec:	09 94       	ijmp

00001eee <__epilogue_restores__>:
    1eee:	2a 88       	ldd	r2, Y+18	; 0x12
    1ef0:	39 88       	ldd	r3, Y+17	; 0x11
    1ef2:	48 88       	ldd	r4, Y+16	; 0x10
    1ef4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ef6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ef8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1efa:	8c 84       	ldd	r8, Y+12	; 0x0c
    1efc:	9b 84       	ldd	r9, Y+11	; 0x0b
    1efe:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f00:	b9 84       	ldd	r11, Y+9	; 0x09
    1f02:	c8 84       	ldd	r12, Y+8	; 0x08
    1f04:	df 80       	ldd	r13, Y+7	; 0x07
    1f06:	ee 80       	ldd	r14, Y+6	; 0x06
    1f08:	fd 80       	ldd	r15, Y+5	; 0x05
    1f0a:	0c 81       	ldd	r16, Y+4	; 0x04
    1f0c:	1b 81       	ldd	r17, Y+3	; 0x03
    1f0e:	aa 81       	ldd	r26, Y+2	; 0x02
    1f10:	b9 81       	ldd	r27, Y+1	; 0x01
    1f12:	ce 0f       	add	r28, r30
    1f14:	d1 1d       	adc	r29, r1
    1f16:	0f b6       	in	r0, 0x3f	; 63
    1f18:	f8 94       	cli
    1f1a:	de bf       	out	0x3e, r29	; 62
    1f1c:	0f be       	out	0x3f, r0	; 63
    1f1e:	cd bf       	out	0x3d, r28	; 61
    1f20:	ed 01       	movw	r28, r26
    1f22:	08 95       	ret

00001f24 <_exit>:
    1f24:	f8 94       	cli

00001f26 <__stop_program>:
    1f26:	ff cf       	rjmp	.-2      	; 0x1f26 <__stop_program>
