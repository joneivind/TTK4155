
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000102  00800100  000019e0  00001a74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f0  00800202  00800202  00001b76  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b76  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000278  00000000  00000000  00001ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002df5  00000000  00000000  00001e1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001024  00000000  00000000  00004c13  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f8e  00000000  00000000  00005c37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000794  00000000  00000000  00006bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007c7  00000000  00000000  0000735c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001af3  00000000  00000000  00007b23  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000250  00000000  00000000  00009616  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <menuInit+0xea>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e0 ee       	ldi	r30, 0xE0	; 224
     37c:	f9 e1       	ldi	r31, 0x19	; 25
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a2 30       	cpi	r26, 0x02	; 2
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a2 e0       	ldi	r26, 0x02	; 2
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a2 3f       	cpi	r26, 0xF2	; 242
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 a2 06 	call	0xd44	; 0xd44 <main>
     39e:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <adc>:

// ADC read from channel
int adc(int channel){	
	char selectedAxis;
	// Swicth-case depending on MUX channel 	
	switch (channel)
     3a6:	83 30       	cpi	r24, 0x03	; 3
     3a8:	91 05       	cpc	r25, r1
     3aa:	39 f0       	breq	.+14     	; 0x3ba <adc+0x14>
     3ac:	84 30       	cpi	r24, 0x04	; 4
     3ae:	91 05       	cpc	r25, r1
     3b0:	31 f0       	breq	.+12     	; 0x3be <adc+0x18>
     3b2:	02 97       	sbiw	r24, 0x02	; 2
     3b4:	31 f0       	breq	.+12     	; 0x3c2 <adc+0x1c>
	{
		case 1:
		selectedAxis = 0b00000100;
     3b6:	84 e0       	ldi	r24, 0x04	; 4
     3b8:	05 c0       	rjmp	.+10     	; 0x3c4 <adc+0x1e>
		case 2:
		selectedAxis = 0b00000101;
		break;
		
		case 3:
		selectedAxis = 0b00000110;
     3ba:	86 e0       	ldi	r24, 0x06	; 6
		break;
     3bc:	03 c0       	rjmp	.+6      	; 0x3c4 <adc+0x1e>
		
		case 4:
		selectedAxis = 0b00000111;
     3be:	87 e0       	ldi	r24, 0x07	; 7
		break;
     3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <adc+0x1e>
		case 1:
		selectedAxis = 0b00000100;
		break;
		
		case 2:
		selectedAxis = 0b00000101;
     3c2:	85 e0       	ldi	r24, 0x05	; 5
		default:
		selectedAxis = 0b00000100;
		break;
	}
	
	*adcPointer = selectedAxis;
     3c4:	e0 91 06 01 	lds	r30, 0x0106
     3c8:	f0 91 07 01 	lds	r31, 0x0107
     3cc:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ce:	8f ef       	ldi	r24, 0xFF	; 255
     3d0:	9f e2       	ldi	r25, 0x2F	; 47
     3d2:	01 97       	sbiw	r24, 0x01	; 1
     3d4:	f1 f7       	brne	.-4      	; 0x3d2 <adc+0x2c>
     3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <adc+0x32>
     3d8:	00 00       	nop
	
	_delay_ms(10);
	
	return adcPointer[0];
     3da:	e0 91 06 01 	lds	r30, 0x0106
     3de:	f0 91 07 01 	lds	r31, 0x0107
     3e2:	80 81       	ld	r24, Z
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	08 95       	ret

000003e8 <CAN_setMode>:
	//CAN_setMode(MODE_LOOPBACK);
	CAN_setMode(MODE_NORMAL);
}

void CAN_setMode(char mode){
	MCP_bitMod(MCP_CANCTRL,MODE_MASK,mode);
     3e8:	48 2f       	mov	r20, r24
     3ea:	60 ee       	ldi	r22, 0xE0	; 224
     3ec:	8f e0       	ldi	r24, 0x0F	; 15
     3ee:	0e 94 ab 03 	call	0x756	; 0x756 <MCP_bitMod>
     3f2:	08 95       	ret

000003f4 <CAN_init>:
#include "MCP2515.h"
#include <string.h>
#include <util/delay.h>

void CAN_init(){
	MCP_init();
     3f4:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <MCP_init>
	//CAN_setMode(MODE_LOOPBACK);
	CAN_setMode(MODE_NORMAL);
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <CAN_setMode>
     3fe:	08 95       	ret

00000400 <CAN_sendMessage>:

void CAN_setMode(char mode){
	MCP_bitMod(MCP_CANCTRL,MODE_MASK,mode);
}

void CAN_sendMessage(CAN_message * newMessage){
     400:	ef 92       	push	r14
     402:	ff 92       	push	r15
     404:	0f 93       	push	r16
     406:	1f 93       	push	r17
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
     40c:	7c 01       	movw	r14, r24
	MCP_write(MCP_TXB0SIDL, (newMessage->id << 5));
     40e:	fc 01       	movw	r30, r24
     410:	60 81       	ld	r22, Z
     412:	62 95       	swap	r22
     414:	66 0f       	add	r22, r22
     416:	60 7e       	andi	r22, 0xE0	; 224
     418:	82 e3       	ldi	r24, 0x32	; 50
     41a:	0e 94 87 03 	call	0x70e	; 0x70e <MCP_write>
	MCP_write(MCP_TXB0SIDH, (newMessage->id >> 3));
     41e:	f7 01       	movw	r30, r14
     420:	60 81       	ld	r22, Z
     422:	66 95       	lsr	r22
     424:	66 95       	lsr	r22
     426:	66 95       	lsr	r22
     428:	81 e3       	ldi	r24, 0x31	; 49
     42a:	0e 94 87 03 	call	0x70e	; 0x70e <MCP_write>
	MCP_write(MCP_TXB0DLC, newMessage->length);
     42e:	f7 01       	movw	r30, r14
     430:	61 81       	ldd	r22, Z+1	; 0x01
     432:	85 e3       	ldi	r24, 0x35	; 53
     434:	0e 94 87 03 	call	0x70e	; 0x70e <MCP_write>
	
	for(int i=0; i<newMessage->length; i++){
     438:	f7 01       	movw	r30, r14
     43a:	81 81       	ldd	r24, Z+1	; 0x01
     43c:	88 23       	and	r24, r24
     43e:	99 f0       	breq	.+38     	; 0x466 <CAN_sendMessage+0x66>
     440:	87 01       	movw	r16, r14
     442:	0e 5f       	subi	r16, 0xFE	; 254
     444:	1f 4f       	sbci	r17, 0xFF	; 255
     446:	c0 e0       	ldi	r28, 0x00	; 0
     448:	d0 e0       	ldi	r29, 0x00	; 0
		MCP_write(MCP_TXB0D0 + i, newMessage->data[i]);
     44a:	f8 01       	movw	r30, r16
     44c:	61 91       	ld	r22, Z+
     44e:	8f 01       	movw	r16, r30
     450:	8c 2f       	mov	r24, r28
     452:	8a 5c       	subi	r24, 0xCA	; 202
     454:	0e 94 87 03 	call	0x70e	; 0x70e <MCP_write>
void CAN_sendMessage(CAN_message * newMessage){
	MCP_write(MCP_TXB0SIDL, (newMessage->id << 5));
	MCP_write(MCP_TXB0SIDH, (newMessage->id >> 3));
	MCP_write(MCP_TXB0DLC, newMessage->length);
	
	for(int i=0; i<newMessage->length; i++){
     458:	21 96       	adiw	r28, 0x01	; 1
     45a:	f7 01       	movw	r30, r14
     45c:	21 81       	ldd	r18, Z+1	; 0x01
     45e:	30 e0       	ldi	r19, 0x00	; 0
     460:	c2 17       	cp	r28, r18
     462:	d3 07       	cpc	r29, r19
     464:	94 f3       	brlt	.-28     	; 0x44a <CAN_sendMessage+0x4a>
		MCP_write(MCP_TXB0D0 + i, newMessage->data[i]);
	}
	
	MCP_requestToSend(MCP_RTS_TX0);
     466:	81 e8       	ldi	r24, 0x81	; 129
     468:	0e 94 9d 03 	call	0x73a	; 0x73a <MCP_requestToSend>
}
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	0f 91       	pop	r16
     474:	ff 90       	pop	r15
     476:	ef 90       	pop	r14
     478:	08 95       	ret

0000047a <CAN_recieve>:

void CAN_recieve(CAN_message * newReceivedMessage){		
     47a:	1f 93       	push	r17
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	ec 01       	movw	r28, r24
	if(MCP_read(MCP_CANINTF), MCP_RX0IF){
     482:	8c e2       	ldi	r24, 0x2C	; 44
     484:	0e 94 73 03 	call	0x6e6	; 0x6e6 <MCP_read>
     488:	8f ef       	ldi	r24, 0xFF	; 255
     48a:	9f e2       	ldi	r25, 0x2F	; 47
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <CAN_recieve+0x12>
     490:	00 c0       	rjmp	.+0      	; 0x492 <CAN_recieve+0x18>
     492:	00 00       	nop
		_delay_ms(10);
		newReceivedMessage->id = (MCP_read(MCP_RXB0SIDH) << 3) | (MCP_read(MCP_RXB0SIDL) >> 5);
     494:	81 e6       	ldi	r24, 0x61	; 97
     496:	0e 94 73 03 	call	0x6e6	; 0x6e6 <MCP_read>
     49a:	18 2f       	mov	r17, r24
     49c:	82 e6       	ldi	r24, 0x62	; 98
     49e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <MCP_read>
     4a2:	11 0f       	add	r17, r17
     4a4:	11 0f       	add	r17, r17
     4a6:	11 0f       	add	r17, r17
     4a8:	82 95       	swap	r24
     4aa:	86 95       	lsr	r24
     4ac:	87 70       	andi	r24, 0x07	; 7
     4ae:	18 2b       	or	r17, r24
     4b0:	18 83       	st	Y, r17
		newReceivedMessage->length = MCP_read(MCP_RXB0DLC) & 0x0F;
     4b2:	85 e6       	ldi	r24, 0x65	; 101
     4b4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <MCP_read>
     4b8:	8f 70       	andi	r24, 0x0F	; 15
     4ba:	89 83       	std	Y+1, r24	; 0x01
		for(uint8_t i=0; i<newReceivedMessage->length; i++){
     4bc:	88 23       	and	r24, r24
     4be:	69 f0       	breq	.+26     	; 0x4da <CAN_recieve+0x60>
     4c0:	10 e0       	ldi	r17, 0x00	; 0
			newReceivedMessage->data[i] = MCP_read(MCP_RXB0D0 + i);
     4c2:	86 e6       	ldi	r24, 0x66	; 102
     4c4:	81 0f       	add	r24, r17
     4c6:	0e 94 73 03 	call	0x6e6	; 0x6e6 <MCP_read>
     4ca:	fe 01       	movw	r30, r28
     4cc:	e1 0f       	add	r30, r17
     4ce:	f1 1d       	adc	r31, r1
     4d0:	82 83       	std	Z+2, r24	; 0x02
void CAN_recieve(CAN_message * newReceivedMessage){		
	if(MCP_read(MCP_CANINTF), MCP_RX0IF){
		_delay_ms(10);
		newReceivedMessage->id = (MCP_read(MCP_RXB0SIDH) << 3) | (MCP_read(MCP_RXB0SIDL) >> 5);
		newReceivedMessage->length = MCP_read(MCP_RXB0DLC) & 0x0F;
		for(uint8_t i=0; i<newReceivedMessage->length; i++){
     4d2:	1f 5f       	subi	r17, 0xFF	; 255
     4d4:	89 81       	ldd	r24, Y+1	; 0x01
     4d6:	18 17       	cp	r17, r24
     4d8:	a0 f3       	brcs	.-24     	; 0x4c2 <CAN_recieve+0x48>
			newReceivedMessage->data[i] = MCP_read(MCP_RXB0D0 + i);
		}
		MCP_bitMod(MCP_CANINTF, MCP_RX0IF, 0);
     4da:	40 e0       	ldi	r20, 0x00	; 0
     4dc:	61 e0       	ldi	r22, 0x01	; 1
     4de:	8c e2       	ldi	r24, 0x2C	; 44
     4e0:	0e 94 ab 03 	call	0x756	; 0x756 <MCP_bitMod>
	}
}
     4e4:	df 91       	pop	r29
     4e6:	cf 91       	pop	r28
     4e8:	1f 91       	pop	r17
     4ea:	08 95       	ret

000004ec <reMap>:

	return 0;
}

// Remapping input to new scale with range from min to max
int reMap(float input, float minVal, float maxVal, float scale){
     4ec:	4f 92       	push	r4
     4ee:	5f 92       	push	r5
     4f0:	6f 92       	push	r6
     4f2:	7f 92       	push	r7
     4f4:	af 92       	push	r10
     4f6:	bf 92       	push	r11
     4f8:	cf 92       	push	r12
     4fa:	df 92       	push	r13
     4fc:	ef 92       	push	r14
     4fe:	ff 92       	push	r15
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
     508:	00 d0       	rcall	.+0      	; 0x50a <__stack+0xb>
     50a:	00 d0       	rcall	.+0      	; 0x50c <__stack+0xd>
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
     510:	69 83       	std	Y+1, r22	; 0x01
     512:	7a 83       	std	Y+2, r23	; 0x02
     514:	8b 83       	std	Y+3, r24	; 0x03
     516:	9c 83       	std	Y+4, r25	; 0x04
     518:	c8 01       	movw	r24, r16
     51a:	b7 01       	movw	r22, r14

	// find range of input
	float range = maxVal - minVal;
     51c:	0e 94 d5 08 	call	0x11aa	; 0x11aa <__subsf3>
     520:	2b 01       	movw	r4, r22
     522:	3c 01       	movw	r6, r24

	if(range == 0) // cannot divide zero
     524:	20 e0       	ldi	r18, 0x00	; 0
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	a9 01       	movw	r20, r18
     52a:	0e 94 3a 09 	call	0x1274	; 0x1274 <__cmpsf2>
     52e:	81 11       	cpse	r24, r1
     530:	0c c0       	rjmp	.+24     	; 0x54a <__stack+0x4b>
		return scale/2; // return middle position
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	40 e0       	ldi	r20, 0x00	; 0
     538:	5f e3       	ldi	r21, 0x3F	; 63
     53a:	c6 01       	movw	r24, r12
     53c:	b5 01       	movw	r22, r10
     53e:	0e 94 89 0a 	call	0x1512	; 0x1512 <__mulsf3>
     542:	0e 94 a6 09 	call	0x134c	; 0x134c <__fixsfsi>
     546:	cb 01       	movw	r24, r22
     548:	25 c0       	rjmp	.+74     	; 0x594 <__stack+0x95>
	
	else {
		int result = scale / range * input;
     54a:	a3 01       	movw	r20, r6
     54c:	92 01       	movw	r18, r4
     54e:	c6 01       	movw	r24, r12
     550:	b5 01       	movw	r22, r10
     552:	0e 94 3e 09 	call	0x127c	; 0x127c <__divsf3>
     556:	29 81       	ldd	r18, Y+1	; 0x01
     558:	3a 81       	ldd	r19, Y+2	; 0x02
     55a:	4b 81       	ldd	r20, Y+3	; 0x03
     55c:	5c 81       	ldd	r21, Y+4	; 0x04
     55e:	0e 94 89 0a 	call	0x1512	; 0x1512 <__mulsf3>
     562:	0e 94 a6 09 	call	0x134c	; 0x134c <__fixsfsi>
     566:	2b 01       	movw	r4, r22
     568:	3c 01       	movw	r6, r24

		if(result > scale)
     56a:	88 27       	eor	r24, r24
     56c:	77 fd       	sbrc	r23, 7
     56e:	80 95       	com	r24
     570:	98 2f       	mov	r25, r24
     572:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__floatsisf>
     576:	9b 01       	movw	r18, r22
     578:	ac 01       	movw	r20, r24
     57a:	c6 01       	movw	r24, r12
     57c:	b5 01       	movw	r22, r10
     57e:	0e 94 3a 09 	call	0x1274	; 0x1274 <__cmpsf2>
     582:	88 23       	and	r24, r24
     584:	34 f4       	brge	.+12     	; 0x592 <__stack+0x93>
			return scale; // cap max output value
     586:	c6 01       	movw	r24, r12
     588:	b5 01       	movw	r22, r10
     58a:	0e 94 a6 09 	call	0x134c	; 0x134c <__fixsfsi>
     58e:	cb 01       	movw	r24, r22
     590:	01 c0       	rjmp	.+2      	; 0x594 <__stack+0x95>
		else
			return result; // return remapped value
     592:	c2 01       	movw	r24, r4
	}
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	1f 91       	pop	r17
     5a2:	0f 91       	pop	r16
     5a4:	ff 90       	pop	r15
     5a6:	ef 90       	pop	r14
     5a8:	df 90       	pop	r13
     5aa:	cf 90       	pop	r12
     5ac:	bf 90       	pop	r11
     5ae:	af 90       	pop	r10
     5b0:	7f 90       	pop	r7
     5b2:	6f 90       	pop	r6
     5b4:	5f 90       	pop	r5
     5b6:	4f 90       	pop	r4
     5b8:	08 95       	ret

000005ba <getControlOutput>:
#include <stdio.h>
#include "joystick.h"


// Read, remap and auto adjust analog input
int getControlOutput(int channel, int newScale, int deadzone, int *minVal, int *maxVal){
     5ba:	2f 92       	push	r2
     5bc:	3f 92       	push	r3
     5be:	4f 92       	push	r4
     5c0:	5f 92       	push	r5
     5c2:	6f 92       	push	r6
     5c4:	7f 92       	push	r7
     5c6:	8f 92       	push	r8
     5c8:	9f 92       	push	r9
     5ca:	af 92       	push	r10
     5cc:	bf 92       	push	r11
     5ce:	cf 92       	push	r12
     5d0:	df 92       	push	r13
     5d2:	ef 92       	push	r14
     5d4:	ff 92       	push	r15
     5d6:	0f 93       	push	r16
     5d8:	1f 93       	push	r17
     5da:	cf 93       	push	r28
     5dc:	df 93       	push	r29
     5de:	00 d0       	rcall	.+0      	; 0x5e0 <getControlOutput+0x26>
     5e0:	00 d0       	rcall	.+0      	; 0x5e2 <getControlOutput+0x28>
     5e2:	00 d0       	rcall	.+0      	; 0x5e4 <getControlOutput+0x2a>
     5e4:	cd b7       	in	r28, 0x3d	; 61
     5e6:	de b7       	in	r29, 0x3e	; 62
     5e8:	4b 01       	movw	r8, r22
     5ea:	1a 01       	movw	r2, r20
     5ec:	79 01       	movw	r14, r18

	int result = 0; // stores result
	int analogRead = 0; // stores value from adc
	int scale = newScale; // Scaling input to 0-100

	analogRead = adc(channel); // Reading input from ADC
     5ee:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <adc>
     5f2:	9e 83       	std	Y+6, r25	; 0x06
     5f4:	8d 83       	std	Y+5, r24	; 0x05
     5f6:	8f ef       	ldi	r24, 0xFF	; 255
     5f8:	9f e2       	ldi	r25, 0x2F	; 47
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <getControlOutput+0x40>
     5fe:	00 c0       	rjmp	.+0      	; 0x600 <getControlOutput+0x46>
     600:	00 00       	nop
	_delay_ms(10);

	// Auto adjusting range of input
	if(analogRead < *minVal)
     602:	f7 01       	movw	r30, r14
     604:	80 81       	ld	r24, Z
     606:	91 81       	ldd	r25, Z+1	; 0x01
     608:	2d 81       	ldd	r18, Y+5	; 0x05
     60a:	3e 81       	ldd	r19, Y+6	; 0x06
     60c:	28 17       	cp	r18, r24
     60e:	39 07       	cpc	r19, r25
     610:	14 f4       	brge	.+4      	; 0x616 <getControlOutput+0x5c>
		*minVal = analogRead;
     612:	31 83       	std	Z+1, r19	; 0x01
     614:	20 83       	st	Z, r18
	if(analogRead > *maxVal)
     616:	f8 01       	movw	r30, r16
     618:	80 81       	ld	r24, Z
     61a:	91 81       	ldd	r25, Z+1	; 0x01
     61c:	2d 81       	ldd	r18, Y+5	; 0x05
     61e:	3e 81       	ldd	r19, Y+6	; 0x06
     620:	82 17       	cp	r24, r18
     622:	93 07       	cpc	r25, r19
     624:	14 f4       	brge	.+4      	; 0x62a <getControlOutput+0x70>
		*maxVal = analogRead;
     626:	31 83       	std	Z+1, r19	; 0x01
     628:	20 83       	st	Z, r18

	// Remapping input from ADC to new scale
	result = reMap(analogRead, *minVal, *maxVal, scale);
     62a:	b4 01       	movw	r22, r8
     62c:	88 27       	eor	r24, r24
     62e:	77 fd       	sbrc	r23, 7
     630:	80 95       	com	r24
     632:	98 2f       	mov	r25, r24
     634:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__floatsisf>
     638:	5b 01       	movw	r10, r22
     63a:	6c 01       	movw	r12, r24
     63c:	f8 01       	movw	r30, r16
     63e:	60 81       	ld	r22, Z
     640:	71 81       	ldd	r23, Z+1	; 0x01
     642:	88 27       	eor	r24, r24
     644:	77 fd       	sbrc	r23, 7
     646:	80 95       	com	r24
     648:	98 2f       	mov	r25, r24
     64a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__floatsisf>
     64e:	2b 01       	movw	r4, r22
     650:	3c 01       	movw	r6, r24
     652:	f7 01       	movw	r30, r14
     654:	60 81       	ld	r22, Z
     656:	71 81       	ldd	r23, Z+1	; 0x01
     658:	88 27       	eor	r24, r24
     65a:	77 fd       	sbrc	r23, 7
     65c:	80 95       	com	r24
     65e:	98 2f       	mov	r25, r24
     660:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__floatsisf>
     664:	69 83       	std	Y+1, r22	; 0x01
     666:	7a 83       	std	Y+2, r23	; 0x02
     668:	8b 83       	std	Y+3, r24	; 0x03
     66a:	9c 83       	std	Y+4, r25	; 0x04
     66c:	2d 81       	ldd	r18, Y+5	; 0x05
     66e:	3e 81       	ldd	r19, Y+6	; 0x06
     670:	b9 01       	movw	r22, r18
     672:	88 27       	eor	r24, r24
     674:	77 fd       	sbrc	r23, 7
     676:	80 95       	com	r24
     678:	98 2f       	mov	r25, r24
     67a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <__floatsisf>
     67e:	83 01       	movw	r16, r6
     680:	72 01       	movw	r14, r4
     682:	29 81       	ldd	r18, Y+1	; 0x01
     684:	3a 81       	ldd	r19, Y+2	; 0x02
     686:	4b 81       	ldd	r20, Y+3	; 0x03
     688:	5c 81       	ldd	r21, Y+4	; 0x04
     68a:	0e 94 76 02 	call	0x4ec	; 0x4ec <reMap>

	// deadzone
	if(result > scale/2 - deadzone && result < scale/2 + deadzone)
     68e:	94 01       	movw	r18, r8
     690:	99 20       	and	r9, r9
     692:	14 f4       	brge	.+4      	; 0x698 <getControlOutput+0xde>
     694:	2f 5f       	subi	r18, 0xFF	; 255
     696:	3f 4f       	sbci	r19, 0xFF	; 255
     698:	35 95       	asr	r19
     69a:	27 95       	ror	r18
     69c:	a9 01       	movw	r20, r18
     69e:	42 19       	sub	r20, r2
     6a0:	53 09       	sbc	r21, r3
     6a2:	48 17       	cp	r20, r24
     6a4:	59 07       	cpc	r21, r25
     6a6:	34 f4       	brge	.+12     	; 0x6b4 <getControlOutput+0xfa>
     6a8:	22 0e       	add	r2, r18
     6aa:	33 1e       	adc	r3, r19
     6ac:	82 15       	cp	r24, r2
     6ae:	93 05       	cpc	r25, r3
     6b0:	0c f4       	brge	.+2      	; 0x6b4 <getControlOutput+0xfa>
		result = scale/2;
     6b2:	c9 01       	movw	r24, r18

	return result;
}
     6b4:	26 96       	adiw	r28, 0x06	; 6
     6b6:	0f b6       	in	r0, 0x3f	; 63
     6b8:	f8 94       	cli
     6ba:	de bf       	out	0x3e, r29	; 62
     6bc:	0f be       	out	0x3f, r0	; 63
     6be:	cd bf       	out	0x3d, r28	; 61
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	1f 91       	pop	r17
     6c6:	0f 91       	pop	r16
     6c8:	ff 90       	pop	r15
     6ca:	ef 90       	pop	r14
     6cc:	df 90       	pop	r13
     6ce:	cf 90       	pop	r12
     6d0:	bf 90       	pop	r11
     6d2:	af 90       	pop	r10
     6d4:	9f 90       	pop	r9
     6d6:	8f 90       	pop	r8
     6d8:	7f 90       	pop	r7
     6da:	6f 90       	pop	r6
     6dc:	5f 90       	pop	r5
     6de:	4f 90       	pop	r4
     6e0:	3f 90       	pop	r3
     6e2:	2f 90       	pop	r2
     6e4:	08 95       	ret

000006e6 <MCP_read>:
void MCP_init(){
	SPI_init();
	MCP_reset();
}

char MCP_read(char adr){
     6e6:	cf 93       	push	r28
     6e8:	c8 2f       	mov	r28, r24
	SPI_slaveEnable(1); //enable CS pin	
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	0e 94 b2 08 	call	0x1164	; 0x1164 <SPI_slaveEnable>
	SPI_write(MCP_READ); //set read instruction
     6f0:	83 e0       	ldi	r24, 0x03	; 3
     6f2:	0e 94 a9 08 	call	0x1152	; 0x1152 <SPI_write>
	SPI_write(adr); //set address
     6f6:	8c 2f       	mov	r24, r28
     6f8:	0e 94 a9 08 	call	0x1152	; 0x1152 <SPI_write>
	uint8_t temp = SPI_read(); //read from address	
     6fc:	0e 94 ad 08 	call	0x115a	; 0x115a <SPI_read>
     700:	c8 2f       	mov	r28, r24
	SPI_slaveEnable(0); //disable CS pin		
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	0e 94 b2 08 	call	0x1164	; 0x1164 <SPI_slaveEnable>
	return temp;
}
     708:	8c 2f       	mov	r24, r28
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret

0000070e <MCP_write>:

void MCP_write(char adr, char data){
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	d8 2f       	mov	r29, r24
     714:	c6 2f       	mov	r28, r22
	SPI_slaveEnable(1); //enable CS pin	
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	0e 94 b2 08 	call	0x1164	; 0x1164 <SPI_slaveEnable>
	SPI_write(MCP_WRITE); //set write instruction
     71c:	82 e0       	ldi	r24, 0x02	; 2
     71e:	0e 94 a9 08 	call	0x1152	; 0x1152 <SPI_write>
	SPI_write(adr); //set address
     722:	8d 2f       	mov	r24, r29
     724:	0e 94 a9 08 	call	0x1152	; 0x1152 <SPI_write>
	SPI_write(data); //write data	
     728:	8c 2f       	mov	r24, r28
     72a:	0e 94 a9 08 	call	0x1152	; 0x1152 <SPI_write>
	SPI_slaveEnable(0); //disable CS pin
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	0e 94 b2 08 	call	0x1164	; 0x1164 <SPI_slaveEnable>
}
     734:	df 91       	pop	r29
     736:	cf 91       	pop	r28
     738:	08 95       	ret

0000073a <MCP_requestToSend>:

void MCP_requestToSend(char txBuffer){
     73a:	cf 93       	push	r28
     73c:	c8 2f       	mov	r28, r24
	SPI_slaveEnable(1); //enable CS pin	
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	0e 94 b2 08 	call	0x1164	; 0x1164 <SPI_slaveEnable>
	SPI_write(MCP_RTS_TX0 | txBuffer); //request-to-send	
     744:	8c 2f       	mov	r24, r28
     746:	81 68       	ori	r24, 0x81	; 129
     748:	0e 94 a9 08 	call	0x1152	; 0x1152 <SPI_write>
	SPI_slaveEnable(0); //disable CS pin
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	0e 94 b2 08 	call	0x1164	; 0x1164 <SPI_slaveEnable>
}
     752:	cf 91       	pop	r28
     754:	08 95       	ret

00000756 <MCP_bitMod>:
	char temp = SPI_read();
	SPI_slaveEnable(0); //disable CS pin
	return temp;
}

void MCP_bitMod(char adr, char mask, char data){
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	18 2f       	mov	r17, r24
     75e:	d6 2f       	mov	r29, r22
     760:	c4 2f       	mov	r28, r20
	SPI_slaveEnable(1); //enable CS pin	
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	0e 94 b2 08 	call	0x1164	; 0x1164 <SPI_slaveEnable>
	SPI_write(MCP_BITMOD); //bit modify instruction
     768:	85 e0       	ldi	r24, 0x05	; 5
     76a:	0e 94 a9 08 	call	0x1152	; 0x1152 <SPI_write>
	SPI_write(adr); //set address
     76e:	81 2f       	mov	r24, r17
     770:	0e 94 a9 08 	call	0x1152	; 0x1152 <SPI_write>
	SPI_write(mask); //set bitmask
     774:	8d 2f       	mov	r24, r29
     776:	0e 94 a9 08 	call	0x1152	; 0x1152 <SPI_write>
	SPI_write(data); //write data	
     77a:	8c 2f       	mov	r24, r28
     77c:	0e 94 a9 08 	call	0x1152	; 0x1152 <SPI_write>
	SPI_slaveEnable(0); //disable CS pin
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	0e 94 b2 08 	call	0x1164	; 0x1164 <SPI_slaveEnable>
}
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	1f 91       	pop	r17
     78c:	08 95       	ret

0000078e <MCP_reset>:

void MCP_reset(){
	SPI_slaveEnable(1); //enable CS pin	
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	0e 94 b2 08 	call	0x1164	; 0x1164 <SPI_slaveEnable>
	SPI_write(MCP_RESET); //reset instruction	
     794:	80 ec       	ldi	r24, 0xC0	; 192
     796:	0e 94 a9 08 	call	0x1152	; 0x1152 <SPI_write>
	SPI_slaveEnable(0); //disable CS pin
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	0e 94 b2 08 	call	0x1164	; 0x1164 <SPI_slaveEnable>
     7a0:	08 95       	ret

000007a2 <MCP_init>:
#include <avr/io.h>
#include "MCP2515.h"
#include "SPI.h"

void MCP_init(){
	SPI_init();
     7a2:	0e 94 a2 08 	call	0x1144	; 0x1144 <SPI_init>
	MCP_reset();
     7a6:	0e 94 c7 03 	call	0x78e	; 0x78e <MCP_reset>
     7aa:	08 95       	ret

000007ac <highScore>:
		}*/
		_delay_ms(10);
	}
}
void highScore(){
	printf("highscore\n");
     7ac:	8c e2       	ldi	r24, 0x2C	; 44
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	0e 94 67 0b 	call	0x16ce	; 0x16ce <puts>
     7b4:	08 95       	ret

000007b6 <soundSetting>:
}
void soundSetting(){
	printf("Sound toggle\n");
     7b6:	86 e3       	ldi	r24, 0x36	; 54
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	0e 94 67 0b 	call	0x16ce	; 0x16ce <puts>
	sound.title = "Sound on";
     7be:	83 e4       	ldi	r24, 0x43	; 67
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	90 93 27 02 	sts	0x0227, r25
     7c6:	80 93 26 02 	sts	0x0226, r24
     7ca:	08 95       	ret

000007cc <aboutGame>:
}
void aboutGame(){
	printf("about\n");
     7cc:	8c e4       	ldi	r24, 0x4C	; 76
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	0e 94 67 0b 	call	0x16ce	; 0x16ce <puts>
     7d4:	08 95       	ret

000007d6 <calibrationDummy>:
}
void calibrationDummy(){
	printf("calibration\n");
     7d6:	82 e5       	ldi	r24, 0x52	; 82
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	0e 94 67 0b 	call	0x16ce	; 0x16ce <puts>
     7de:	08 95       	ret

000007e0 <newGame>:
	OLED_ClearCol();
	OLED_Pos(currentPos + offset, 1);
	OLED_Print(" >");
}

void newGame(){
     7e0:	cf 93       	push	r28
     7e2:	df 93       	push	r29
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	c4 58       	subi	r28, 0x84	; 132
     7ea:	d1 09       	sbc	r29, r1
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	f8 94       	cli
     7f0:	de bf       	out	0x3e, r29	; 62
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	cd bf       	out	0x3d, r28	; 61
	printf("New game\n");
     7f6:	8e e5       	ldi	r24, 0x5E	; 94
     7f8:	91 e0       	ldi	r25, 0x01	; 1
     7fa:	0e 94 67 0b 	call	0x16ce	; 0x16ce <puts>
	OLED_ClearScreen();
     7fe:	0e 94 01 08 	call	0x1002	; 0x1002 <OLED_ClearScreen>
	
	OLED_Pos(0,0);
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0e 94 b8 07 	call	0xf70	; 0xf70 <OLED_Pos>
	OLED_Print("Game started!");
     80e:	87 e6       	ldi	r24, 0x67	; 103
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	0e 94 6b 07 	call	0xed6	; 0xed6 <OLED_Print>
	
	int maxMinValues[8] = {0,255,0,255,0,255,0,255}; // input ranges - max/min	
     816:	80 e1       	ldi	r24, 0x10	; 16
     818:	ec e1       	ldi	r30, 0x1C	; 28
     81a:	f1 e0       	ldi	r31, 0x01	; 1
     81c:	de 01       	movw	r26, r28
     81e:	11 96       	adiw	r26, 0x01	; 1
     820:	01 90       	ld	r0, Z+
     822:	0d 92       	st	X+, r0
     824:	8a 95       	dec	r24
     826:	e1 f7       	brne	.-8      	; 0x820 <newGame+0x40>
	uint8_t joystickValueX = getControlOutput(1,100,5, &maxMinValues[0], &maxMinValues[1]);
     828:	8e 01       	movw	r16, r28
     82a:	0d 5f       	subi	r16, 0xFD	; 253
     82c:	1f 4f       	sbci	r17, 0xFF	; 255
     82e:	9e 01       	movw	r18, r28
     830:	2f 5f       	subi	r18, 0xFF	; 255
     832:	3f 4f       	sbci	r19, 0xFF	; 255
     834:	45 e0       	ldi	r20, 0x05	; 5
     836:	50 e0       	ldi	r21, 0x00	; 0
     838:	64 e6       	ldi	r22, 0x64	; 100
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	0e 94 dd 02 	call	0x5ba	; 0x5ba <getControlOutput>
	uint8_t joystickValueY = getControlOutput(2,100,5, &maxMinValues[2], &maxMinValues[3]);
     844:	0c 5f       	subi	r16, 0xFC	; 252
     846:	1f 4f       	sbci	r17, 0xFF	; 255
     848:	9e 01       	movw	r18, r28
     84a:	2b 5f       	subi	r18, 0xFB	; 251
     84c:	3f 4f       	sbci	r19, 0xFF	; 255
     84e:	45 e0       	ldi	r20, 0x05	; 5
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	64 e6       	ldi	r22, 0x64	; 100
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	82 e0       	ldi	r24, 0x02	; 2
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <getControlOutput>
	uint8_t sliderValueA = getControlOutput(3,100,5, &maxMinValues[4], &maxMinValues[5]);
     85e:	0c 5f       	subi	r16, 0xFC	; 252
     860:	1f 4f       	sbci	r17, 0xFF	; 255
     862:	9e 01       	movw	r18, r28
     864:	27 5f       	subi	r18, 0xF7	; 247
     866:	3f 4f       	sbci	r19, 0xFF	; 255
     868:	45 e0       	ldi	r20, 0x05	; 5
     86a:	50 e0       	ldi	r21, 0x00	; 0
     86c:	64 e6       	ldi	r22, 0x64	; 100
     86e:	70 e0       	ldi	r23, 0x00	; 0
     870:	83 e0       	ldi	r24, 0x03	; 3
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	0e 94 dd 02 	call	0x5ba	; 0x5ba <getControlOutput>
	uint8_t leftButtonPressed = 0x01 & PINB;
     878:	86 b3       	in	r24, 0x16	; 22
		char joyX[33], joyY[33], buffer[10], buffer2[10], scorebuffer[10];
		itoa(joystickValueX,joyX,10);
		itoa(joystickValueY,joyY,10);
		itoa(score,scorebuffer,10);
		
		strcpy(buffer, "X: ");
     87a:	5e 01       	movw	r10, r28
     87c:	8b e7       	ldi	r24, 0x7B	; 123
     87e:	a8 0e       	add	r10, r24
     880:	b1 1c       	adc	r11, r1
     882:	0f 2e       	mov	r0, r31
     884:	f8 e5       	ldi	r31, 0x58	; 88
     886:	cf 2e       	mov	r12, r31
     888:	fa e3       	ldi	r31, 0x3A	; 58
     88a:	df 2e       	mov	r13, r31
     88c:	f0 e2       	ldi	r31, 0x20	; 32
     88e:	ef 2e       	mov	r14, r31
     890:	f1 2c       	mov	r15, r1
     892:	f0 2d       	mov	r31, r0
	
	CAN_message message, receivedMessage;
	
	while(1){
		
		joystickValueX = getControlOutput(1,100,5, &maxMinValues[0], &maxMinValues[1]);
     894:	8e 01       	movw	r16, r28
     896:	0d 5f       	subi	r16, 0xFD	; 253
     898:	1f 4f       	sbci	r17, 0xFF	; 255
     89a:	9e 01       	movw	r18, r28
     89c:	2f 5f       	subi	r18, 0xFF	; 255
     89e:	3f 4f       	sbci	r19, 0xFF	; 255
     8a0:	45 e0       	ldi	r20, 0x05	; 5
     8a2:	50 e0       	ldi	r21, 0x00	; 0
     8a4:	64 e6       	ldi	r22, 0x64	; 100
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	0e 94 dd 02 	call	0x5ba	; 0x5ba <getControlOutput>
     8b0:	88 2e       	mov	r8, r24
		joystickValueY = getControlOutput(2,100,5, &maxMinValues[2], &maxMinValues[3]);
     8b2:	0c 5f       	subi	r16, 0xFC	; 252
     8b4:	1f 4f       	sbci	r17, 0xFF	; 255
     8b6:	9e 01       	movw	r18, r28
     8b8:	2b 5f       	subi	r18, 0xFB	; 251
     8ba:	3f 4f       	sbci	r19, 0xFF	; 255
     8bc:	45 e0       	ldi	r20, 0x05	; 5
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	64 e6       	ldi	r22, 0x64	; 100
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	82 e0       	ldi	r24, 0x02	; 2
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 dd 02 	call	0x5ba	; 0x5ba <getControlOutput>
     8cc:	98 2e       	mov	r9, r24
		sliderValueA = getControlOutput(3,100,5, &maxMinValues[4], &maxMinValues[5]);
     8ce:	0c 5f       	subi	r16, 0xFC	; 252
     8d0:	1f 4f       	sbci	r17, 0xFF	; 255
     8d2:	9e 01       	movw	r18, r28
     8d4:	27 5f       	subi	r18, 0xF7	; 247
     8d6:	3f 4f       	sbci	r19, 0xFF	; 255
     8d8:	45 e0       	ldi	r20, 0x05	; 5
     8da:	50 e0       	ldi	r21, 0x00	; 0
     8dc:	64 e6       	ldi	r22, 0x64	; 100
     8de:	70 e0       	ldi	r23, 0x00	; 0
     8e0:	83 e0       	ldi	r24, 0x03	; 3
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 dd 02 	call	0x5ba	; 0x5ba <getControlOutput>
     8e8:	18 2f       	mov	r17, r24
		leftButtonPressed = 0x01 & PINB;		
     8ea:	06 b3       	in	r16, 0x16	; 22
		
		CAN_recieve(&receivedMessage);
     8ec:	ce 01       	movw	r24, r28
     8ee:	4b 96       	adiw	r24, 0x1b	; 27
     8f0:	0e 94 3d 02 	call	0x47a	; 0x47a <CAN_recieve>
		score = receivedMessage.data[0]-1;
     8f4:	7d 8c       	ldd	r7, Y+29	; 0x1d
     8f6:	7a 94       	dec	r7
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     8f8:	4a e0       	ldi	r20, 0x0A	; 10
     8fa:	be 01       	movw	r22, r28
     8fc:	6a 5b       	subi	r22, 0xBA	; 186
     8fe:	7f 4f       	sbci	r23, 0xFF	; 255
     900:	88 2d       	mov	r24, r8
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <__itoa_ncheck>
     908:	4a e0       	ldi	r20, 0x0A	; 10
     90a:	be 01       	movw	r22, r28
     90c:	6b 5d       	subi	r22, 0xDB	; 219
     90e:	7f 4f       	sbci	r23, 0xFF	; 255
     910:	89 2d       	mov	r24, r9
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <__itoa_ncheck>
     918:	4a e0       	ldi	r20, 0x0A	; 10
     91a:	be 01       	movw	r22, r28
     91c:	69 59       	subi	r22, 0x99	; 153
     91e:	7f 4f       	sbci	r23, 0xFF	; 255
     920:	87 2d       	mov	r24, r7
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	0e 94 f7 0a 	call	0x15ee	; 0x15ee <__itoa_ncheck>
		char joyX[33], joyY[33], buffer[10], buffer2[10], scorebuffer[10];
		itoa(joystickValueX,joyX,10);
		itoa(joystickValueY,joyY,10);
		itoa(score,scorebuffer,10);
		
		strcpy(buffer, "X: ");
     928:	f5 01       	movw	r30, r10
     92a:	c0 82       	st	Z, r12
     92c:	d1 82       	std	Z+1, r13	; 0x01
     92e:	e2 82       	std	Z+2, r14	; 0x02
     930:	f3 82       	std	Z+3, r15	; 0x03
		strcat(buffer, joyX);
     932:	be 01       	movw	r22, r28
     934:	6a 5b       	subi	r22, 0xBA	; 186
     936:	7f 4f       	sbci	r23, 0xFF	; 255
     938:	c5 01       	movw	r24, r10
     93a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <strcat>
		strcat(buffer, " Y: ");
     93e:	d5 01       	movw	r26, r10
     940:	0d 90       	ld	r0, X+
     942:	00 20       	and	r0, r0
     944:	e9 f7       	brne	.-6      	; 0x940 <newGame+0x160>
     946:	11 97       	sbiw	r26, 0x01	; 1
     948:	95 e0       	ldi	r25, 0x05	; 5
     94a:	e5 e7       	ldi	r30, 0x75	; 117
     94c:	f1 e0       	ldi	r31, 0x01	; 1
     94e:	01 90       	ld	r0, Z+
     950:	0d 92       	st	X+, r0
     952:	9a 95       	dec	r25
     954:	e1 f7       	brne	.-8      	; 0x94e <newGame+0x16e>
		strcat(buffer, joyY);
     956:	be 01       	movw	r22, r28
     958:	6b 5d       	subi	r22, 0xDB	; 219
     95a:	7f 4f       	sbci	r23, 0xFF	; 255
     95c:	c5 01       	movw	r24, r10
     95e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <strcat>
		strcpy(buffer2, "Score: ");
     962:	98 e0       	ldi	r25, 0x08	; 8
     964:	ea e7       	ldi	r30, 0x7A	; 122
     966:	f1 e0       	ldi	r31, 0x01	; 1
     968:	de 01       	movw	r26, r28
     96a:	af 58       	subi	r26, 0x8F	; 143
     96c:	bf 4f       	sbci	r27, 0xFF	; 255
     96e:	01 90       	ld	r0, Z+
     970:	0d 92       	st	X+, r0
     972:	9a 95       	dec	r25
     974:	e1 f7       	brne	.-8      	; 0x96e <newGame+0x18e>
		strcat(buffer2, scorebuffer);		
     976:	be 01       	movw	r22, r28
     978:	69 59       	subi	r22, 0x99	; 153
     97a:	7f 4f       	sbci	r23, 0xFF	; 255
     97c:	ce 01       	movw	r24, r28
     97e:	8f 58       	subi	r24, 0x8F	; 143
     980:	9f 4f       	sbci	r25, 0xFF	; 255
     982:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <strcat>
		
		//OLED_Pos(1,3);
		//OLED_Print(buffer);
		
		OLED_Pos(2,3);
     986:	63 e0       	ldi	r22, 0x03	; 3
     988:	70 e0       	ldi	r23, 0x00	; 0
     98a:	82 e0       	ldi	r24, 0x02	; 2
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	0e 94 b8 07 	call	0xf70	; 0xf70 <OLED_Pos>
		OLED_Print(buffer2);
     992:	ce 01       	movw	r24, r28
     994:	8f 58       	subi	r24, 0x8F	; 143
     996:	9f 4f       	sbci	r25, 0xFF	; 255
     998:	0e 94 6b 07 	call	0xed6	; 0xed6 <OLED_Print>
		else
			OLED_Pos(7,(int)(13.0f/100.0f*joystickValueX));
		
		OLED_Print("===");
		*/
		message.id = 3;
     99c:	83 e0       	ldi	r24, 0x03	; 3
     99e:	89 8b       	std	Y+17, r24	; 0x11
		message.length = 4;
     9a0:	84 e0       	ldi	r24, 0x04	; 4
     9a2:	8a 8b       	std	Y+18, r24	; 0x12
	
	CAN_message message, receivedMessage;
	
	while(1){
		
		joystickValueX = getControlOutput(1,100,5, &maxMinValues[0], &maxMinValues[1]);
     9a4:	8b 8a       	std	Y+19, r8	; 0x13
		joystickValueY = getControlOutput(2,100,5, &maxMinValues[2], &maxMinValues[3]);
     9a6:	9c 8a       	std	Y+20, r9	; 0x14
		sliderValueA = getControlOutput(3,100,5, &maxMinValues[4], &maxMinValues[5]);
		leftButtonPressed = 0x01 & PINB;		
     9a8:	01 70       	andi	r16, 0x01	; 1
		message.id = 3;
		message.length = 4;
		
		message.data[0] = joystickValueX;
		message.data[1] = joystickValueY;
		message.data[2] = leftButtonPressed;
     9aa:	0d 8b       	std	Y+21, r16	; 0x15
	
	while(1){
		
		joystickValueX = getControlOutput(1,100,5, &maxMinValues[0], &maxMinValues[1]);
		joystickValueY = getControlOutput(2,100,5, &maxMinValues[2], &maxMinValues[3]);
		sliderValueA = getControlOutput(3,100,5, &maxMinValues[4], &maxMinValues[5]);
     9ac:	1e 8b       	std	Y+22, r17	; 0x16
		message.data[0] = joystickValueX;
		message.data[1] = joystickValueY;
		message.data[2] = leftButtonPressed;
		message.data[3] = sliderValueA;
		
		CAN_sendMessage(&message);
     9ae:	ce 01       	movw	r24, r28
     9b0:	41 96       	adiw	r24, 0x11	; 17
     9b2:	0e 94 00 02 	call	0x400	; 0x400 <CAN_sendMessage>
     9b6:	8f ef       	ldi	r24, 0xFF	; 255
     9b8:	9f e2       	ldi	r25, 0x2F	; 47
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	f1 f7       	brne	.-4      	; 0x9ba <newGame+0x1da>
     9be:	00 c0       	rjmp	.+0      	; 0x9c0 <newGame+0x1e0>
     9c0:	00 00       	nop
     9c2:	68 cf       	rjmp	.-304    	; 0x894 <newGame+0xb4>

000009c4 <printMenuToScreen>:
	//_delay_ms(500); // delay after keystroke
	}
}

// get children from parent node
void printMenuToScreen(struct MenuItem * nodeName){	
     9c4:	ef 92       	push	r14
     9c6:	ff 92       	push	r15
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	7c 01       	movw	r14, r24
	//char * newTitle = strcat("-",strcat(nodeName->title,"-"));	
	OLED_Pos(0,4);
     9d2:	64 e0       	ldi	r22, 0x04	; 4
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 b8 07 	call	0xf70	; 0xf70 <OLED_Pos>
	OLED_Print(nodeName->title);
     9de:	d7 01       	movw	r26, r14
     9e0:	8d 91       	ld	r24, X+
     9e2:	9c 91       	ld	r25, X
     9e4:	0e 94 6b 07 	call	0xed6	; 0xed6 <OLED_Print>
	
	for(int i=0; i<nodeName->numOfChildren; i++){
     9e8:	f7 01       	movw	r30, r14
     9ea:	26 89       	ldd	r18, Z+22	; 0x16
     9ec:	37 89       	ldd	r19, Z+23	; 0x17
     9ee:	12 16       	cp	r1, r18
     9f0:	13 06       	cpc	r1, r19
     9f2:	d4 f4       	brge	.+52     	; 0xa28 <printMenuToScreen+0x64>
     9f4:	87 01       	movw	r16, r14
     9f6:	0c 5f       	subi	r16, 0xFC	; 252
     9f8:	1f 4f       	sbci	r17, 0xFF	; 255
     9fa:	c0 e0       	ldi	r28, 0x00	; 0
     9fc:	d0 e0       	ldi	r29, 0x00	; 0
		OLED_Pos(i+2,4);
     9fe:	64 e0       	ldi	r22, 0x04	; 4
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	ce 01       	movw	r24, r28
     a04:	02 96       	adiw	r24, 0x02	; 2
     a06:	0e 94 b8 07 	call	0xf70	; 0xf70 <OLED_Pos>
		OLED_Print(nodeName->children[i]->title);
     a0a:	d8 01       	movw	r26, r16
     a0c:	ed 91       	ld	r30, X+
     a0e:	fd 91       	ld	r31, X+
     a10:	8d 01       	movw	r16, r26
     a12:	80 81       	ld	r24, Z
     a14:	91 81       	ldd	r25, Z+1	; 0x01
     a16:	0e 94 6b 07 	call	0xed6	; 0xed6 <OLED_Print>
void printMenuToScreen(struct MenuItem * nodeName){	
	//char * newTitle = strcat("-",strcat(nodeName->title,"-"));	
	OLED_Pos(0,4);
	OLED_Print(nodeName->title);
	
	for(int i=0; i<nodeName->numOfChildren; i++){
     a1a:	21 96       	adiw	r28, 0x01	; 1
     a1c:	f7 01       	movw	r30, r14
     a1e:	26 89       	ldd	r18, Z+22	; 0x16
     a20:	37 89       	ldd	r19, Z+23	; 0x17
     a22:	c2 17       	cp	r28, r18
     a24:	d3 07       	cpc	r29, r19
     a26:	5c f3       	brlt	.-42     	; 0x9fe <printMenuToScreen+0x3a>
		OLED_Pos(i+2,4);
		OLED_Print(nodeName->children[i]->title);
	}
	if(nodeName->parent != NULL){
     a28:	d7 01       	movw	r26, r14
     a2a:	12 96       	adiw	r26, 0x02	; 2
     a2c:	8d 91       	ld	r24, X+
     a2e:	9c 91       	ld	r25, X
     a30:	13 97       	sbiw	r26, 0x03	; 3
     a32:	89 2b       	or	r24, r25
     a34:	51 f0       	breq	.+20     	; 0xa4a <printMenuToScreen+0x86>
		OLED_Pos(nodeName->numOfChildren+2,4);
     a36:	64 e0       	ldi	r22, 0x04	; 4
     a38:	70 e0       	ldi	r23, 0x00	; 0
     a3a:	c9 01       	movw	r24, r18
     a3c:	02 96       	adiw	r24, 0x02	; 2
     a3e:	0e 94 b8 07 	call	0xf70	; 0xf70 <OLED_Pos>
		OLED_Print("Return");
     a42:	8b e9       	ldi	r24, 0x9B	; 155
     a44:	91 e0       	ldi	r25, 0x01	; 1
     a46:	0e 94 6b 07 	call	0xed6	; 0xed6 <OLED_Print>
	}
}
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	ff 90       	pop	r15
     a54:	ef 90       	pop	r14
     a56:	08 95       	ret

00000a58 <menuInit>:
#include <string.h>
#include "joystick.h"
#include "CAN.h"
#include <math.h>

void menuInit(){
     a58:	8f 92       	push	r8
     a5a:	9f 92       	push	r9
     a5c:	af 92       	push	r10
     a5e:	bf 92       	push	r11
     a60:	cf 92       	push	r12
     a62:	df 92       	push	r13
     a64:	ef 92       	push	r14
     a66:	ff 92       	push	r15
     a68:	0f 93       	push	r16
     a6a:	1f 93       	push	r17
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
	
	OLED_ClearScreen();
     a70:	0e 94 01 08 	call	0x1002	; 0x1002 <OLED_ClearScreen>
	OLED_Pos(2, 1);
     a74:	61 e0       	ldi	r22, 0x01	; 1
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	82 e0       	ldi	r24, 0x02	; 2
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0e 94 b8 07 	call	0xf70	; 0xf70 <OLED_Pos>
	OLED_Print(" >");
     a80:	82 ea       	ldi	r24, 0xA2	; 162
     a82:	91 e0       	ldi	r25, 0x01	; 1
     a84:	0e 94 6b 07 	call	0xed6	; 0xed6 <OLED_Print>
	
	mainmenu.title = "Main menu";
     a88:	e6 e8       	ldi	r30, 0x86	; 134
     a8a:	f2 e0       	ldi	r31, 0x02	; 2
     a8c:	85 ea       	ldi	r24, 0xA5	; 165
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	91 83       	std	Z+1, r25	; 0x01
     a92:	80 83       	st	Z, r24
	newgame.title = "New game";
     a94:	0f 2e       	mov	r0, r31
     a96:	fe e3       	ldi	r31, 0x3E	; 62
     a98:	ef 2e       	mov	r14, r31
     a9a:	f2 e0       	ldi	r31, 0x02	; 2
     a9c:	ff 2e       	mov	r15, r31
     a9e:	f0 2d       	mov	r31, r0
     aa0:	8e e5       	ldi	r24, 0x5E	; 94
     aa2:	91 e0       	ldi	r25, 0x01	; 1
     aa4:	d7 01       	movw	r26, r14
     aa6:	8d 93       	st	X+, r24
     aa8:	9c 93       	st	X, r25
	settings.title = "Settings";
     aaa:	0f 2e       	mov	r0, r31
     aac:	fe e0       	ldi	r31, 0x0E	; 14
     aae:	8f 2e       	mov	r8, r31
     ab0:	f2 e0       	ldi	r31, 0x02	; 2
     ab2:	9f 2e       	mov	r9, r31
     ab4:	f0 2d       	mov	r31, r0
     ab6:	8f ea       	ldi	r24, 0xAF	; 175
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	e4 01       	movw	r28, r8
     abc:	99 83       	std	Y+1, r25	; 0x01
     abe:	88 83       	st	Y, r24
	highscore.title = "Highscore";
     ac0:	0e ec       	ldi	r16, 0xCE	; 206
     ac2:	12 e0       	ldi	r17, 0x02	; 2
     ac4:	88 eb       	ldi	r24, 0xB8	; 184
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	d8 01       	movw	r26, r16
     aca:	8d 93       	st	X+, r24
     acc:	9c 93       	st	X, r25
	about.title = "About";
     ace:	0f 2e       	mov	r0, r31
     ad0:	f6 eb       	ldi	r31, 0xB6	; 182
     ad2:	af 2e       	mov	r10, r31
     ad4:	f2 e0       	ldi	r31, 0x02	; 2
     ad6:	bf 2e       	mov	r11, r31
     ad8:	f0 2d       	mov	r31, r0
     ada:	82 ec       	ldi	r24, 0xC2	; 194
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	e5 01       	movw	r28, r10
     ae0:	99 83       	std	Y+1, r25	; 0x01
     ae2:	88 83       	st	Y, r24
	misc.title = "Misc";
     ae4:	ae e9       	ldi	r26, 0x9E	; 158
     ae6:	b2 e0       	ldi	r27, 0x02	; 2
     ae8:	88 ec       	ldi	r24, 0xC8	; 200
     aea:	91 e0       	ldi	r25, 0x01	; 1
     aec:	11 96       	adiw	r26, 0x01	; 1
     aee:	9c 93       	st	X, r25
     af0:	8e 93       	st	-X, r24
	sound.title = "Sound";
     af2:	46 e2       	ldi	r20, 0x26	; 38
     af4:	52 e0       	ldi	r21, 0x02	; 2
     af6:	8d ec       	ldi	r24, 0xCD	; 205
     af8:	91 e0       	ldi	r25, 0x01	; 1
     afa:	ea 01       	movw	r28, r20
     afc:	99 83       	std	Y+1, r25	; 0x01
     afe:	88 83       	st	Y, r24
	calibration.title = "Calibration";
     b00:	2e e6       	ldi	r18, 0x6E	; 110
     b02:	32 e0       	ldi	r19, 0x02	; 2
     b04:	83 ed       	ldi	r24, 0xD3	; 211
     b06:	91 e0       	ldi	r25, 0x01	; 1
     b08:	e9 01       	movw	r28, r18
     b0a:	99 83       	std	Y+1, r25	; 0x01
     b0c:	88 83       	st	Y, r24
	currentMenu = mainmenu;
}

// add child to parent node
void addChild(struct MenuItem * child, struct MenuItem * parentName, int (* function)()){	
	child->parent = parentName; // assign parent to child
     b0e:	f0 93 41 02 	sts	0x0241, r31
     b12:	e0 93 40 02 	sts	0x0240, r30
	parentName->children[parentName->numOfChildren] = child; // assign child to parent
     b16:	6c e9       	ldi	r22, 0x9C	; 156
     b18:	72 e0       	ldi	r23, 0x02	; 2
     b1a:	eb 01       	movw	r28, r22
     b1c:	88 81       	ld	r24, Y
     b1e:	99 81       	ldd	r25, Y+1	; 0x01
     b20:	6c 01       	movw	r12, r24
     b22:	cc 0c       	add	r12, r12
     b24:	dd 1c       	adc	r13, r13
     b26:	e6 01       	movw	r28, r12
     b28:	c6 57       	subi	r28, 0x76	; 118
     b2a:	dd 4f       	sbci	r29, 0xFD	; 253
     b2c:	f9 82       	std	Y+1, r15	; 0x01
     b2e:	e8 82       	st	Y, r14
	parentName->numOfChildren++; // add to number of children
	child->fp = function;
     b30:	0f 2e       	mov	r0, r31
     b32:	f0 ef       	ldi	r31, 0xF0	; 240
     b34:	ef 2e       	mov	r14, r31
     b36:	f3 e0       	ldi	r31, 0x03	; 3
     b38:	ff 2e       	mov	r15, r31
     b3a:	f0 2d       	mov	r31, r0
     b3c:	f0 92 53 02 	sts	0x0253, r15
     b40:	e0 92 52 02 	sts	0x0252, r14
	currentMenu = mainmenu;
}

// add child to parent node
void addChild(struct MenuItem * child, struct MenuItem * parentName, int (* function)()){	
	child->parent = parentName; // assign parent to child
     b44:	f0 93 d1 02 	sts	0x02D1, r31
     b48:	e0 93 d0 02 	sts	0x02D0, r30
	parentName->children[parentName->numOfChildren] = child; // assign child to parent
     b4c:	e6 01       	movw	r28, r12
     b4e:	c4 57       	subi	r28, 0x74	; 116
     b50:	dd 4f       	sbci	r29, 0xFD	; 253
     b52:	19 83       	std	Y+1, r17	; 0x01
     b54:	08 83       	st	Y, r16
	parentName->numOfChildren++; // add to number of children
	child->fp = function;
     b56:	06 ed       	ldi	r16, 0xD6	; 214
     b58:	13 e0       	ldi	r17, 0x03	; 3
     b5a:	10 93 e3 02 	sts	0x02E3, r17
     b5e:	00 93 e2 02 	sts	0x02E2, r16
	currentMenu = mainmenu;
}

// add child to parent node
void addChild(struct MenuItem * child, struct MenuItem * parentName, int (* function)()){	
	child->parent = parentName; // assign parent to child
     b62:	f0 93 11 02 	sts	0x0211, r31
     b66:	e0 93 10 02 	sts	0x0210, r30
	parentName->children[parentName->numOfChildren] = child; // assign child to parent
     b6a:	8c 01       	movw	r16, r24
     b6c:	0c 5f       	subi	r16, 0xFC	; 252
     b6e:	1f 4f       	sbci	r17, 0xFF	; 255
     b70:	78 01       	movw	r14, r16
     b72:	ee 0c       	add	r14, r14
     b74:	ff 1c       	adc	r15, r15
     b76:	e7 01       	movw	r28, r14
     b78:	ca 57       	subi	r28, 0x7A	; 122
     b7a:	dd 4f       	sbci	r29, 0xFD	; 253
     b7c:	99 82       	std	Y+1, r9	; 0x01
     b7e:	88 82       	st	Y, r8
	parentName->numOfChildren++; // add to number of children
	child->fp = function;
     b80:	10 92 23 02 	sts	0x0223, r1
     b84:	10 92 22 02 	sts	0x0222, r1
	currentMenu = mainmenu;
}

// add child to parent node
void addChild(struct MenuItem * child, struct MenuItem * parentName, int (* function)()){	
	child->parent = parentName; // assign parent to child
     b88:	f0 93 a1 02 	sts	0x02A1, r31
     b8c:	e0 93 a0 02 	sts	0x02A0, r30
	parentName->children[parentName->numOfChildren] = child; // assign child to parent
     b90:	f6 01       	movw	r30, r12
     b92:	e0 57       	subi	r30, 0x70	; 112
     b94:	fd 4f       	sbci	r31, 0xFD	; 253
     b96:	b1 83       	std	Z+1, r27	; 0x01
     b98:	a0 83       	st	Z, r26
	parentName->numOfChildren++; // add to number of children
     b9a:	fb 01       	movw	r30, r22
     b9c:	11 83       	std	Z+1, r17	; 0x01
     b9e:	00 83       	st	Z, r16
	child->fp = function;
     ba0:	10 92 b3 02 	sts	0x02B3, r1
     ba4:	10 92 b2 02 	sts	0x02B2, r1
	currentMenu = mainmenu;
}

// add child to parent node
void addChild(struct MenuItem * child, struct MenuItem * parentName, int (* function)()){	
	child->parent = parentName; // assign parent to child
     ba8:	90 92 29 02 	sts	0x0229, r9
     bac:	80 92 28 02 	sts	0x0228, r8
	parentName->children[parentName->numOfChildren] = child; // assign child to parent
     bb0:	e4 e2       	ldi	r30, 0x24	; 36
     bb2:	f2 e0       	ldi	r31, 0x02	; 2
     bb4:	80 81       	ld	r24, Z
     bb6:	91 81       	ldd	r25, Z+1	; 0x01
     bb8:	ec 01       	movw	r28, r24
     bba:	cc 0f       	add	r28, r28
     bbc:	dd 1f       	adc	r29, r29
     bbe:	ce 5e       	subi	r28, 0xEE	; 238
     bc0:	dd 4f       	sbci	r29, 0xFD	; 253
     bc2:	59 83       	std	Y+1, r21	; 0x01
     bc4:	48 83       	st	Y, r20
	parentName->numOfChildren++; // add to number of children
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	91 83       	std	Z+1, r25	; 0x01
     bca:	80 83       	st	Z, r24
	child->fp = function;
     bcc:	8b ed       	ldi	r24, 0xDB	; 219
     bce:	93 e0       	ldi	r25, 0x03	; 3
     bd0:	90 93 3b 02 	sts	0x023B, r25
     bd4:	80 93 3a 02 	sts	0x023A, r24
	currentMenu = mainmenu;
}

// add child to parent node
void addChild(struct MenuItem * child, struct MenuItem * parentName, int (* function)()){	
	child->parent = parentName; // assign parent to child
     bd8:	b0 93 71 02 	sts	0x0271, r27
     bdc:	a0 93 70 02 	sts	0x0270, r26
	parentName->children[parentName->numOfChildren] = child; // assign child to parent
     be0:	e4 eb       	ldi	r30, 0xB4	; 180
     be2:	f2 e0       	ldi	r31, 0x02	; 2
     be4:	40 81       	ld	r20, Z
     be6:	51 81       	ldd	r21, Z+1	; 0x01
     be8:	ca 01       	movw	r24, r20
     bea:	02 96       	adiw	r24, 0x02	; 2
     bec:	ec 01       	movw	r28, r24
     bee:	cc 0f       	add	r28, r28
     bf0:	dd 1f       	adc	r29, r29
     bf2:	c2 56       	subi	r28, 0x62	; 98
     bf4:	dd 4f       	sbci	r29, 0xFD	; 253
     bf6:	39 83       	std	Y+1, r19	; 0x01
     bf8:	28 83       	st	Y, r18
	parentName->numOfChildren++; // add to number of children
	child->fp = function;
     bfa:	2b ee       	ldi	r18, 0xEB	; 235
     bfc:	33 e0       	ldi	r19, 0x03	; 3
     bfe:	30 93 83 02 	sts	0x0283, r19
     c02:	20 93 82 02 	sts	0x0282, r18
	currentMenu = mainmenu;
}

// add child to parent node
void addChild(struct MenuItem * child, struct MenuItem * parentName, int (* function)()){	
	child->parent = parentName; // assign parent to child
     c06:	b0 93 b9 02 	sts	0x02B9, r27
     c0a:	a0 93 b8 02 	sts	0x02B8, r26
	parentName->children[parentName->numOfChildren] = child; // assign child to parent
     c0e:	da 01       	movw	r26, r20
     c10:	aa 0f       	add	r26, r26
     c12:	bb 1f       	adc	r27, r27
     c14:	ac 55       	subi	r26, 0x5C	; 92
     c16:	bd 4f       	sbci	r27, 0xFD	; 253
     c18:	ad 92       	st	X+, r10
     c1a:	bc 92       	st	X, r11
	parentName->numOfChildren++; // add to number of children
     c1c:	91 83       	std	Z+1, r25	; 0x01
     c1e:	80 83       	st	Z, r24
	child->fp = function;
     c20:	86 ee       	ldi	r24, 0xE6	; 230
     c22:	93 e0       	ldi	r25, 0x03	; 3
     c24:	90 93 cb 02 	sts	0x02CB, r25
     c28:	80 93 ca 02 	sts	0x02CA, r24
	
	/*getChildren(&mainmenu);
	newgame.fp(); // run function from menu item node
	getParent(&newgame); // print parent node
	*/
	printMenuToScreen(&mainmenu);	
     c2c:	86 e8       	ldi	r24, 0x86	; 134
     c2e:	92 e0       	ldi	r25, 0x02	; 2
     c30:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <printMenuToScreen>
	//printMenuToScreen(&settings);
	
	currentMenu = mainmenu;
     c34:	88 e1       	ldi	r24, 0x18	; 24
     c36:	e6 e8       	ldi	r30, 0x86	; 134
     c38:	f2 e0       	ldi	r31, 0x02	; 2
     c3a:	a6 e5       	ldi	r26, 0x56	; 86
     c3c:	b2 e0       	ldi	r27, 0x02	; 2
     c3e:	01 90       	ld	r0, Z+
     c40:	0d 92       	st	X+, r0
     c42:	8a 95       	dec	r24
     c44:	e1 f7       	brne	.-8      	; 0xc3e <menuInit+0x1e6>
}
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	cf 90       	pop	r12
     c56:	bf 90       	pop	r11
     c58:	af 90       	pop	r10
     c5a:	9f 90       	pop	r9
     c5c:	8f 90       	pop	r8
     c5e:	08 95       	ret

00000c60 <printCursor>:
		printf("No parents...\n");
		return 0;
	}
}

void printCursor(int currentPos, int offset){
     c60:	0f 93       	push	r16
     c62:	1f 93       	push	r17
     c64:	cf 93       	push	r28
     c66:	df 93       	push	r29
     c68:	8c 01       	movw	r16, r24
     c6a:	eb 01       	movw	r28, r22
	OLED_ClearCol();
     c6c:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <OLED_ClearCol>
	OLED_Pos(currentPos + offset, 1);
     c70:	61 e0       	ldi	r22, 0x01	; 1
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	c8 01       	movw	r24, r16
     c76:	8c 0f       	add	r24, r28
     c78:	9d 1f       	adc	r25, r29
     c7a:	0e 94 b8 07 	call	0xf70	; 0xf70 <OLED_Pos>
	OLED_Print(" >");
     c7e:	82 ea       	ldi	r24, 0xA2	; 162
     c80:	91 e0       	ldi	r25, 0x01	; 1
     c82:	0e 94 6b 07 	call	0xed6	; 0xed6 <OLED_Print>
}
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
     c8c:	0f 91       	pop	r16
     c8e:	08 95       	ret

00000c90 <setMenu>:
		printf("%d: %s\n", i, nodeName->children[i]->title);
	}
	printf("\n");
}
				
void setMenu(struct MenuItem * currentMenu, int joystick, int button, int *menuItem){
     c90:	ef 92       	push	r14
     c92:	ff 92       	push	r15
     c94:	0f 93       	push	r16
     c96:	1f 93       	push	r17
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	ec 01       	movw	r28, r24
     c9e:	89 01       	movw	r16, r18
	
	int maxItems = currentMenu->numOfChildren-1; // Set number of current menu items
     ca0:	ee 88       	ldd	r14, Y+22	; 0x16
     ca2:	ff 88       	ldd	r15, Y+23	; 0x17
	
	if(button){ // On button pressed
     ca4:	45 2b       	or	r20, r21
     ca6:	09 f4       	brne	.+2      	; 0xcaa <setMenu+0x1a>
     ca8:	46 c0       	rjmp	.+140    	; 0xd36 <setMenu+0xa6>
     caa:	2f ef       	ldi	r18, 0xFF	; 255
     cac:	8f ef       	ldi	r24, 0xFF	; 255
     cae:	92 e0       	ldi	r25, 0x02	; 2
     cb0:	21 50       	subi	r18, 0x01	; 1
     cb2:	80 40       	sbci	r24, 0x00	; 0
     cb4:	90 40       	sbci	r25, 0x00	; 0
     cb6:	e1 f7       	brne	.-8      	; 0xcb0 <setMenu+0x20>
     cb8:	00 c0       	rjmp	.+0      	; 0xcba <setMenu+0x2a>
     cba:	00 c0       	rjmp	.+0      	; 0xcbc <setMenu+0x2c>
		_delay_ms(200); // delay after keystroke
		if(currentMenu->children[*menuItem]->children[0] != NULL){ // if item has child
     cbc:	d8 01       	movw	r26, r16
     cbe:	ed 91       	ld	r30, X+
     cc0:	fc 91       	ld	r31, X
     cc2:	32 96       	adiw	r30, 0x02	; 2
     cc4:	ee 0f       	add	r30, r30
     cc6:	ff 1f       	adc	r31, r31
     cc8:	ec 0f       	add	r30, r28
     cca:	fd 1f       	adc	r31, r29
     ccc:	01 90       	ld	r0, Z+
     cce:	f0 81       	ld	r31, Z
     cd0:	e0 2d       	mov	r30, r0
     cd2:	84 81       	ldd	r24, Z+4	; 0x04
     cd4:	95 81       	ldd	r25, Z+5	; 0x05
     cd6:	89 2b       	or	r24, r25
     cd8:	b1 f0       	breq	.+44     	; 0xd06 <setMenu+0x76>
			*currentMenu = *currentMenu->children[*menuItem]; // set child menu as current menu
     cda:	88 e1       	ldi	r24, 0x18	; 24
     cdc:	de 01       	movw	r26, r28
     cde:	01 90       	ld	r0, Z+
     ce0:	0d 92       	st	X+, r0
     ce2:	8a 95       	dec	r24
     ce4:	e1 f7       	brne	.-8      	; 0xcde <setMenu+0x4e>
			*menuItem = 0;
     ce6:	f8 01       	movw	r30, r16
     ce8:	11 82       	std	Z+1, r1	; 0x01
     cea:	10 82       	st	Z, r1
			OLED_ClearScreen(); // clear oled screen
     cec:	0e 94 01 08 	call	0x1002	; 0x1002 <OLED_ClearScreen>
			printMenuToScreen(currentMenu); // Show menu on screen
     cf0:	ce 01       	movw	r24, r28
     cf2:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <printMenuToScreen>
			printCursor(*menuItem, 2);
     cf6:	62 e0       	ldi	r22, 0x02	; 2
     cf8:	70 e0       	ldi	r23, 0x00	; 0
     cfa:	d8 01       	movw	r26, r16
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	0e 94 30 06 	call	0xc60	; 0xc60 <printCursor>
     d04:	18 c0       	rjmp	.+48     	; 0xd36 <setMenu+0xa6>
		}
		else if(currentMenu->children[*menuItem]->fp() != NULL){ // else if child has function			
     d06:	04 88       	ldd	r0, Z+20	; 0x14
     d08:	f5 89       	ldd	r31, Z+21	; 0x15
     d0a:	e0 2d       	mov	r30, r0
     d0c:	09 95       	icall
     d0e:	89 2b       	or	r24, r25
     d10:	91 f4       	brne	.+36     	; 0xd36 <setMenu+0xa6>
	printf("\n");
}
				
void setMenu(struct MenuItem * currentMenu, int joystick, int button, int *menuItem){
	
	int maxItems = currentMenu->numOfChildren-1; // Set number of current menu items
     d12:	b1 e0       	ldi	r27, 0x01	; 1
     d14:	eb 1a       	sub	r14, r27
     d16:	f1 08       	sbc	r15, r1
		else if(currentMenu->children[*menuItem]->fp() != NULL){ // else if child has function			
			//OLED_ClearScreen(); // clear oled screen
			//printf("Running function in %s\n", currentMenu->title);
			//currentMenu->children[menuItem]->fp(); // run function
		}
		else if (menuItem == maxItems && currentMenu->parent != NULL){ // if has reached bottom of menu
     d18:	0e 15       	cp	r16, r14
     d1a:	1f 05       	cpc	r17, r15
     d1c:	61 f4       	brne	.+24     	; 0xd36 <setMenu+0xa6>
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	9b 81       	ldd	r25, Y+3	; 0x03
     d22:	89 2b       	or	r24, r25
     d24:	41 f0       	breq	.+16     	; 0xd36 <setMenu+0xa6>
			OLED_ClearScreen(); // clear oled screen
     d26:	0e 94 01 08 	call	0x1002	; 0x1002 <OLED_ClearScreen>
			currentMenu = currentMenu->parent; // set parent menu as current menu
			printMenuToScreen(currentMenu->parent); // Show menu on screen
     d2a:	ea 81       	ldd	r30, Y+2	; 0x02
     d2c:	fb 81       	ldd	r31, Y+3	; 0x03
     d2e:	82 81       	ldd	r24, Z+2	; 0x02
     d30:	93 81       	ldd	r25, Z+3	; 0x03
     d32:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <printMenuToScreen>
		}
	//_delay_ms(500); // delay after keystroke
	}
}
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	1f 91       	pop	r17
     d3c:	0f 91       	pop	r16
     d3e:	ff 90       	pop	r15
     d40:	ef 90       	pop	r14
     d42:	08 95       	ret

00000d44 <main>:


int main()
{
	//Initialize commands
	uartInit();
     d44:	0e 94 c7 08 	call	0x118e	; 0x118e <uartInit>
	sramInit();
     d48:	0e 94 b8 08 	call	0x1170	; 0x1170 <sramInit>
	OLED_Init();
     d4c:	0e 94 0b 08 	call	0x1016	; 0x1016 <OLED_Init>
	menuInit();
     d50:	0e 94 2c 05 	call	0xa58	; 0xa58 <menuInit>
	CAN_init();
     d54:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <CAN_init>
		CAN_recieve(&receivedMessage);*/
		//CAN_printMessage(&receivedMessage);
		//_delay_ms(10);
		
		//Menu
		maxItems = currentMenu.numOfChildren;
     d58:	cc e6       	ldi	r28, 0x6C	; 108
     d5a:	d2 e0       	ldi	r29, 0x02	; 2
		if(joystickValueY != 50){						
			if(joystickValueY > 55 && currentMenuItem > 0)
				currentMenuItem--;
			else if(joystickValueY < 45 && currentMenuItem < maxItems-1)
				currentMenuItem++;
			else if(joystickValueY < 45 && currentMenuItem < maxItems && currentMenu.parent != NULL)
     d5c:	0f 2e       	mov	r0, r31
     d5e:	f8 e5       	ldi	r31, 0x58	; 88
     d60:	ef 2e       	mov	r14, r31
     d62:	f2 e0       	ldi	r31, 0x02	; 2
     d64:	ff 2e       	mov	r15, r31
     d66:	f0 2d       	mov	r31, r0
	while(1){
		
		//CAN test
		
		//read buttons		
		leftButtonPressed = 0x01 & PINB;
     d68:	86 b3       	in	r24, 0x16	; 22
     d6a:	81 70       	andi	r24, 0x01	; 1
     d6c:	80 93 07 02 	sts	0x0207, r24
		rightButtonPressed = (0x02 & PINB) >> 1;
     d70:	86 b3       	in	r24, 0x16	; 22
     d72:	86 95       	lsr	r24
     d74:	81 70       	andi	r24, 0x01	; 1
     d76:	80 93 06 02 	sts	0x0206, r24
		
		//read joystick
		joystickValueX = getControlOutput(1,100,5, &maxMinValues[0], &maxMinValues[1]);		
     d7a:	0a e0       	ldi	r16, 0x0A	; 10
     d7c:	11 e0       	ldi	r17, 0x01	; 1
     d7e:	28 e0       	ldi	r18, 0x08	; 8
     d80:	31 e0       	ldi	r19, 0x01	; 1
     d82:	45 e0       	ldi	r20, 0x05	; 5
     d84:	50 e0       	ldi	r21, 0x00	; 0
     d86:	64 e6       	ldi	r22, 0x64	; 100
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	0e 94 dd 02 	call	0x5ba	; 0x5ba <getControlOutput>
     d92:	90 93 0d 02 	sts	0x020D, r25
     d96:	80 93 0c 02 	sts	0x020C, r24
		joystickValueY = getControlOutput(2,100,5, &maxMinValues[2], &maxMinValues[3]);
     d9a:	0e e0       	ldi	r16, 0x0E	; 14
     d9c:	11 e0       	ldi	r17, 0x01	; 1
     d9e:	2c e0       	ldi	r18, 0x0C	; 12
     da0:	31 e0       	ldi	r19, 0x01	; 1
     da2:	45 e0       	ldi	r20, 0x05	; 5
     da4:	50 e0       	ldi	r21, 0x00	; 0
     da6:	64 e6       	ldi	r22, 0x64	; 100
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	82 e0       	ldi	r24, 0x02	; 2
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 dd 02 	call	0x5ba	; 0x5ba <getControlOutput>
     db2:	90 93 0b 02 	sts	0x020B, r25
     db6:	80 93 0a 02 	sts	0x020A, r24
		
		//read slider
		sliderValueA = getControlOutput(3,100,5, &maxMinValues[4], &maxMinValues[5]);
     dba:	02 e1       	ldi	r16, 0x12	; 18
     dbc:	11 e0       	ldi	r17, 0x01	; 1
     dbe:	20 e1       	ldi	r18, 0x10	; 16
     dc0:	31 e0       	ldi	r19, 0x01	; 1
     dc2:	45 e0       	ldi	r20, 0x05	; 5
     dc4:	50 e0       	ldi	r21, 0x00	; 0
     dc6:	64 e6       	ldi	r22, 0x64	; 100
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	83 e0       	ldi	r24, 0x03	; 3
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 94 dd 02 	call	0x5ba	; 0x5ba <getControlOutput>
     dd2:	90 93 09 02 	sts	0x0209, r25
     dd6:	80 93 08 02 	sts	0x0208, r24
		CAN_recieve(&receivedMessage);*/
		//CAN_printMessage(&receivedMessage);
		//_delay_ms(10);
		
		//Menu
		maxItems = currentMenu.numOfChildren;
     dda:	88 81       	ld	r24, Y
     ddc:	99 81       	ldd	r25, Y+1	; 0x01
     dde:	90 93 03 02 	sts	0x0203, r25
     de2:	80 93 02 02 	sts	0x0202, r24
		//printf("%s\n", currentMenu.title);
		setMenu(&currentMenu, joystickValueY, leftButtonPressed, &currentMenuItem);		
     de6:	40 91 07 02 	lds	r20, 0x0207
     dea:	50 e0       	ldi	r21, 0x00	; 0
     dec:	60 91 0a 02 	lds	r22, 0x020A
     df0:	70 91 0b 02 	lds	r23, 0x020B
     df4:	24 e0       	ldi	r18, 0x04	; 4
     df6:	32 e0       	ldi	r19, 0x02	; 2
     df8:	86 e5       	ldi	r24, 0x56	; 86
     dfa:	92 e0       	ldi	r25, 0x02	; 2
     dfc:	0e 94 48 06 	call	0xc90	; 0xc90 <setMenu>
		
		// Move menu cursor
		if(joystickValueY != 50){						
     e00:	80 91 0a 02 	lds	r24, 0x020A
     e04:	90 91 0b 02 	lds	r25, 0x020B
     e08:	82 33       	cpi	r24, 0x32	; 50
     e0a:	91 05       	cpc	r25, r1
     e0c:	09 f4       	brne	.+2      	; 0xe10 <main+0xcc>
     e0e:	ac cf       	rjmp	.-168    	; 0xd68 <main+0x24>
			if(joystickValueY > 55 && currentMenuItem > 0)
     e10:	88 33       	cpi	r24, 0x38	; 56
     e12:	91 05       	cpc	r25, r1
     e14:	74 f0       	brlt	.+28     	; 0xe32 <main+0xee>
     e16:	20 91 04 02 	lds	r18, 0x0204
     e1a:	30 91 05 02 	lds	r19, 0x0205
     e1e:	12 16       	cp	r1, r18
     e20:	13 06       	cpc	r1, r19
     e22:	3c f4       	brge	.+14     	; 0xe32 <main+0xee>
				currentMenuItem--;
     e24:	21 50       	subi	r18, 0x01	; 1
     e26:	31 09       	sbc	r19, r1
     e28:	30 93 05 02 	sts	0x0205, r19
     e2c:	20 93 04 02 	sts	0x0204, r18
     e30:	23 c0       	rjmp	.+70     	; 0xe78 <main+0x134>
			else if(joystickValueY < 45 && currentMenuItem < maxItems-1)
     e32:	8d 97       	sbiw	r24, 0x2d	; 45
     e34:	0c f5       	brge	.+66     	; 0xe78 <main+0x134>
     e36:	20 91 02 02 	lds	r18, 0x0202
     e3a:	30 91 03 02 	lds	r19, 0x0203
     e3e:	80 91 04 02 	lds	r24, 0x0204
     e42:	90 91 05 02 	lds	r25, 0x0205
     e46:	a9 01       	movw	r20, r18
     e48:	41 50       	subi	r20, 0x01	; 1
     e4a:	51 09       	sbc	r21, r1
     e4c:	84 17       	cp	r24, r20
     e4e:	95 07       	cpc	r25, r21
     e50:	34 f4       	brge	.+12     	; 0xe5e <main+0x11a>
				currentMenuItem++;
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	90 93 05 02 	sts	0x0205, r25
     e58:	80 93 04 02 	sts	0x0204, r24
     e5c:	0d c0       	rjmp	.+26     	; 0xe78 <main+0x134>
			else if(joystickValueY < 45 && currentMenuItem < maxItems && currentMenu.parent != NULL)
     e5e:	82 17       	cp	r24, r18
     e60:	93 07       	cpc	r25, r19
     e62:	54 f4       	brge	.+20     	; 0xe78 <main+0x134>
     e64:	f7 01       	movw	r30, r14
     e66:	20 81       	ld	r18, Z
     e68:	31 81       	ldd	r19, Z+1	; 0x01
     e6a:	23 2b       	or	r18, r19
     e6c:	29 f0       	breq	.+10     	; 0xe78 <main+0x134>
				currentMenuItem++;
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	90 93 05 02 	sts	0x0205, r25
     e74:	80 93 04 02 	sts	0x0204, r24
				
			OLED_ClearCol();
     e78:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <OLED_ClearCol>
			OLED_Pos(currentMenuItem+2, 1);
     e7c:	80 91 04 02 	lds	r24, 0x0204
     e80:	90 91 05 02 	lds	r25, 0x0205
     e84:	61 e0       	ldi	r22, 0x01	; 1
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	02 96       	adiw	r24, 0x02	; 2
     e8a:	0e 94 b8 07 	call	0xf70	; 0xf70 <OLED_Pos>
			OLED_Print(" >");
     e8e:	82 ea       	ldi	r24, 0xA2	; 162
     e90:	91 e0       	ldi	r25, 0x01	; 1
     e92:	0e 94 6b 07 	call	0xed6	; 0xed6 <OLED_Print>
     e96:	ff ef       	ldi	r31, 0xFF	; 255
     e98:	2f e7       	ldi	r18, 0x7F	; 127
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	f1 50       	subi	r31, 0x01	; 1
     e9e:	20 40       	sbci	r18, 0x00	; 0
     ea0:	80 40       	sbci	r24, 0x00	; 0
     ea2:	e1 f7       	brne	.-8      	; 0xe9c <main+0x158>
     ea4:	00 c0       	rjmp	.+0      	; 0xea6 <main+0x162>
     ea6:	00 c0       	rjmp	.+0      	; 0xea8 <main+0x164>
     ea8:	5f cf       	rjmp	.-322    	; 0xd68 <main+0x24>

00000eaa <OLED_PrintChar>:
		//Set higher column start address
		*OLED_Command = 0x10 + (column*(FONTWIDTH) >> 4);
	}
}

void OLED_PrintChar(char c) {
     eaa:	28 e0       	ldi	r18, 0x08	; 8
     eac:	82 9f       	mul	r24, r18
     eae:	c0 01       	movw	r24, r0
     eb0:	11 24       	eor	r1, r1
     eb2:	fc 01       	movw	r30, r24
     eb4:	e0 59       	subi	r30, 0x90	; 144
     eb6:	f0 40       	sbci	r31, 0x00	; 0
	//Write a character
	for (int i = 0; i < FONTWIDTH; i++) {
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
		*OLED_Data = pgm_read_byte(&font8[c-' '][i]);
     ebc:	a0 91 18 01 	lds	r26, 0x0118
     ec0:	b0 91 19 01 	lds	r27, 0x0119
     ec4:	84 91       	lpm	r24, Z
     ec6:	8c 93       	st	X, r24
	}
}

void OLED_PrintChar(char c) {
	//Write a character
	for (int i = 0; i < FONTWIDTH; i++) {
     ec8:	2f 5f       	subi	r18, 0xFF	; 255
     eca:	3f 4f       	sbci	r19, 0xFF	; 255
     ecc:	31 96       	adiw	r30, 0x01	; 1
     ece:	28 30       	cpi	r18, 0x08	; 8
     ed0:	31 05       	cpc	r19, r1
     ed2:	a1 f7       	brne	.-24     	; 0xebc <OLED_PrintChar+0x12>
		*OLED_Data = pgm_read_byte(&font8[c-' '][i]);
	}	
	
}
     ed4:	08 95       	ret

00000ed6 <OLED_Print>:

void OLED_Print(char *c) {
     ed6:	cf 93       	push	r28
     ed8:	df 93       	push	r29
     eda:	ec 01       	movw	r28, r24
	int i = 0;	
	char tmp;
	//Write the complete string
	while(c[i] != '\0'){
     edc:	88 81       	ld	r24, Y
     ede:	88 23       	and	r24, r24
     ee0:	31 f0       	breq	.+12     	; 0xeee <OLED_Print+0x18>
     ee2:	21 96       	adiw	r28, 0x01	; 1
		OLED_PrintChar(c[i]);
     ee4:	0e 94 55 07 	call	0xeaa	; 0xeaa <OLED_PrintChar>

void OLED_Print(char *c) {
	int i = 0;	
	char tmp;
	//Write the complete string
	while(c[i] != '\0'){
     ee8:	89 91       	ld	r24, Y+
     eea:	81 11       	cpse	r24, r1
     eec:	fb cf       	rjmp	.-10     	; 0xee4 <OLED_Print+0xe>
		OLED_PrintChar(c[i]);
		i++;
	}
}
     eee:	df 91       	pop	r29
     ef0:	cf 91       	pop	r28
     ef2:	08 95       	ret

00000ef4 <OLED_Home>:
	}
}

//Set the cursor to the start of the screen
void OLED_Home(){
	*OLED_Command = 0x21;
     ef4:	e0 91 1a 01 	lds	r30, 0x011A
     ef8:	f0 91 1b 01 	lds	r31, 0x011B
     efc:	81 e2       	ldi	r24, 0x21	; 33
     efe:	80 83       	st	Z, r24
	*OLED_Command = 0x00;
     f00:	e0 91 1a 01 	lds	r30, 0x011A
     f04:	f0 91 1b 01 	lds	r31, 0x011B
     f08:	10 82       	st	Z, r1
	*OLED_Command = 0x7f;	
     f0a:	e0 91 1a 01 	lds	r30, 0x011A
     f0e:	f0 91 1b 01 	lds	r31, 0x011B
     f12:	8f e7       	ldi	r24, 0x7F	; 127
     f14:	80 83       	st	Z, r24
	*OLED_Command = 0x22;
     f16:	e0 91 1a 01 	lds	r30, 0x011A
     f1a:	f0 91 1b 01 	lds	r31, 0x011B
     f1e:	82 e2       	ldi	r24, 0x22	; 34
     f20:	80 83       	st	Z, r24
	*OLED_Command = 0x00;
     f22:	e0 91 1a 01 	lds	r30, 0x011A
     f26:	f0 91 1b 01 	lds	r31, 0x011B
     f2a:	10 82       	st	Z, r1
	*OLED_Command = 0x07;
     f2c:	e0 91 1a 01 	lds	r30, 0x011A
     f30:	f0 91 1b 01 	lds	r31, 0x011B
     f34:	87 e0       	ldi	r24, 0x07	; 7
     f36:	80 83       	st	Z, r24
     f38:	08 95       	ret

00000f3a <OLED_GotoLine>:
		i++;
	}
}

//Goto specific line
void OLED_GotoLine(uint8_t line){	
     f3a:	cf 93       	push	r28
     f3c:	c8 2f       	mov	r28, r24
	OLED_Home();	
     f3e:	0e 94 7a 07 	call	0xef4	; 0xef4 <OLED_Home>
	if(line < 8){
     f42:	c8 30       	cpi	r28, 0x08	; 8
     f44:	98 f4       	brcc	.+38     	; 0xf6c <OLED_GotoLine+0x32>
		//Save page
		page = line;
     f46:	c0 93 e7 02 	sts	0x02E7, r28
		//Set lower column start address
		*OLED_Command = 0x00;
     f4a:	e0 91 1a 01 	lds	r30, 0x011A
     f4e:	f0 91 1b 01 	lds	r31, 0x011B
     f52:	10 82       	st	Z, r1
		//Set higher column start address
		*OLED_Command = 0x10;
     f54:	e0 91 1a 01 	lds	r30, 0x011A
     f58:	f0 91 1b 01 	lds	r31, 0x011B
     f5c:	80 e1       	ldi	r24, 0x10	; 16
     f5e:	80 83       	st	Z, r24
		//Set page address
		*OLED_Command = 0xB0 | line;
     f60:	e0 91 1a 01 	lds	r30, 0x011A
     f64:	f0 91 1b 01 	lds	r31, 0x011B
     f68:	c0 6b       	ori	r28, 0xB0	; 176
     f6a:	c0 83       	st	Z, r28
	}
}
     f6c:	cf 91       	pop	r28
     f6e:	08 95       	ret

00000f70 <OLED_Pos>:
	*OLED_Data =0b00010100;
	*OLED_Data =0b00000000;
}

//Goto specific line and column
void OLED_Pos(uint8_t line, uint8_t column){
     f70:	cf 93       	push	r28
     f72:	c6 2f       	mov	r28, r22
	
	OLED_GotoLine(line);
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	0e 94 9d 07 	call	0xf3a	; 0xf3a <OLED_GotoLine>
	
	if(column < 128/FONTWIDTH){
     f7a:	c0 31       	cpi	r28, 0x10	; 16
     f7c:	a8 f4       	brcc	.+42     	; 0xfa8 <OLED_Pos+0x38>
		//Save page
		col = column*(FONTWIDTH);
     f7e:	8c 2f       	mov	r24, r28
     f80:	88 0f       	add	r24, r24
     f82:	88 0f       	add	r24, r24
     f84:	88 0f       	add	r24, r24
     f86:	80 93 e6 02 	sts	0x02E6, r24
		//Set lower column start address
		*OLED_Command = 0x00 + (column*(FONTWIDTH) >> 4);
     f8a:	e0 91 1a 01 	lds	r30, 0x011A
     f8e:	f0 91 1b 01 	lds	r31, 0x011B
     f92:	6c 2f       	mov	r22, r28
     f94:	70 e0       	ldi	r23, 0x00	; 0
     f96:	76 95       	lsr	r23
     f98:	67 95       	ror	r22
     f9a:	60 83       	st	Z, r22
		//Set higher column start address
		*OLED_Command = 0x10 + (column*(FONTWIDTH) >> 4);
     f9c:	e0 91 1a 01 	lds	r30, 0x011A
     fa0:	f0 91 1b 01 	lds	r31, 0x011B
     fa4:	60 5f       	subi	r22, 0xF0	; 240
     fa6:	60 83       	st	Z, r22
	}
}
     fa8:	cf 91       	pop	r28
     faa:	08 95       	ret

00000fac <OLED_ClearLine>:
}

//Clear all characters on a specific line
void OLED_ClearLine(uint8_t line){
	//Goto specific line
	OLED_GotoLine(line);
     fac:	0e 94 9d 07 	call	0xf3a	; 0xf3a <OLED_GotoLine>
	//For all pixels on that line, write empty space
	for(uint8_t i=0; i<128; i++){
     fb0:	80 e0       	ldi	r24, 0x00	; 0
		*OLED_Data = 0x00;
     fb2:	e0 91 18 01 	lds	r30, 0x0118
     fb6:	f0 91 19 01 	lds	r31, 0x0119
     fba:	10 82       	st	Z, r1
//Clear all characters on a specific line
void OLED_ClearLine(uint8_t line){
	//Goto specific line
	OLED_GotoLine(line);
	//For all pixels on that line, write empty space
	for(uint8_t i=0; i<128; i++){
     fbc:	8f 5f       	subi	r24, 0xFF	; 255
     fbe:	80 38       	cpi	r24, 0x80	; 128
     fc0:	c1 f7       	brne	.-16     	; 0xfb2 <OLED_ClearLine+0x6>
		*OLED_Data = 0x00;
	}
	OLED_Home();
     fc2:	0e 94 7a 07 	call	0xef4	; 0xef4 <OLED_Home>
     fc6:	08 95       	ret

00000fc8 <OLED_ClearCol>:
}

//Clear cursor col
void OLED_ClearCol(){
     fc8:	1f 93       	push	r17
     fca:	cf 93       	push	r28
     fcc:	df 93       	push	r29
	for(uint8_t j=0; j<8; j++){
     fce:	c0 e0       	ldi	r28, 0x00	; 0
		OLED_Pos(j, 0);
     fd0:	10 e1       	ldi	r17, 0x10	; 16
     fd2:	d0 e0       	ldi	r29, 0x00	; 0
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	8c 2f       	mov	r24, r28
     fd8:	0e 94 b8 07 	call	0xf70	; 0xf70 <OLED_Pos>
     fdc:	21 2f       	mov	r18, r17
     fde:	3d 2f       	mov	r19, r29
		for (int i = 0; i < FONTWIDTH*2; i++) {
			*OLED_Data = 0x00;
     fe0:	e0 91 18 01 	lds	r30, 0x0118
     fe4:	f0 91 19 01 	lds	r31, 0x0119
     fe8:	10 82       	st	Z, r1
     fea:	21 50       	subi	r18, 0x01	; 1
     fec:	31 09       	sbc	r19, r1

//Clear cursor col
void OLED_ClearCol(){
	for(uint8_t j=0; j<8; j++){
		OLED_Pos(j, 0);
		for (int i = 0; i < FONTWIDTH*2; i++) {
     fee:	21 15       	cp	r18, r1
     ff0:	31 05       	cpc	r19, r1
     ff2:	b1 f7       	brne	.-20     	; 0xfe0 <OLED_ClearCol+0x18>
	OLED_Home();
}

//Clear cursor col
void OLED_ClearCol(){
	for(uint8_t j=0; j<8; j++){
     ff4:	cf 5f       	subi	r28, 0xFF	; 255
     ff6:	c8 30       	cpi	r28, 0x08	; 8
     ff8:	69 f7       	brne	.-38     	; 0xfd4 <OLED_ClearCol+0xc>
		for (int i = 0; i < FONTWIDTH*2; i++) {
			*OLED_Data = 0x00;
		}
	}
		
}
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	1f 91       	pop	r17
    1000:	08 95       	ret

00001002 <OLED_ClearScreen>:

//Removes all things written on the screen
void OLED_ClearScreen(){
    1002:	cf 93       	push	r28
	//Runs the function OLED_ClearLine for all lines
	for(uint8_t i=0; i<8; i++){
    1004:	c0 e0       	ldi	r28, 0x00	; 0
		OLED_ClearLine(i);
    1006:	8c 2f       	mov	r24, r28
    1008:	0e 94 d6 07 	call	0xfac	; 0xfac <OLED_ClearLine>
}

//Removes all things written on the screen
void OLED_ClearScreen(){
	//Runs the function OLED_ClearLine for all lines
	for(uint8_t i=0; i<8; i++){
    100c:	cf 5f       	subi	r28, 0xFF	; 255
    100e:	c8 30       	cpi	r28, 0x08	; 8
    1010:	d1 f7       	brne	.-12     	; 0x1006 <OLED_ClearScreen+0x4>
		OLED_ClearLine(i);
	}
}
    1012:	cf 91       	pop	r28
    1014:	08 95       	ret

00001016 <OLED_Init>:
	
	//printf("Initializing OLED_ display... ");
	

	//Display off
	*OLED_Command = 0xAE;	
    1016:	e0 91 1a 01 	lds	r30, 0x011A
    101a:	f0 91 1b 01 	lds	r31, 0x011B
    101e:	8e ea       	ldi	r24, 0xAE	; 174
    1020:	80 83       	st	Z, r24
	//Segment remap
	*OLED_Command = 0xA1;
    1022:	e0 91 1a 01 	lds	r30, 0x011A
    1026:	f0 91 1b 01 	lds	r31, 0x011B
    102a:	81 ea       	ldi	r24, 0xA1	; 161
    102c:	80 83       	st	Z, r24
	//Common pads hardware: alternative
	*OLED_Command = 0xDA;
    102e:	e0 91 1a 01 	lds	r30, 0x011A
    1032:	f0 91 1b 01 	lds	r31, 0x011B
    1036:	8a ed       	ldi	r24, 0xDA	; 218
    1038:	80 83       	st	Z, r24
	*OLED_Command = 0x12;
    103a:	e0 91 1a 01 	lds	r30, 0x011A
    103e:	f0 91 1b 01 	lds	r31, 0x011B
    1042:	82 e1       	ldi	r24, 0x12	; 18
    1044:	80 83       	st	Z, r24
	//Common output scan direction:com63~com0
	*OLED_Command = 0xC8;
    1046:	e0 91 1a 01 	lds	r30, 0x011A
    104a:	f0 91 1b 01 	lds	r31, 0x011B
    104e:	88 ec       	ldi	r24, 0xC8	; 200
    1050:	80 83       	st	Z, r24
	//Multiplex ration mode:63
	*OLED_Command = 0xA8;
    1052:	e0 91 1a 01 	lds	r30, 0x011A
    1056:	f0 91 1b 01 	lds	r31, 0x011B
    105a:	88 ea       	ldi	r24, 0xA8	; 168
    105c:	80 83       	st	Z, r24
	*OLED_Command = 0x3F;
    105e:	e0 91 1a 01 	lds	r30, 0x011A
    1062:	f0 91 1b 01 	lds	r31, 0x011B
    1066:	8f e3       	ldi	r24, 0x3F	; 63
    1068:	80 83       	st	Z, r24
	//Display divide ratio/osc. freq. mode
	
	*OLED_Command = 0xD5;
    106a:	e0 91 1a 01 	lds	r30, 0x011A
    106e:	f0 91 1b 01 	lds	r31, 0x011B
    1072:	85 ed       	ldi	r24, 0xD5	; 213
    1074:	80 83       	st	Z, r24
	*OLED_Command = 0x80;
    1076:	e0 91 1a 01 	lds	r30, 0x011A
    107a:	f0 91 1b 01 	lds	r31, 0x011B
    107e:	80 e8       	ldi	r24, 0x80	; 128
    1080:	80 83       	st	Z, r24
	//Contrast control
	*OLED_Command = 0x81;
    1082:	e0 91 1a 01 	lds	r30, 0x011A
    1086:	f0 91 1b 01 	lds	r31, 0x011B
    108a:	81 e8       	ldi	r24, 0x81	; 129
    108c:	80 83       	st	Z, r24
	*OLED_Command = 0x50;
    108e:	e0 91 1a 01 	lds	r30, 0x011A
    1092:	f0 91 1b 01 	lds	r31, 0x011B
    1096:	80 e5       	ldi	r24, 0x50	; 80
    1098:	80 83       	st	Z, r24
	//Set pre-charge period
	*OLED_Command = 0xD9;
    109a:	e0 91 1a 01 	lds	r30, 0x011A
    109e:	f0 91 1b 01 	lds	r31, 0x011B
    10a2:	89 ed       	ldi	r24, 0xD9	; 217
    10a4:	80 83       	st	Z, r24
	*OLED_Command = 0x21;
    10a6:	e0 91 1a 01 	lds	r30, 0x011A
    10aa:	f0 91 1b 01 	lds	r31, 0x011B
    10ae:	81 e2       	ldi	r24, 0x21	; 33
    10b0:	80 83       	st	Z, r24
	//Set Memory Addressing Mode
	*OLED_Command = 0x20;
    10b2:	e0 91 1a 01 	lds	r30, 0x011A
    10b6:	f0 91 1b 01 	lds	r31, 0x011B
    10ba:	80 e2       	ldi	r24, 0x20	; 32
    10bc:	80 83       	st	Z, r24
	*OLED_Command = 0x02;
    10be:	e0 91 1a 01 	lds	r30, 0x011A
    10c2:	f0 91 1b 01 	lds	r31, 0x011B
    10c6:	82 e0       	ldi	r24, 0x02	; 2
    10c8:	80 83       	st	Z, r24
	//VCOM deselect level mode
	*OLED_Command = 0xDB;
    10ca:	e0 91 1a 01 	lds	r30, 0x011A
    10ce:	f0 91 1b 01 	lds	r31, 0x011B
    10d2:	8b ed       	ldi	r24, 0xDB	; 219
    10d4:	80 83       	st	Z, r24
	*OLED_Command = 0x30;
    10d6:	e0 91 1a 01 	lds	r30, 0x011A
    10da:	f0 91 1b 01 	lds	r31, 0x011B
    10de:	80 e3       	ldi	r24, 0x30	; 48
    10e0:	80 83       	st	Z, r24
	//Master configuration
	*OLED_Command = 0xAD;
    10e2:	e0 91 1a 01 	lds	r30, 0x011A
    10e6:	f0 91 1b 01 	lds	r31, 0x011B
    10ea:	8d ea       	ldi	r24, 0xAD	; 173
    10ec:	80 83       	st	Z, r24
	*OLED_Command = 0x00;
    10ee:	e0 91 1a 01 	lds	r30, 0x011A
    10f2:	f0 91 1b 01 	lds	r31, 0x011B
    10f6:	10 82       	st	Z, r1
	//Out follows RAM content
	*OLED_Command = 0xA4;
    10f8:	e0 91 1a 01 	lds	r30, 0x011A
    10fc:	f0 91 1b 01 	lds	r31, 0x011B
    1100:	84 ea       	ldi	r24, 0xA4	; 164
    1102:	80 83       	st	Z, r24
	//Set normal display
	*OLED_Command = 0xA6;
    1104:	e0 91 1a 01 	lds	r30, 0x011A
    1108:	f0 91 1b 01 	lds	r31, 0x011B
    110c:	86 ea       	ldi	r24, 0xA6	; 166
    110e:	80 83       	st	Z, r24
	//Display on
	*OLED_Command = 0xAF;
    1110:	e0 91 1a 01 	lds	r30, 0x011A
    1114:	f0 91 1b 01 	lds	r31, 0x011B
    1118:	8f ea       	ldi	r24, 0xAF	; 175
    111a:	80 83       	st	Z, r24
	
	//Set page start address
	*OLED_Command = 0xB0;
    111c:	e0 91 1a 01 	lds	r30, 0x011A
    1120:	f0 91 1b 01 	lds	r31, 0x011B
    1124:	80 eb       	ldi	r24, 0xB0	; 176
    1126:	80 83       	st	Z, r24
	//Set lower column start address
	*OLED_Command = 0x00;
    1128:	e0 91 1a 01 	lds	r30, 0x011A
    112c:	f0 91 1b 01 	lds	r31, 0x011B
    1130:	10 82       	st	Z, r1
	//Set higher column start address
	*OLED_Command = 0x10;
    1132:	e0 91 1a 01 	lds	r30, 0x011A
    1136:	f0 91 1b 01 	lds	r31, 0x011B
    113a:	80 e1       	ldi	r24, 0x10	; 16
    113c:	80 83       	st	Z, r24
	//Goto start position
	OLED_Home(); 
    113e:	0e 94 7a 07 	call	0xef4	; 0xef4 <OLED_Home>
    1142:	08 95       	ret

00001144 <SPI_init>:
#include "SPI.h"
#include <avr/io.h>
#include <util/delay.h>

void SPI_init(void){	
	DDR_SPI |= (1<<DD_MOSI) | (1<<DD_SCK) | (1<<SS_PIN); // Set MOSI and SCK output, all others input
    1144:	87 b3       	in	r24, 0x17	; 23
    1146:	80 6b       	ori	r24, 0xB0	; 176
    1148:	87 bb       	out	0x17, r24	; 23
	SPCR |=	(1<<SPE) | (1<<MSTR) | (1<<SPR0); // Enable SPI, Master, set clock rate fck/16
    114a:	8d b1       	in	r24, 0x0d	; 13
    114c:	81 65       	ori	r24, 0x51	; 81
    114e:	8d b9       	out	0x0d, r24	; 13
    1150:	08 95       	ret

00001152 <SPI_write>:
}

void SPI_write(char c){
	SPDR = c; // Start transmission
    1152:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    1154:	77 9b       	sbis	0x0e, 7	; 14
    1156:	fe cf       	rjmp	.-4      	; 0x1154 <SPI_write+0x2>
}
    1158:	08 95       	ret

0000115a <SPI_read>:

char SPI_read(){
	SPI_write(0);
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	0e 94 a9 08 	call	0x1152	; 0x1152 <SPI_write>
	uint8_t temp = SPDR;
    1160:	8f b1       	in	r24, 0x0f	; 15
	return temp;
}
    1162:	08 95       	ret

00001164 <SPI_slaveEnable>:

void SPI_slaveEnable(uint8_t enable){	
	if(enable)
    1164:	88 23       	and	r24, r24
    1166:	11 f0       	breq	.+4      	; 0x116c <SPI_slaveEnable+0x8>
	PORTB	&=	~(1<<SS_PIN);
    1168:	c4 98       	cbi	0x18, 4	; 24
    116a:	08 95       	ret
	else if(!enable)
		PORTB	|=	(1<<SS_PIN);
    116c:	c4 9a       	sbi	0x18, 4	; 24
    116e:	08 95       	ret

00001170 <sramInit>:
	}
	printf("SRAM test completed with\n%4d errors in write phase and\n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
}

void sramInit(void){
	MCUCR |= (1 << SRE); 
    1170:	85 b7       	in	r24, 0x35	; 53
    1172:	80 68       	ori	r24, 0x80	; 128
    1174:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
    1176:	80 b7       	in	r24, 0x30	; 48
    1178:	80 62       	ori	r24, 0x20	; 32
    117a:	80 bf       	out	0x30, r24	; 48
    117c:	08 95       	ret

0000117e <uartTransmit>:

//Transmit data to serial port
void uartTransmit(unsigned char data)
{
	//Wait for empty transmit buffer
	while( !(UCSR0A & (1<<UDRE0)) );
    117e:	5d 9b       	sbis	0x0b, 5	; 11
    1180:	fe cf       	rjmp	.-4      	; 0x117e <uartTransmit>
	//Put data into buffer, sends the data
	UDR0 = data;
    1182:	8c b9       	out	0x0c, r24	; 12
    1184:	08 95       	ret

00001186 <uartReceive>:

//Read data from serial port
unsigned char uartReceive()
{
	//Wait for data to be received
	while( !(UCSR0A & (1<<RXC0)) );
    1186:	5f 9b       	sbis	0x0b, 7	; 11
    1188:	fe cf       	rjmp	.-4      	; 0x1186 <uartReceive>
	//Get and return received data from buffer
	return
    118a:	8c b1       	in	r24, 0x0c	; 12
	UDR0;
    118c:	08 95       	ret

0000118e <uartInit>:
//Initialize values to enable uart communication
void uartInit()
{
	//Set baud rate
	unsigned int baud = UBBR;
	UBRR0H = (unsigned char)(baud>>8);
    118e:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)baud;
    1190:	8f e1       	ldi	r24, 0x1F	; 31
    1192:	89 b9       	out	0x09, r24	; 9
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1194:	88 e1       	ldi	r24, 0x18	; 24
    1196:	8a b9       	out	0x0a, r24	; 10
	//Set frame format: 8data, 2stop bit
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);	
    1198:	8e e8       	ldi	r24, 0x8E	; 142
    119a:	80 bd       	out	0x20, r24	; 32
	//Connect the printf function to self defined uart functions
	fdevopen(uartTransmit, uartReceive);
    119c:	63 ec       	ldi	r22, 0xC3	; 195
    119e:	78 e0       	ldi	r23, 0x08	; 8
    11a0:	8f eb       	ldi	r24, 0xBF	; 191
    11a2:	98 e0       	ldi	r25, 0x08	; 8
    11a4:	0e 94 1c 0b 	call	0x1638	; 0x1638 <fdevopen>
    11a8:	08 95       	ret

000011aa <__subsf3>:
    11aa:	50 58       	subi	r21, 0x80	; 128

000011ac <__addsf3>:
    11ac:	bb 27       	eor	r27, r27
    11ae:	aa 27       	eor	r26, r26
    11b0:	0e d0       	rcall	.+28     	; 0x11ce <__addsf3x>
    11b2:	75 c1       	rjmp	.+746    	; 0x149e <__fp_round>
    11b4:	66 d1       	rcall	.+716    	; 0x1482 <__fp_pscA>
    11b6:	30 f0       	brcs	.+12     	; 0x11c4 <__addsf3+0x18>
    11b8:	6b d1       	rcall	.+726    	; 0x1490 <__fp_pscB>
    11ba:	20 f0       	brcs	.+8      	; 0x11c4 <__addsf3+0x18>
    11bc:	31 f4       	brne	.+12     	; 0x11ca <__addsf3+0x1e>
    11be:	9f 3f       	cpi	r25, 0xFF	; 255
    11c0:	11 f4       	brne	.+4      	; 0x11c6 <__addsf3+0x1a>
    11c2:	1e f4       	brtc	.+6      	; 0x11ca <__addsf3+0x1e>
    11c4:	5b c1       	rjmp	.+694    	; 0x147c <__fp_nan>
    11c6:	0e f4       	brtc	.+2      	; 0x11ca <__addsf3+0x1e>
    11c8:	e0 95       	com	r30
    11ca:	e7 fb       	bst	r30, 7
    11cc:	51 c1       	rjmp	.+674    	; 0x1470 <__fp_inf>

000011ce <__addsf3x>:
    11ce:	e9 2f       	mov	r30, r25
    11d0:	77 d1       	rcall	.+750    	; 0x14c0 <__fp_split3>
    11d2:	80 f3       	brcs	.-32     	; 0x11b4 <__addsf3+0x8>
    11d4:	ba 17       	cp	r27, r26
    11d6:	62 07       	cpc	r22, r18
    11d8:	73 07       	cpc	r23, r19
    11da:	84 07       	cpc	r24, r20
    11dc:	95 07       	cpc	r25, r21
    11de:	18 f0       	brcs	.+6      	; 0x11e6 <__addsf3x+0x18>
    11e0:	71 f4       	brne	.+28     	; 0x11fe <__addsf3x+0x30>
    11e2:	9e f5       	brtc	.+102    	; 0x124a <__addsf3x+0x7c>
    11e4:	8f c1       	rjmp	.+798    	; 0x1504 <__fp_zero>
    11e6:	0e f4       	brtc	.+2      	; 0x11ea <__addsf3x+0x1c>
    11e8:	e0 95       	com	r30
    11ea:	0b 2e       	mov	r0, r27
    11ec:	ba 2f       	mov	r27, r26
    11ee:	a0 2d       	mov	r26, r0
    11f0:	0b 01       	movw	r0, r22
    11f2:	b9 01       	movw	r22, r18
    11f4:	90 01       	movw	r18, r0
    11f6:	0c 01       	movw	r0, r24
    11f8:	ca 01       	movw	r24, r20
    11fa:	a0 01       	movw	r20, r0
    11fc:	11 24       	eor	r1, r1
    11fe:	ff 27       	eor	r31, r31
    1200:	59 1b       	sub	r21, r25
    1202:	99 f0       	breq	.+38     	; 0x122a <__addsf3x+0x5c>
    1204:	59 3f       	cpi	r21, 0xF9	; 249
    1206:	50 f4       	brcc	.+20     	; 0x121c <__addsf3x+0x4e>
    1208:	50 3e       	cpi	r21, 0xE0	; 224
    120a:	68 f1       	brcs	.+90     	; 0x1266 <__addsf3x+0x98>
    120c:	1a 16       	cp	r1, r26
    120e:	f0 40       	sbci	r31, 0x00	; 0
    1210:	a2 2f       	mov	r26, r18
    1212:	23 2f       	mov	r18, r19
    1214:	34 2f       	mov	r19, r20
    1216:	44 27       	eor	r20, r20
    1218:	58 5f       	subi	r21, 0xF8	; 248
    121a:	f3 cf       	rjmp	.-26     	; 0x1202 <__addsf3x+0x34>
    121c:	46 95       	lsr	r20
    121e:	37 95       	ror	r19
    1220:	27 95       	ror	r18
    1222:	a7 95       	ror	r26
    1224:	f0 40       	sbci	r31, 0x00	; 0
    1226:	53 95       	inc	r21
    1228:	c9 f7       	brne	.-14     	; 0x121c <__addsf3x+0x4e>
    122a:	7e f4       	brtc	.+30     	; 0x124a <__addsf3x+0x7c>
    122c:	1f 16       	cp	r1, r31
    122e:	ba 0b       	sbc	r27, r26
    1230:	62 0b       	sbc	r22, r18
    1232:	73 0b       	sbc	r23, r19
    1234:	84 0b       	sbc	r24, r20
    1236:	ba f0       	brmi	.+46     	; 0x1266 <__addsf3x+0x98>
    1238:	91 50       	subi	r25, 0x01	; 1
    123a:	a1 f0       	breq	.+40     	; 0x1264 <__addsf3x+0x96>
    123c:	ff 0f       	add	r31, r31
    123e:	bb 1f       	adc	r27, r27
    1240:	66 1f       	adc	r22, r22
    1242:	77 1f       	adc	r23, r23
    1244:	88 1f       	adc	r24, r24
    1246:	c2 f7       	brpl	.-16     	; 0x1238 <__addsf3x+0x6a>
    1248:	0e c0       	rjmp	.+28     	; 0x1266 <__addsf3x+0x98>
    124a:	ba 0f       	add	r27, r26
    124c:	62 1f       	adc	r22, r18
    124e:	73 1f       	adc	r23, r19
    1250:	84 1f       	adc	r24, r20
    1252:	48 f4       	brcc	.+18     	; 0x1266 <__addsf3x+0x98>
    1254:	87 95       	ror	r24
    1256:	77 95       	ror	r23
    1258:	67 95       	ror	r22
    125a:	b7 95       	ror	r27
    125c:	f7 95       	ror	r31
    125e:	9e 3f       	cpi	r25, 0xFE	; 254
    1260:	08 f0       	brcs	.+2      	; 0x1264 <__addsf3x+0x96>
    1262:	b3 cf       	rjmp	.-154    	; 0x11ca <__addsf3+0x1e>
    1264:	93 95       	inc	r25
    1266:	88 0f       	add	r24, r24
    1268:	08 f0       	brcs	.+2      	; 0x126c <__addsf3x+0x9e>
    126a:	99 27       	eor	r25, r25
    126c:	ee 0f       	add	r30, r30
    126e:	97 95       	ror	r25
    1270:	87 95       	ror	r24
    1272:	08 95       	ret

00001274 <__cmpsf2>:
    1274:	d9 d0       	rcall	.+434    	; 0x1428 <__fp_cmp>
    1276:	08 f4       	brcc	.+2      	; 0x127a <__cmpsf2+0x6>
    1278:	81 e0       	ldi	r24, 0x01	; 1
    127a:	08 95       	ret

0000127c <__divsf3>:
    127c:	0c d0       	rcall	.+24     	; 0x1296 <__divsf3x>
    127e:	0f c1       	rjmp	.+542    	; 0x149e <__fp_round>
    1280:	07 d1       	rcall	.+526    	; 0x1490 <__fp_pscB>
    1282:	40 f0       	brcs	.+16     	; 0x1294 <__divsf3+0x18>
    1284:	fe d0       	rcall	.+508    	; 0x1482 <__fp_pscA>
    1286:	30 f0       	brcs	.+12     	; 0x1294 <__divsf3+0x18>
    1288:	21 f4       	brne	.+8      	; 0x1292 <__divsf3+0x16>
    128a:	5f 3f       	cpi	r21, 0xFF	; 255
    128c:	19 f0       	breq	.+6      	; 0x1294 <__divsf3+0x18>
    128e:	f0 c0       	rjmp	.+480    	; 0x1470 <__fp_inf>
    1290:	51 11       	cpse	r21, r1
    1292:	39 c1       	rjmp	.+626    	; 0x1506 <__fp_szero>
    1294:	f3 c0       	rjmp	.+486    	; 0x147c <__fp_nan>

00001296 <__divsf3x>:
    1296:	14 d1       	rcall	.+552    	; 0x14c0 <__fp_split3>
    1298:	98 f3       	brcs	.-26     	; 0x1280 <__divsf3+0x4>

0000129a <__divsf3_pse>:
    129a:	99 23       	and	r25, r25
    129c:	c9 f3       	breq	.-14     	; 0x1290 <__divsf3+0x14>
    129e:	55 23       	and	r21, r21
    12a0:	b1 f3       	breq	.-20     	; 0x128e <__divsf3+0x12>
    12a2:	95 1b       	sub	r25, r21
    12a4:	55 0b       	sbc	r21, r21
    12a6:	bb 27       	eor	r27, r27
    12a8:	aa 27       	eor	r26, r26
    12aa:	62 17       	cp	r22, r18
    12ac:	73 07       	cpc	r23, r19
    12ae:	84 07       	cpc	r24, r20
    12b0:	38 f0       	brcs	.+14     	; 0x12c0 <__divsf3_pse+0x26>
    12b2:	9f 5f       	subi	r25, 0xFF	; 255
    12b4:	5f 4f       	sbci	r21, 0xFF	; 255
    12b6:	22 0f       	add	r18, r18
    12b8:	33 1f       	adc	r19, r19
    12ba:	44 1f       	adc	r20, r20
    12bc:	aa 1f       	adc	r26, r26
    12be:	a9 f3       	breq	.-22     	; 0x12aa <__divsf3_pse+0x10>
    12c0:	33 d0       	rcall	.+102    	; 0x1328 <__divsf3_pse+0x8e>
    12c2:	0e 2e       	mov	r0, r30
    12c4:	3a f0       	brmi	.+14     	; 0x12d4 <__divsf3_pse+0x3a>
    12c6:	e0 e8       	ldi	r30, 0x80	; 128
    12c8:	30 d0       	rcall	.+96     	; 0x132a <__divsf3_pse+0x90>
    12ca:	91 50       	subi	r25, 0x01	; 1
    12cc:	50 40       	sbci	r21, 0x00	; 0
    12ce:	e6 95       	lsr	r30
    12d0:	00 1c       	adc	r0, r0
    12d2:	ca f7       	brpl	.-14     	; 0x12c6 <__divsf3_pse+0x2c>
    12d4:	29 d0       	rcall	.+82     	; 0x1328 <__divsf3_pse+0x8e>
    12d6:	fe 2f       	mov	r31, r30
    12d8:	27 d0       	rcall	.+78     	; 0x1328 <__divsf3_pse+0x8e>
    12da:	66 0f       	add	r22, r22
    12dc:	77 1f       	adc	r23, r23
    12de:	88 1f       	adc	r24, r24
    12e0:	bb 1f       	adc	r27, r27
    12e2:	26 17       	cp	r18, r22
    12e4:	37 07       	cpc	r19, r23
    12e6:	48 07       	cpc	r20, r24
    12e8:	ab 07       	cpc	r26, r27
    12ea:	b0 e8       	ldi	r27, 0x80	; 128
    12ec:	09 f0       	breq	.+2      	; 0x12f0 <__divsf3_pse+0x56>
    12ee:	bb 0b       	sbc	r27, r27
    12f0:	80 2d       	mov	r24, r0
    12f2:	bf 01       	movw	r22, r30
    12f4:	ff 27       	eor	r31, r31
    12f6:	93 58       	subi	r25, 0x83	; 131
    12f8:	5f 4f       	sbci	r21, 0xFF	; 255
    12fa:	2a f0       	brmi	.+10     	; 0x1306 <__divsf3_pse+0x6c>
    12fc:	9e 3f       	cpi	r25, 0xFE	; 254
    12fe:	51 05       	cpc	r21, r1
    1300:	68 f0       	brcs	.+26     	; 0x131c <__divsf3_pse+0x82>
    1302:	b6 c0       	rjmp	.+364    	; 0x1470 <__fp_inf>
    1304:	00 c1       	rjmp	.+512    	; 0x1506 <__fp_szero>
    1306:	5f 3f       	cpi	r21, 0xFF	; 255
    1308:	ec f3       	brlt	.-6      	; 0x1304 <__divsf3_pse+0x6a>
    130a:	98 3e       	cpi	r25, 0xE8	; 232
    130c:	dc f3       	brlt	.-10     	; 0x1304 <__divsf3_pse+0x6a>
    130e:	86 95       	lsr	r24
    1310:	77 95       	ror	r23
    1312:	67 95       	ror	r22
    1314:	b7 95       	ror	r27
    1316:	f7 95       	ror	r31
    1318:	9f 5f       	subi	r25, 0xFF	; 255
    131a:	c9 f7       	brne	.-14     	; 0x130e <__divsf3_pse+0x74>
    131c:	88 0f       	add	r24, r24
    131e:	91 1d       	adc	r25, r1
    1320:	96 95       	lsr	r25
    1322:	87 95       	ror	r24
    1324:	97 f9       	bld	r25, 7
    1326:	08 95       	ret
    1328:	e1 e0       	ldi	r30, 0x01	; 1
    132a:	66 0f       	add	r22, r22
    132c:	77 1f       	adc	r23, r23
    132e:	88 1f       	adc	r24, r24
    1330:	bb 1f       	adc	r27, r27
    1332:	62 17       	cp	r22, r18
    1334:	73 07       	cpc	r23, r19
    1336:	84 07       	cpc	r24, r20
    1338:	ba 07       	cpc	r27, r26
    133a:	20 f0       	brcs	.+8      	; 0x1344 <__divsf3_pse+0xaa>
    133c:	62 1b       	sub	r22, r18
    133e:	73 0b       	sbc	r23, r19
    1340:	84 0b       	sbc	r24, r20
    1342:	ba 0b       	sbc	r27, r26
    1344:	ee 1f       	adc	r30, r30
    1346:	88 f7       	brcc	.-30     	; 0x132a <__divsf3_pse+0x90>
    1348:	e0 95       	com	r30
    134a:	08 95       	ret

0000134c <__fixsfsi>:
    134c:	04 d0       	rcall	.+8      	; 0x1356 <__fixunssfsi>
    134e:	68 94       	set
    1350:	b1 11       	cpse	r27, r1
    1352:	d9 c0       	rjmp	.+434    	; 0x1506 <__fp_szero>
    1354:	08 95       	ret

00001356 <__fixunssfsi>:
    1356:	bc d0       	rcall	.+376    	; 0x14d0 <__fp_splitA>
    1358:	88 f0       	brcs	.+34     	; 0x137c <__fixunssfsi+0x26>
    135a:	9f 57       	subi	r25, 0x7F	; 127
    135c:	90 f0       	brcs	.+36     	; 0x1382 <__fixunssfsi+0x2c>
    135e:	b9 2f       	mov	r27, r25
    1360:	99 27       	eor	r25, r25
    1362:	b7 51       	subi	r27, 0x17	; 23
    1364:	a0 f0       	brcs	.+40     	; 0x138e <__fixunssfsi+0x38>
    1366:	d1 f0       	breq	.+52     	; 0x139c <__fixunssfsi+0x46>
    1368:	66 0f       	add	r22, r22
    136a:	77 1f       	adc	r23, r23
    136c:	88 1f       	adc	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	1a f0       	brmi	.+6      	; 0x1378 <__fixunssfsi+0x22>
    1372:	ba 95       	dec	r27
    1374:	c9 f7       	brne	.-14     	; 0x1368 <__fixunssfsi+0x12>
    1376:	12 c0       	rjmp	.+36     	; 0x139c <__fixunssfsi+0x46>
    1378:	b1 30       	cpi	r27, 0x01	; 1
    137a:	81 f0       	breq	.+32     	; 0x139c <__fixunssfsi+0x46>
    137c:	c3 d0       	rcall	.+390    	; 0x1504 <__fp_zero>
    137e:	b1 e0       	ldi	r27, 0x01	; 1
    1380:	08 95       	ret
    1382:	c0 c0       	rjmp	.+384    	; 0x1504 <__fp_zero>
    1384:	67 2f       	mov	r22, r23
    1386:	78 2f       	mov	r23, r24
    1388:	88 27       	eor	r24, r24
    138a:	b8 5f       	subi	r27, 0xF8	; 248
    138c:	39 f0       	breq	.+14     	; 0x139c <__fixunssfsi+0x46>
    138e:	b9 3f       	cpi	r27, 0xF9	; 249
    1390:	cc f3       	brlt	.-14     	; 0x1384 <__fixunssfsi+0x2e>
    1392:	86 95       	lsr	r24
    1394:	77 95       	ror	r23
    1396:	67 95       	ror	r22
    1398:	b3 95       	inc	r27
    139a:	d9 f7       	brne	.-10     	; 0x1392 <__fixunssfsi+0x3c>
    139c:	3e f4       	brtc	.+14     	; 0x13ac <__fixunssfsi+0x56>
    139e:	90 95       	com	r25
    13a0:	80 95       	com	r24
    13a2:	70 95       	com	r23
    13a4:	61 95       	neg	r22
    13a6:	7f 4f       	sbci	r23, 0xFF	; 255
    13a8:	8f 4f       	sbci	r24, 0xFF	; 255
    13aa:	9f 4f       	sbci	r25, 0xFF	; 255
    13ac:	08 95       	ret

000013ae <__floatunsisf>:
    13ae:	e8 94       	clt
    13b0:	09 c0       	rjmp	.+18     	; 0x13c4 <__floatsisf+0x12>

000013b2 <__floatsisf>:
    13b2:	97 fb       	bst	r25, 7
    13b4:	3e f4       	brtc	.+14     	; 0x13c4 <__floatsisf+0x12>
    13b6:	90 95       	com	r25
    13b8:	80 95       	com	r24
    13ba:	70 95       	com	r23
    13bc:	61 95       	neg	r22
    13be:	7f 4f       	sbci	r23, 0xFF	; 255
    13c0:	8f 4f       	sbci	r24, 0xFF	; 255
    13c2:	9f 4f       	sbci	r25, 0xFF	; 255
    13c4:	99 23       	and	r25, r25
    13c6:	a9 f0       	breq	.+42     	; 0x13f2 <__floatsisf+0x40>
    13c8:	f9 2f       	mov	r31, r25
    13ca:	96 e9       	ldi	r25, 0x96	; 150
    13cc:	bb 27       	eor	r27, r27
    13ce:	93 95       	inc	r25
    13d0:	f6 95       	lsr	r31
    13d2:	87 95       	ror	r24
    13d4:	77 95       	ror	r23
    13d6:	67 95       	ror	r22
    13d8:	b7 95       	ror	r27
    13da:	f1 11       	cpse	r31, r1
    13dc:	f8 cf       	rjmp	.-16     	; 0x13ce <__floatsisf+0x1c>
    13de:	fa f4       	brpl	.+62     	; 0x141e <__floatsisf+0x6c>
    13e0:	bb 0f       	add	r27, r27
    13e2:	11 f4       	brne	.+4      	; 0x13e8 <__floatsisf+0x36>
    13e4:	60 ff       	sbrs	r22, 0
    13e6:	1b c0       	rjmp	.+54     	; 0x141e <__floatsisf+0x6c>
    13e8:	6f 5f       	subi	r22, 0xFF	; 255
    13ea:	7f 4f       	sbci	r23, 0xFF	; 255
    13ec:	8f 4f       	sbci	r24, 0xFF	; 255
    13ee:	9f 4f       	sbci	r25, 0xFF	; 255
    13f0:	16 c0       	rjmp	.+44     	; 0x141e <__floatsisf+0x6c>
    13f2:	88 23       	and	r24, r24
    13f4:	11 f0       	breq	.+4      	; 0x13fa <__floatsisf+0x48>
    13f6:	96 e9       	ldi	r25, 0x96	; 150
    13f8:	11 c0       	rjmp	.+34     	; 0x141c <__floatsisf+0x6a>
    13fa:	77 23       	and	r23, r23
    13fc:	21 f0       	breq	.+8      	; 0x1406 <__floatsisf+0x54>
    13fe:	9e e8       	ldi	r25, 0x8E	; 142
    1400:	87 2f       	mov	r24, r23
    1402:	76 2f       	mov	r23, r22
    1404:	05 c0       	rjmp	.+10     	; 0x1410 <__floatsisf+0x5e>
    1406:	66 23       	and	r22, r22
    1408:	71 f0       	breq	.+28     	; 0x1426 <__floatsisf+0x74>
    140a:	96 e8       	ldi	r25, 0x86	; 134
    140c:	86 2f       	mov	r24, r22
    140e:	70 e0       	ldi	r23, 0x00	; 0
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	2a f0       	brmi	.+10     	; 0x141e <__floatsisf+0x6c>
    1414:	9a 95       	dec	r25
    1416:	66 0f       	add	r22, r22
    1418:	77 1f       	adc	r23, r23
    141a:	88 1f       	adc	r24, r24
    141c:	da f7       	brpl	.-10     	; 0x1414 <__floatsisf+0x62>
    141e:	88 0f       	add	r24, r24
    1420:	96 95       	lsr	r25
    1422:	87 95       	ror	r24
    1424:	97 f9       	bld	r25, 7
    1426:	08 95       	ret

00001428 <__fp_cmp>:
    1428:	99 0f       	add	r25, r25
    142a:	00 08       	sbc	r0, r0
    142c:	55 0f       	add	r21, r21
    142e:	aa 0b       	sbc	r26, r26
    1430:	e0 e8       	ldi	r30, 0x80	; 128
    1432:	fe ef       	ldi	r31, 0xFE	; 254
    1434:	16 16       	cp	r1, r22
    1436:	17 06       	cpc	r1, r23
    1438:	e8 07       	cpc	r30, r24
    143a:	f9 07       	cpc	r31, r25
    143c:	c0 f0       	brcs	.+48     	; 0x146e <__fp_cmp+0x46>
    143e:	12 16       	cp	r1, r18
    1440:	13 06       	cpc	r1, r19
    1442:	e4 07       	cpc	r30, r20
    1444:	f5 07       	cpc	r31, r21
    1446:	98 f0       	brcs	.+38     	; 0x146e <__fp_cmp+0x46>
    1448:	62 1b       	sub	r22, r18
    144a:	73 0b       	sbc	r23, r19
    144c:	84 0b       	sbc	r24, r20
    144e:	95 0b       	sbc	r25, r21
    1450:	39 f4       	brne	.+14     	; 0x1460 <__fp_cmp+0x38>
    1452:	0a 26       	eor	r0, r26
    1454:	61 f0       	breq	.+24     	; 0x146e <__fp_cmp+0x46>
    1456:	23 2b       	or	r18, r19
    1458:	24 2b       	or	r18, r20
    145a:	25 2b       	or	r18, r21
    145c:	21 f4       	brne	.+8      	; 0x1466 <__fp_cmp+0x3e>
    145e:	08 95       	ret
    1460:	0a 26       	eor	r0, r26
    1462:	09 f4       	brne	.+2      	; 0x1466 <__fp_cmp+0x3e>
    1464:	a1 40       	sbci	r26, 0x01	; 1
    1466:	a6 95       	lsr	r26
    1468:	8f ef       	ldi	r24, 0xFF	; 255
    146a:	81 1d       	adc	r24, r1
    146c:	81 1d       	adc	r24, r1
    146e:	08 95       	ret

00001470 <__fp_inf>:
    1470:	97 f9       	bld	r25, 7
    1472:	9f 67       	ori	r25, 0x7F	; 127
    1474:	80 e8       	ldi	r24, 0x80	; 128
    1476:	70 e0       	ldi	r23, 0x00	; 0
    1478:	60 e0       	ldi	r22, 0x00	; 0
    147a:	08 95       	ret

0000147c <__fp_nan>:
    147c:	9f ef       	ldi	r25, 0xFF	; 255
    147e:	80 ec       	ldi	r24, 0xC0	; 192
    1480:	08 95       	ret

00001482 <__fp_pscA>:
    1482:	00 24       	eor	r0, r0
    1484:	0a 94       	dec	r0
    1486:	16 16       	cp	r1, r22
    1488:	17 06       	cpc	r1, r23
    148a:	18 06       	cpc	r1, r24
    148c:	09 06       	cpc	r0, r25
    148e:	08 95       	ret

00001490 <__fp_pscB>:
    1490:	00 24       	eor	r0, r0
    1492:	0a 94       	dec	r0
    1494:	12 16       	cp	r1, r18
    1496:	13 06       	cpc	r1, r19
    1498:	14 06       	cpc	r1, r20
    149a:	05 06       	cpc	r0, r21
    149c:	08 95       	ret

0000149e <__fp_round>:
    149e:	09 2e       	mov	r0, r25
    14a0:	03 94       	inc	r0
    14a2:	00 0c       	add	r0, r0
    14a4:	11 f4       	brne	.+4      	; 0x14aa <__fp_round+0xc>
    14a6:	88 23       	and	r24, r24
    14a8:	52 f0       	brmi	.+20     	; 0x14be <__fp_round+0x20>
    14aa:	bb 0f       	add	r27, r27
    14ac:	40 f4       	brcc	.+16     	; 0x14be <__fp_round+0x20>
    14ae:	bf 2b       	or	r27, r31
    14b0:	11 f4       	brne	.+4      	; 0x14b6 <__fp_round+0x18>
    14b2:	60 ff       	sbrs	r22, 0
    14b4:	04 c0       	rjmp	.+8      	; 0x14be <__fp_round+0x20>
    14b6:	6f 5f       	subi	r22, 0xFF	; 255
    14b8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ba:	8f 4f       	sbci	r24, 0xFF	; 255
    14bc:	9f 4f       	sbci	r25, 0xFF	; 255
    14be:	08 95       	ret

000014c0 <__fp_split3>:
    14c0:	57 fd       	sbrc	r21, 7
    14c2:	90 58       	subi	r25, 0x80	; 128
    14c4:	44 0f       	add	r20, r20
    14c6:	55 1f       	adc	r21, r21
    14c8:	59 f0       	breq	.+22     	; 0x14e0 <__fp_splitA+0x10>
    14ca:	5f 3f       	cpi	r21, 0xFF	; 255
    14cc:	71 f0       	breq	.+28     	; 0x14ea <__fp_splitA+0x1a>
    14ce:	47 95       	ror	r20

000014d0 <__fp_splitA>:
    14d0:	88 0f       	add	r24, r24
    14d2:	97 fb       	bst	r25, 7
    14d4:	99 1f       	adc	r25, r25
    14d6:	61 f0       	breq	.+24     	; 0x14f0 <__fp_splitA+0x20>
    14d8:	9f 3f       	cpi	r25, 0xFF	; 255
    14da:	79 f0       	breq	.+30     	; 0x14fa <__fp_splitA+0x2a>
    14dc:	87 95       	ror	r24
    14de:	08 95       	ret
    14e0:	12 16       	cp	r1, r18
    14e2:	13 06       	cpc	r1, r19
    14e4:	14 06       	cpc	r1, r20
    14e6:	55 1f       	adc	r21, r21
    14e8:	f2 cf       	rjmp	.-28     	; 0x14ce <__fp_split3+0xe>
    14ea:	46 95       	lsr	r20
    14ec:	f1 df       	rcall	.-30     	; 0x14d0 <__fp_splitA>
    14ee:	08 c0       	rjmp	.+16     	; 0x1500 <__fp_splitA+0x30>
    14f0:	16 16       	cp	r1, r22
    14f2:	17 06       	cpc	r1, r23
    14f4:	18 06       	cpc	r1, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	f1 cf       	rjmp	.-30     	; 0x14dc <__fp_splitA+0xc>
    14fa:	86 95       	lsr	r24
    14fc:	71 05       	cpc	r23, r1
    14fe:	61 05       	cpc	r22, r1
    1500:	08 94       	sec
    1502:	08 95       	ret

00001504 <__fp_zero>:
    1504:	e8 94       	clt

00001506 <__fp_szero>:
    1506:	bb 27       	eor	r27, r27
    1508:	66 27       	eor	r22, r22
    150a:	77 27       	eor	r23, r23
    150c:	cb 01       	movw	r24, r22
    150e:	97 f9       	bld	r25, 7
    1510:	08 95       	ret

00001512 <__mulsf3>:
    1512:	0b d0       	rcall	.+22     	; 0x152a <__mulsf3x>
    1514:	c4 cf       	rjmp	.-120    	; 0x149e <__fp_round>
    1516:	b5 df       	rcall	.-150    	; 0x1482 <__fp_pscA>
    1518:	28 f0       	brcs	.+10     	; 0x1524 <__mulsf3+0x12>
    151a:	ba df       	rcall	.-140    	; 0x1490 <__fp_pscB>
    151c:	18 f0       	brcs	.+6      	; 0x1524 <__mulsf3+0x12>
    151e:	95 23       	and	r25, r21
    1520:	09 f0       	breq	.+2      	; 0x1524 <__mulsf3+0x12>
    1522:	a6 cf       	rjmp	.-180    	; 0x1470 <__fp_inf>
    1524:	ab cf       	rjmp	.-170    	; 0x147c <__fp_nan>
    1526:	11 24       	eor	r1, r1
    1528:	ee cf       	rjmp	.-36     	; 0x1506 <__fp_szero>

0000152a <__mulsf3x>:
    152a:	ca df       	rcall	.-108    	; 0x14c0 <__fp_split3>
    152c:	a0 f3       	brcs	.-24     	; 0x1516 <__mulsf3+0x4>

0000152e <__mulsf3_pse>:
    152e:	95 9f       	mul	r25, r21
    1530:	d1 f3       	breq	.-12     	; 0x1526 <__mulsf3+0x14>
    1532:	95 0f       	add	r25, r21
    1534:	50 e0       	ldi	r21, 0x00	; 0
    1536:	55 1f       	adc	r21, r21
    1538:	62 9f       	mul	r22, r18
    153a:	f0 01       	movw	r30, r0
    153c:	72 9f       	mul	r23, r18
    153e:	bb 27       	eor	r27, r27
    1540:	f0 0d       	add	r31, r0
    1542:	b1 1d       	adc	r27, r1
    1544:	63 9f       	mul	r22, r19
    1546:	aa 27       	eor	r26, r26
    1548:	f0 0d       	add	r31, r0
    154a:	b1 1d       	adc	r27, r1
    154c:	aa 1f       	adc	r26, r26
    154e:	64 9f       	mul	r22, r20
    1550:	66 27       	eor	r22, r22
    1552:	b0 0d       	add	r27, r0
    1554:	a1 1d       	adc	r26, r1
    1556:	66 1f       	adc	r22, r22
    1558:	82 9f       	mul	r24, r18
    155a:	22 27       	eor	r18, r18
    155c:	b0 0d       	add	r27, r0
    155e:	a1 1d       	adc	r26, r1
    1560:	62 1f       	adc	r22, r18
    1562:	73 9f       	mul	r23, r19
    1564:	b0 0d       	add	r27, r0
    1566:	a1 1d       	adc	r26, r1
    1568:	62 1f       	adc	r22, r18
    156a:	83 9f       	mul	r24, r19
    156c:	a0 0d       	add	r26, r0
    156e:	61 1d       	adc	r22, r1
    1570:	22 1f       	adc	r18, r18
    1572:	74 9f       	mul	r23, r20
    1574:	33 27       	eor	r19, r19
    1576:	a0 0d       	add	r26, r0
    1578:	61 1d       	adc	r22, r1
    157a:	23 1f       	adc	r18, r19
    157c:	84 9f       	mul	r24, r20
    157e:	60 0d       	add	r22, r0
    1580:	21 1d       	adc	r18, r1
    1582:	82 2f       	mov	r24, r18
    1584:	76 2f       	mov	r23, r22
    1586:	6a 2f       	mov	r22, r26
    1588:	11 24       	eor	r1, r1
    158a:	9f 57       	subi	r25, 0x7F	; 127
    158c:	50 40       	sbci	r21, 0x00	; 0
    158e:	8a f0       	brmi	.+34     	; 0x15b2 <__mulsf3_pse+0x84>
    1590:	e1 f0       	breq	.+56     	; 0x15ca <__mulsf3_pse+0x9c>
    1592:	88 23       	and	r24, r24
    1594:	4a f0       	brmi	.+18     	; 0x15a8 <__mulsf3_pse+0x7a>
    1596:	ee 0f       	add	r30, r30
    1598:	ff 1f       	adc	r31, r31
    159a:	bb 1f       	adc	r27, r27
    159c:	66 1f       	adc	r22, r22
    159e:	77 1f       	adc	r23, r23
    15a0:	88 1f       	adc	r24, r24
    15a2:	91 50       	subi	r25, 0x01	; 1
    15a4:	50 40       	sbci	r21, 0x00	; 0
    15a6:	a9 f7       	brne	.-22     	; 0x1592 <__mulsf3_pse+0x64>
    15a8:	9e 3f       	cpi	r25, 0xFE	; 254
    15aa:	51 05       	cpc	r21, r1
    15ac:	70 f0       	brcs	.+28     	; 0x15ca <__mulsf3_pse+0x9c>
    15ae:	60 cf       	rjmp	.-320    	; 0x1470 <__fp_inf>
    15b0:	aa cf       	rjmp	.-172    	; 0x1506 <__fp_szero>
    15b2:	5f 3f       	cpi	r21, 0xFF	; 255
    15b4:	ec f3       	brlt	.-6      	; 0x15b0 <__mulsf3_pse+0x82>
    15b6:	98 3e       	cpi	r25, 0xE8	; 232
    15b8:	dc f3       	brlt	.-10     	; 0x15b0 <__mulsf3_pse+0x82>
    15ba:	86 95       	lsr	r24
    15bc:	77 95       	ror	r23
    15be:	67 95       	ror	r22
    15c0:	b7 95       	ror	r27
    15c2:	f7 95       	ror	r31
    15c4:	e7 95       	ror	r30
    15c6:	9f 5f       	subi	r25, 0xFF	; 255
    15c8:	c1 f7       	brne	.-16     	; 0x15ba <__mulsf3_pse+0x8c>
    15ca:	fe 2b       	or	r31, r30
    15cc:	88 0f       	add	r24, r24
    15ce:	91 1d       	adc	r25, r1
    15d0:	96 95       	lsr	r25
    15d2:	87 95       	ror	r24
    15d4:	97 f9       	bld	r25, 7
    15d6:	08 95       	ret

000015d8 <strcat>:
    15d8:	fb 01       	movw	r30, r22
    15da:	dc 01       	movw	r26, r24
    15dc:	0d 90       	ld	r0, X+
    15de:	00 20       	and	r0, r0
    15e0:	e9 f7       	brne	.-6      	; 0x15dc <strcat+0x4>
    15e2:	11 97       	sbiw	r26, 0x01	; 1
    15e4:	01 90       	ld	r0, Z+
    15e6:	0d 92       	st	X+, r0
    15e8:	00 20       	and	r0, r0
    15ea:	e1 f7       	brne	.-8      	; 0x15e4 <strcat+0xc>
    15ec:	08 95       	ret

000015ee <__itoa_ncheck>:
    15ee:	bb 27       	eor	r27, r27
    15f0:	4a 30       	cpi	r20, 0x0A	; 10
    15f2:	31 f4       	brne	.+12     	; 0x1600 <__itoa_ncheck+0x12>
    15f4:	99 23       	and	r25, r25
    15f6:	22 f4       	brpl	.+8      	; 0x1600 <__itoa_ncheck+0x12>
    15f8:	bd e2       	ldi	r27, 0x2D	; 45
    15fa:	90 95       	com	r25
    15fc:	81 95       	neg	r24
    15fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1600:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__utoa_common>

00001604 <__utoa_ncheck>:
    1604:	bb 27       	eor	r27, r27

00001606 <__utoa_common>:
    1606:	fb 01       	movw	r30, r22
    1608:	55 27       	eor	r21, r21
    160a:	aa 27       	eor	r26, r26
    160c:	88 0f       	add	r24, r24
    160e:	99 1f       	adc	r25, r25
    1610:	aa 1f       	adc	r26, r26
    1612:	a4 17       	cp	r26, r20
    1614:	10 f0       	brcs	.+4      	; 0x161a <__utoa_common+0x14>
    1616:	a4 1b       	sub	r26, r20
    1618:	83 95       	inc	r24
    161a:	50 51       	subi	r21, 0x10	; 16
    161c:	b9 f7       	brne	.-18     	; 0x160c <__utoa_common+0x6>
    161e:	a0 5d       	subi	r26, 0xD0	; 208
    1620:	aa 33       	cpi	r26, 0x3A	; 58
    1622:	08 f0       	brcs	.+2      	; 0x1626 <__utoa_common+0x20>
    1624:	a9 5d       	subi	r26, 0xD9	; 217
    1626:	a1 93       	st	Z+, r26
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	79 f7       	brne	.-34     	; 0x160a <__utoa_common+0x4>
    162c:	b1 11       	cpse	r27, r1
    162e:	b1 93       	st	Z+, r27
    1630:	11 92       	st	Z+, r1
    1632:	cb 01       	movw	r24, r22
    1634:	0c 94 de 0c 	jmp	0x19bc	; 0x19bc <strrev>

00001638 <fdevopen>:
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	cf 93       	push	r28
    163e:	df 93       	push	r29
    1640:	ec 01       	movw	r28, r24
    1642:	8b 01       	movw	r16, r22
    1644:	00 97       	sbiw	r24, 0x00	; 0
    1646:	31 f4       	brne	.+12     	; 0x1654 <fdevopen+0x1c>
    1648:	61 15       	cp	r22, r1
    164a:	71 05       	cpc	r23, r1
    164c:	19 f4       	brne	.+6      	; 0x1654 <fdevopen+0x1c>
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	38 c0       	rjmp	.+112    	; 0x16c4 <fdevopen+0x8c>
    1654:	6e e0       	ldi	r22, 0x0E	; 14
    1656:	70 e0       	ldi	r23, 0x00	; 0
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	0e 94 94 0b 	call	0x1728	; 0x1728 <calloc>
    1660:	fc 01       	movw	r30, r24
    1662:	00 97       	sbiw	r24, 0x00	; 0
    1664:	a1 f3       	breq	.-24     	; 0x164e <fdevopen+0x16>
    1666:	80 e8       	ldi	r24, 0x80	; 128
    1668:	83 83       	std	Z+3, r24	; 0x03
    166a:	01 15       	cp	r16, r1
    166c:	11 05       	cpc	r17, r1
    166e:	71 f0       	breq	.+28     	; 0x168c <fdevopen+0x54>
    1670:	13 87       	std	Z+11, r17	; 0x0b
    1672:	02 87       	std	Z+10, r16	; 0x0a
    1674:	81 e8       	ldi	r24, 0x81	; 129
    1676:	83 83       	std	Z+3, r24	; 0x03
    1678:	80 91 e8 02 	lds	r24, 0x02E8
    167c:	90 91 e9 02 	lds	r25, 0x02E9
    1680:	89 2b       	or	r24, r25
    1682:	21 f4       	brne	.+8      	; 0x168c <fdevopen+0x54>
    1684:	f0 93 e9 02 	sts	0x02E9, r31
    1688:	e0 93 e8 02 	sts	0x02E8, r30
    168c:	20 97       	sbiw	r28, 0x00	; 0
    168e:	c9 f0       	breq	.+50     	; 0x16c2 <fdevopen+0x8a>
    1690:	d1 87       	std	Z+9, r29	; 0x09
    1692:	c0 87       	std	Z+8, r28	; 0x08
    1694:	83 81       	ldd	r24, Z+3	; 0x03
    1696:	82 60       	ori	r24, 0x02	; 2
    1698:	83 83       	std	Z+3, r24	; 0x03
    169a:	80 91 ea 02 	lds	r24, 0x02EA
    169e:	90 91 eb 02 	lds	r25, 0x02EB
    16a2:	89 2b       	or	r24, r25
    16a4:	71 f4       	brne	.+28     	; 0x16c2 <fdevopen+0x8a>
    16a6:	f0 93 eb 02 	sts	0x02EB, r31
    16aa:	e0 93 ea 02 	sts	0x02EA, r30
    16ae:	80 91 ec 02 	lds	r24, 0x02EC
    16b2:	90 91 ed 02 	lds	r25, 0x02ED
    16b6:	89 2b       	or	r24, r25
    16b8:	21 f4       	brne	.+8      	; 0x16c2 <fdevopen+0x8a>
    16ba:	f0 93 ed 02 	sts	0x02ED, r31
    16be:	e0 93 ec 02 	sts	0x02EC, r30
    16c2:	cf 01       	movw	r24, r30
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	1f 91       	pop	r17
    16ca:	0f 91       	pop	r16
    16cc:	08 95       	ret

000016ce <puts>:
    16ce:	0f 93       	push	r16
    16d0:	1f 93       	push	r17
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	e0 91 ea 02 	lds	r30, 0x02EA
    16da:	f0 91 eb 02 	lds	r31, 0x02EB
    16de:	23 81       	ldd	r18, Z+3	; 0x03
    16e0:	21 ff       	sbrs	r18, 1
    16e2:	1b c0       	rjmp	.+54     	; 0x171a <puts+0x4c>
    16e4:	ec 01       	movw	r28, r24
    16e6:	00 e0       	ldi	r16, 0x00	; 0
    16e8:	10 e0       	ldi	r17, 0x00	; 0
    16ea:	89 91       	ld	r24, Y+
    16ec:	60 91 ea 02 	lds	r22, 0x02EA
    16f0:	70 91 eb 02 	lds	r23, 0x02EB
    16f4:	db 01       	movw	r26, r22
    16f6:	18 96       	adiw	r26, 0x08	; 8
    16f8:	ed 91       	ld	r30, X+
    16fa:	fc 91       	ld	r31, X
    16fc:	19 97       	sbiw	r26, 0x09	; 9
    16fe:	88 23       	and	r24, r24
    1700:	31 f0       	breq	.+12     	; 0x170e <puts+0x40>
    1702:	09 95       	icall
    1704:	89 2b       	or	r24, r25
    1706:	89 f3       	breq	.-30     	; 0x16ea <puts+0x1c>
    1708:	0f ef       	ldi	r16, 0xFF	; 255
    170a:	1f ef       	ldi	r17, 0xFF	; 255
    170c:	ee cf       	rjmp	.-36     	; 0x16ea <puts+0x1c>
    170e:	8a e0       	ldi	r24, 0x0A	; 10
    1710:	09 95       	icall
    1712:	89 2b       	or	r24, r25
    1714:	11 f4       	brne	.+4      	; 0x171a <puts+0x4c>
    1716:	c8 01       	movw	r24, r16
    1718:	02 c0       	rjmp	.+4      	; 0x171e <puts+0x50>
    171a:	8f ef       	ldi	r24, 0xFF	; 255
    171c:	9f ef       	ldi	r25, 0xFF	; 255
    171e:	df 91       	pop	r29
    1720:	cf 91       	pop	r28
    1722:	1f 91       	pop	r17
    1724:	0f 91       	pop	r16
    1726:	08 95       	ret

00001728 <calloc>:
    1728:	0f 93       	push	r16
    172a:	1f 93       	push	r17
    172c:	cf 93       	push	r28
    172e:	df 93       	push	r29
    1730:	86 9f       	mul	r24, r22
    1732:	80 01       	movw	r16, r0
    1734:	87 9f       	mul	r24, r23
    1736:	10 0d       	add	r17, r0
    1738:	96 9f       	mul	r25, r22
    173a:	10 0d       	add	r17, r0
    173c:	11 24       	eor	r1, r1
    173e:	c8 01       	movw	r24, r16
    1740:	0e 94 b0 0b 	call	0x1760	; 0x1760 <malloc>
    1744:	ec 01       	movw	r28, r24
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	29 f0       	breq	.+10     	; 0x1754 <calloc+0x2c>
    174a:	a8 01       	movw	r20, r16
    174c:	60 e0       	ldi	r22, 0x00	; 0
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <memset>
    1754:	ce 01       	movw	r24, r28
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	1f 91       	pop	r17
    175c:	0f 91       	pop	r16
    175e:	08 95       	ret

00001760 <malloc>:
    1760:	cf 93       	push	r28
    1762:	df 93       	push	r29
    1764:	82 30       	cpi	r24, 0x02	; 2
    1766:	91 05       	cpc	r25, r1
    1768:	10 f4       	brcc	.+4      	; 0x176e <malloc+0xe>
    176a:	82 e0       	ldi	r24, 0x02	; 2
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	e0 91 f0 02 	lds	r30, 0x02F0
    1772:	f0 91 f1 02 	lds	r31, 0x02F1
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	a0 e0       	ldi	r26, 0x00	; 0
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	30 97       	sbiw	r30, 0x00	; 0
    1780:	39 f1       	breq	.+78     	; 0x17d0 <malloc+0x70>
    1782:	40 81       	ld	r20, Z
    1784:	51 81       	ldd	r21, Z+1	; 0x01
    1786:	48 17       	cp	r20, r24
    1788:	59 07       	cpc	r21, r25
    178a:	b8 f0       	brcs	.+46     	; 0x17ba <malloc+0x5a>
    178c:	48 17       	cp	r20, r24
    178e:	59 07       	cpc	r21, r25
    1790:	71 f4       	brne	.+28     	; 0x17ae <malloc+0x4e>
    1792:	82 81       	ldd	r24, Z+2	; 0x02
    1794:	93 81       	ldd	r25, Z+3	; 0x03
    1796:	10 97       	sbiw	r26, 0x00	; 0
    1798:	29 f0       	breq	.+10     	; 0x17a4 <malloc+0x44>
    179a:	13 96       	adiw	r26, 0x03	; 3
    179c:	9c 93       	st	X, r25
    179e:	8e 93       	st	-X, r24
    17a0:	12 97       	sbiw	r26, 0x02	; 2
    17a2:	2c c0       	rjmp	.+88     	; 0x17fc <malloc+0x9c>
    17a4:	90 93 f1 02 	sts	0x02F1, r25
    17a8:	80 93 f0 02 	sts	0x02F0, r24
    17ac:	27 c0       	rjmp	.+78     	; 0x17fc <malloc+0x9c>
    17ae:	21 15       	cp	r18, r1
    17b0:	31 05       	cpc	r19, r1
    17b2:	31 f0       	breq	.+12     	; 0x17c0 <malloc+0x60>
    17b4:	42 17       	cp	r20, r18
    17b6:	53 07       	cpc	r21, r19
    17b8:	18 f0       	brcs	.+6      	; 0x17c0 <malloc+0x60>
    17ba:	a9 01       	movw	r20, r18
    17bc:	db 01       	movw	r26, r22
    17be:	01 c0       	rjmp	.+2      	; 0x17c2 <malloc+0x62>
    17c0:	ef 01       	movw	r28, r30
    17c2:	9a 01       	movw	r18, r20
    17c4:	bd 01       	movw	r22, r26
    17c6:	df 01       	movw	r26, r30
    17c8:	02 80       	ldd	r0, Z+2	; 0x02
    17ca:	f3 81       	ldd	r31, Z+3	; 0x03
    17cc:	e0 2d       	mov	r30, r0
    17ce:	d7 cf       	rjmp	.-82     	; 0x177e <malloc+0x1e>
    17d0:	21 15       	cp	r18, r1
    17d2:	31 05       	cpc	r19, r1
    17d4:	f9 f0       	breq	.+62     	; 0x1814 <malloc+0xb4>
    17d6:	28 1b       	sub	r18, r24
    17d8:	39 0b       	sbc	r19, r25
    17da:	24 30       	cpi	r18, 0x04	; 4
    17dc:	31 05       	cpc	r19, r1
    17de:	80 f4       	brcc	.+32     	; 0x1800 <malloc+0xa0>
    17e0:	8a 81       	ldd	r24, Y+2	; 0x02
    17e2:	9b 81       	ldd	r25, Y+3	; 0x03
    17e4:	61 15       	cp	r22, r1
    17e6:	71 05       	cpc	r23, r1
    17e8:	21 f0       	breq	.+8      	; 0x17f2 <malloc+0x92>
    17ea:	fb 01       	movw	r30, r22
    17ec:	93 83       	std	Z+3, r25	; 0x03
    17ee:	82 83       	std	Z+2, r24	; 0x02
    17f0:	04 c0       	rjmp	.+8      	; 0x17fa <malloc+0x9a>
    17f2:	90 93 f1 02 	sts	0x02F1, r25
    17f6:	80 93 f0 02 	sts	0x02F0, r24
    17fa:	fe 01       	movw	r30, r28
    17fc:	32 96       	adiw	r30, 0x02	; 2
    17fe:	44 c0       	rjmp	.+136    	; 0x1888 <malloc+0x128>
    1800:	fe 01       	movw	r30, r28
    1802:	e2 0f       	add	r30, r18
    1804:	f3 1f       	adc	r31, r19
    1806:	81 93       	st	Z+, r24
    1808:	91 93       	st	Z+, r25
    180a:	22 50       	subi	r18, 0x02	; 2
    180c:	31 09       	sbc	r19, r1
    180e:	39 83       	std	Y+1, r19	; 0x01
    1810:	28 83       	st	Y, r18
    1812:	3a c0       	rjmp	.+116    	; 0x1888 <malloc+0x128>
    1814:	20 91 ee 02 	lds	r18, 0x02EE
    1818:	30 91 ef 02 	lds	r19, 0x02EF
    181c:	23 2b       	or	r18, r19
    181e:	41 f4       	brne	.+16     	; 0x1830 <malloc+0xd0>
    1820:	20 91 02 01 	lds	r18, 0x0102
    1824:	30 91 03 01 	lds	r19, 0x0103
    1828:	30 93 ef 02 	sts	0x02EF, r19
    182c:	20 93 ee 02 	sts	0x02EE, r18
    1830:	20 91 00 01 	lds	r18, 0x0100
    1834:	30 91 01 01 	lds	r19, 0x0101
    1838:	21 15       	cp	r18, r1
    183a:	31 05       	cpc	r19, r1
    183c:	41 f4       	brne	.+16     	; 0x184e <malloc+0xee>
    183e:	2d b7       	in	r18, 0x3d	; 61
    1840:	3e b7       	in	r19, 0x3e	; 62
    1842:	40 91 04 01 	lds	r20, 0x0104
    1846:	50 91 05 01 	lds	r21, 0x0105
    184a:	24 1b       	sub	r18, r20
    184c:	35 0b       	sbc	r19, r21
    184e:	e0 91 ee 02 	lds	r30, 0x02EE
    1852:	f0 91 ef 02 	lds	r31, 0x02EF
    1856:	e2 17       	cp	r30, r18
    1858:	f3 07       	cpc	r31, r19
    185a:	a0 f4       	brcc	.+40     	; 0x1884 <malloc+0x124>
    185c:	2e 1b       	sub	r18, r30
    185e:	3f 0b       	sbc	r19, r31
    1860:	28 17       	cp	r18, r24
    1862:	39 07       	cpc	r19, r25
    1864:	78 f0       	brcs	.+30     	; 0x1884 <malloc+0x124>
    1866:	ac 01       	movw	r20, r24
    1868:	4e 5f       	subi	r20, 0xFE	; 254
    186a:	5f 4f       	sbci	r21, 0xFF	; 255
    186c:	24 17       	cp	r18, r20
    186e:	35 07       	cpc	r19, r21
    1870:	48 f0       	brcs	.+18     	; 0x1884 <malloc+0x124>
    1872:	4e 0f       	add	r20, r30
    1874:	5f 1f       	adc	r21, r31
    1876:	50 93 ef 02 	sts	0x02EF, r21
    187a:	40 93 ee 02 	sts	0x02EE, r20
    187e:	81 93       	st	Z+, r24
    1880:	91 93       	st	Z+, r25
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <malloc+0x128>
    1884:	e0 e0       	ldi	r30, 0x00	; 0
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	cf 01       	movw	r24, r30
    188a:	df 91       	pop	r29
    188c:	cf 91       	pop	r28
    188e:	08 95       	ret

00001890 <free>:
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
    1894:	00 97       	sbiw	r24, 0x00	; 0
    1896:	09 f4       	brne	.+2      	; 0x189a <free+0xa>
    1898:	87 c0       	rjmp	.+270    	; 0x19a8 <free+0x118>
    189a:	fc 01       	movw	r30, r24
    189c:	32 97       	sbiw	r30, 0x02	; 2
    189e:	13 82       	std	Z+3, r1	; 0x03
    18a0:	12 82       	std	Z+2, r1	; 0x02
    18a2:	c0 91 f0 02 	lds	r28, 0x02F0
    18a6:	d0 91 f1 02 	lds	r29, 0x02F1
    18aa:	20 97       	sbiw	r28, 0x00	; 0
    18ac:	81 f4       	brne	.+32     	; 0x18ce <free+0x3e>
    18ae:	20 81       	ld	r18, Z
    18b0:	31 81       	ldd	r19, Z+1	; 0x01
    18b2:	28 0f       	add	r18, r24
    18b4:	39 1f       	adc	r19, r25
    18b6:	80 91 ee 02 	lds	r24, 0x02EE
    18ba:	90 91 ef 02 	lds	r25, 0x02EF
    18be:	82 17       	cp	r24, r18
    18c0:	93 07       	cpc	r25, r19
    18c2:	79 f5       	brne	.+94     	; 0x1922 <free+0x92>
    18c4:	f0 93 ef 02 	sts	0x02EF, r31
    18c8:	e0 93 ee 02 	sts	0x02EE, r30
    18cc:	6d c0       	rjmp	.+218    	; 0x19a8 <free+0x118>
    18ce:	de 01       	movw	r26, r28
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	ae 17       	cp	r26, r30
    18d6:	bf 07       	cpc	r27, r31
    18d8:	50 f4       	brcc	.+20     	; 0x18ee <free+0x5e>
    18da:	12 96       	adiw	r26, 0x02	; 2
    18dc:	4d 91       	ld	r20, X+
    18de:	5c 91       	ld	r21, X
    18e0:	13 97       	sbiw	r26, 0x03	; 3
    18e2:	9d 01       	movw	r18, r26
    18e4:	41 15       	cp	r20, r1
    18e6:	51 05       	cpc	r21, r1
    18e8:	09 f1       	breq	.+66     	; 0x192c <free+0x9c>
    18ea:	da 01       	movw	r26, r20
    18ec:	f3 cf       	rjmp	.-26     	; 0x18d4 <free+0x44>
    18ee:	b3 83       	std	Z+3, r27	; 0x03
    18f0:	a2 83       	std	Z+2, r26	; 0x02
    18f2:	40 81       	ld	r20, Z
    18f4:	51 81       	ldd	r21, Z+1	; 0x01
    18f6:	84 0f       	add	r24, r20
    18f8:	95 1f       	adc	r25, r21
    18fa:	8a 17       	cp	r24, r26
    18fc:	9b 07       	cpc	r25, r27
    18fe:	71 f4       	brne	.+28     	; 0x191c <free+0x8c>
    1900:	8d 91       	ld	r24, X+
    1902:	9c 91       	ld	r25, X
    1904:	11 97       	sbiw	r26, 0x01	; 1
    1906:	84 0f       	add	r24, r20
    1908:	95 1f       	adc	r25, r21
    190a:	02 96       	adiw	r24, 0x02	; 2
    190c:	91 83       	std	Z+1, r25	; 0x01
    190e:	80 83       	st	Z, r24
    1910:	12 96       	adiw	r26, 0x02	; 2
    1912:	8d 91       	ld	r24, X+
    1914:	9c 91       	ld	r25, X
    1916:	13 97       	sbiw	r26, 0x03	; 3
    1918:	93 83       	std	Z+3, r25	; 0x03
    191a:	82 83       	std	Z+2, r24	; 0x02
    191c:	21 15       	cp	r18, r1
    191e:	31 05       	cpc	r19, r1
    1920:	29 f4       	brne	.+10     	; 0x192c <free+0x9c>
    1922:	f0 93 f1 02 	sts	0x02F1, r31
    1926:	e0 93 f0 02 	sts	0x02F0, r30
    192a:	3e c0       	rjmp	.+124    	; 0x19a8 <free+0x118>
    192c:	d9 01       	movw	r26, r18
    192e:	13 96       	adiw	r26, 0x03	; 3
    1930:	fc 93       	st	X, r31
    1932:	ee 93       	st	-X, r30
    1934:	12 97       	sbiw	r26, 0x02	; 2
    1936:	4d 91       	ld	r20, X+
    1938:	5d 91       	ld	r21, X+
    193a:	a4 0f       	add	r26, r20
    193c:	b5 1f       	adc	r27, r21
    193e:	ea 17       	cp	r30, r26
    1940:	fb 07       	cpc	r31, r27
    1942:	79 f4       	brne	.+30     	; 0x1962 <free+0xd2>
    1944:	80 81       	ld	r24, Z
    1946:	91 81       	ldd	r25, Z+1	; 0x01
    1948:	84 0f       	add	r24, r20
    194a:	95 1f       	adc	r25, r21
    194c:	02 96       	adiw	r24, 0x02	; 2
    194e:	d9 01       	movw	r26, r18
    1950:	11 96       	adiw	r26, 0x01	; 1
    1952:	9c 93       	st	X, r25
    1954:	8e 93       	st	-X, r24
    1956:	82 81       	ldd	r24, Z+2	; 0x02
    1958:	93 81       	ldd	r25, Z+3	; 0x03
    195a:	13 96       	adiw	r26, 0x03	; 3
    195c:	9c 93       	st	X, r25
    195e:	8e 93       	st	-X, r24
    1960:	12 97       	sbiw	r26, 0x02	; 2
    1962:	e0 e0       	ldi	r30, 0x00	; 0
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	9b 81       	ldd	r25, Y+3	; 0x03
    196a:	00 97       	sbiw	r24, 0x00	; 0
    196c:	19 f0       	breq	.+6      	; 0x1974 <free+0xe4>
    196e:	fe 01       	movw	r30, r28
    1970:	ec 01       	movw	r28, r24
    1972:	f9 cf       	rjmp	.-14     	; 0x1966 <free+0xd6>
    1974:	ce 01       	movw	r24, r28
    1976:	02 96       	adiw	r24, 0x02	; 2
    1978:	28 81       	ld	r18, Y
    197a:	39 81       	ldd	r19, Y+1	; 0x01
    197c:	82 0f       	add	r24, r18
    197e:	93 1f       	adc	r25, r19
    1980:	20 91 ee 02 	lds	r18, 0x02EE
    1984:	30 91 ef 02 	lds	r19, 0x02EF
    1988:	28 17       	cp	r18, r24
    198a:	39 07       	cpc	r19, r25
    198c:	69 f4       	brne	.+26     	; 0x19a8 <free+0x118>
    198e:	30 97       	sbiw	r30, 0x00	; 0
    1990:	29 f4       	brne	.+10     	; 0x199c <free+0x10c>
    1992:	10 92 f1 02 	sts	0x02F1, r1
    1996:	10 92 f0 02 	sts	0x02F0, r1
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <free+0x110>
    199c:	13 82       	std	Z+3, r1	; 0x03
    199e:	12 82       	std	Z+2, r1	; 0x02
    19a0:	d0 93 ef 02 	sts	0x02EF, r29
    19a4:	c0 93 ee 02 	sts	0x02EE, r28
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	08 95       	ret

000019ae <memset>:
    19ae:	dc 01       	movw	r26, r24
    19b0:	01 c0       	rjmp	.+2      	; 0x19b4 <memset+0x6>
    19b2:	6d 93       	st	X+, r22
    19b4:	41 50       	subi	r20, 0x01	; 1
    19b6:	50 40       	sbci	r21, 0x00	; 0
    19b8:	e0 f7       	brcc	.-8      	; 0x19b2 <memset+0x4>
    19ba:	08 95       	ret

000019bc <strrev>:
    19bc:	dc 01       	movw	r26, r24
    19be:	fc 01       	movw	r30, r24
    19c0:	67 2f       	mov	r22, r23
    19c2:	71 91       	ld	r23, Z+
    19c4:	77 23       	and	r23, r23
    19c6:	e1 f7       	brne	.-8      	; 0x19c0 <strrev+0x4>
    19c8:	32 97       	sbiw	r30, 0x02	; 2
    19ca:	04 c0       	rjmp	.+8      	; 0x19d4 <strrev+0x18>
    19cc:	7c 91       	ld	r23, X
    19ce:	6d 93       	st	X+, r22
    19d0:	70 83       	st	Z, r23
    19d2:	62 91       	ld	r22, -Z
    19d4:	ae 17       	cp	r26, r30
    19d6:	bf 07       	cpc	r27, r31
    19d8:	c8 f3       	brcs	.-14     	; 0x19cc <strrev+0x10>
    19da:	08 95       	ret

000019dc <_exit>:
    19dc:	f8 94       	cli

000019de <__stop_program>:
    19de:	ff cf       	rjmp	.-2      	; 0x19de <__stop_program>
