
Node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016a  00800100  00001e06  00001e9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000103  0080026a  0080026a  00002004  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000278  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003827  00000000  00000000  000022ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000110b  00000000  00000000  00005ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001053  00000000  00000000  00006bde  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000810  00000000  00000000  00007c34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007e0  00000000  00000000  00008444  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001fb3  00000000  00000000  00008c24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000250  00000000  00000000  0000abd7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 01 	jmp	0x368	; 0x368 <__ctors_end>
       4:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       8:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
       c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      10:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      14:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      18:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      1c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      20:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      24:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      28:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      2c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      30:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      34:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      38:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      3c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      40:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      44:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      48:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      4c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      50:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      54:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      58:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      5c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      60:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      64:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      68:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>
      6c:	0c 94 d1 01 	jmp	0x3a2	; 0x3a2 <__bad_interrupt>

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <setMenu+0x4e>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e6 e0       	ldi	r30, 0x06	; 6
     37c:	fe e1       	ldi	r31, 0x1E	; 30
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	aa 36       	cpi	r26, 0x6A	; 106
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	aa e6       	ldi	r26, 0x6A	; 106
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ad 36       	cpi	r26, 0x6D	; 109
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	0e 94 17 09 	call	0x122e	; 0x122e <main>
     39e:	0c 94 01 0f 	jmp	0x1e02	; 0x1e02 <_exit>

000003a2 <__bad_interrupt>:
     3a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003a6 <adc>:

// ADC read from channel
int adc(int channel){	
	char selectedAxis;
	// Swicth-case depending on MUX channel 	
	switch (channel)
     3a6:	83 30       	cpi	r24, 0x03	; 3
     3a8:	91 05       	cpc	r25, r1
     3aa:	39 f0       	breq	.+14     	; 0x3ba <adc+0x14>
     3ac:	84 30       	cpi	r24, 0x04	; 4
     3ae:	91 05       	cpc	r25, r1
     3b0:	31 f0       	breq	.+12     	; 0x3be <adc+0x18>
     3b2:	02 97       	sbiw	r24, 0x02	; 2
     3b4:	31 f0       	breq	.+12     	; 0x3c2 <adc+0x1c>
	{
		case 1:
		selectedAxis = 0b00000100;
     3b6:	84 e0       	ldi	r24, 0x04	; 4
     3b8:	05 c0       	rjmp	.+10     	; 0x3c4 <adc+0x1e>
		case 2:
		selectedAxis = 0b00000101;
		break;
		
		case 3:
		selectedAxis = 0b00000110;
     3ba:	86 e0       	ldi	r24, 0x06	; 6
		break;
     3bc:	03 c0       	rjmp	.+6      	; 0x3c4 <adc+0x1e>
		
		case 4:
		selectedAxis = 0b00000111;
     3be:	87 e0       	ldi	r24, 0x07	; 7
		break;
     3c0:	01 c0       	rjmp	.+2      	; 0x3c4 <adc+0x1e>
		case 1:
		selectedAxis = 0b00000100;
		break;
		
		case 2:
		selectedAxis = 0b00000101;
     3c2:	85 e0       	ldi	r24, 0x05	; 5
		default:
		selectedAxis = 0b00000100;
		break;
	}
	
	*adcPointer = selectedAxis;
     3c4:	e0 91 06 01 	lds	r30, 0x0106
     3c8:	f0 91 07 01 	lds	r31, 0x0107
     3cc:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ce:	8f ef       	ldi	r24, 0xFF	; 255
     3d0:	9f e2       	ldi	r25, 0x2F	; 47
     3d2:	01 97       	sbiw	r24, 0x01	; 1
     3d4:	f1 f7       	brne	.-4      	; 0x3d2 <adc+0x2c>
     3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <adc+0x32>
     3d8:	00 00       	nop
	
	_delay_ms(10);
	
	return adcPointer[0];
     3da:	e0 91 06 01 	lds	r30, 0x0106
     3de:	f0 91 07 01 	lds	r31, 0x0107
     3e2:	80 81       	ld	r24, Z
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	08 95       	ret

000003e8 <CAN_setMode>:
	
	_delay_ms(10);
}

void CAN_setMode(char mode){
	MCP_bitMod(MCP_CANCTRL,MODE_MASK,mode);
     3e8:	48 2f       	mov	r20, r24
     3ea:	60 ee       	ldi	r22, 0xE0	; 224
     3ec:	8f e0       	ldi	r24, 0x0F	; 15
     3ee:	0e 94 da 03 	call	0x7b4	; 0x7b4 <MCP_bitMod>
     3f2:	08 95       	ret

000003f4 <CAN_sendMessage>:
}

void CAN_sendMessage(CAN_message * newMessage){
     3f4:	ef 92       	push	r14
     3f6:	ff 92       	push	r15
     3f8:	0f 93       	push	r16
     3fa:	1f 93       	push	r17
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	7c 01       	movw	r14, r24
	MCP_write(MCP_TXB0SIDL, (newMessage->id << 5));
     402:	fc 01       	movw	r30, r24
     404:	60 81       	ld	r22, Z
     406:	62 95       	swap	r22
     408:	66 0f       	add	r22, r22
     40a:	60 7e       	andi	r22, 0xE0	; 224
     40c:	82 e3       	ldi	r24, 0x32	; 50
     40e:	0e 94 b6 03 	call	0x76c	; 0x76c <MCP_write>
	MCP_write(MCP_TXB0SIDH, (newMessage->id >> 3));
     412:	f7 01       	movw	r30, r14
     414:	60 81       	ld	r22, Z
     416:	66 95       	lsr	r22
     418:	66 95       	lsr	r22
     41a:	66 95       	lsr	r22
     41c:	81 e3       	ldi	r24, 0x31	; 49
     41e:	0e 94 b6 03 	call	0x76c	; 0x76c <MCP_write>
	MCP_write(MCP_TXB0DLC, newMessage->length);
     422:	f7 01       	movw	r30, r14
     424:	61 81       	ldd	r22, Z+1	; 0x01
     426:	85 e3       	ldi	r24, 0x35	; 53
     428:	0e 94 b6 03 	call	0x76c	; 0x76c <MCP_write>
	
	for(int i=0; i<newMessage->length; i++){
     42c:	f7 01       	movw	r30, r14
     42e:	81 81       	ldd	r24, Z+1	; 0x01
     430:	88 23       	and	r24, r24
     432:	99 f0       	breq	.+38     	; 0x45a <CAN_sendMessage+0x66>
     434:	87 01       	movw	r16, r14
     436:	0e 5f       	subi	r16, 0xFE	; 254
     438:	1f 4f       	sbci	r17, 0xFF	; 255
     43a:	c0 e0       	ldi	r28, 0x00	; 0
     43c:	d0 e0       	ldi	r29, 0x00	; 0
		MCP_write(MCP_TXB0D0 + i, newMessage->data[i]);
     43e:	f8 01       	movw	r30, r16
     440:	61 91       	ld	r22, Z+
     442:	8f 01       	movw	r16, r30
     444:	8c 2f       	mov	r24, r28
     446:	8a 5c       	subi	r24, 0xCA	; 202
     448:	0e 94 b6 03 	call	0x76c	; 0x76c <MCP_write>
void CAN_sendMessage(CAN_message * newMessage){
	MCP_write(MCP_TXB0SIDL, (newMessage->id << 5));
	MCP_write(MCP_TXB0SIDH, (newMessage->id >> 3));
	MCP_write(MCP_TXB0DLC, newMessage->length);
	
	for(int i=0; i<newMessage->length; i++){
     44c:	21 96       	adiw	r28, 0x01	; 1
     44e:	f7 01       	movw	r30, r14
     450:	21 81       	ldd	r18, Z+1	; 0x01
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	c2 17       	cp	r28, r18
     456:	d3 07       	cpc	r29, r19
     458:	94 f3       	brlt	.-28     	; 0x43e <CAN_sendMessage+0x4a>
		MCP_write(MCP_TXB0D0 + i, newMessage->data[i]);
	}
	
	MCP_requestToSend(MCP_RTS_TX0);
     45a:	81 e8       	ldi	r24, 0x81	; 129
     45c:	0e 94 cc 03 	call	0x798	; 0x798 <MCP_requestToSend>
}
     460:	df 91       	pop	r29
     462:	cf 91       	pop	r28
     464:	1f 91       	pop	r17
     466:	0f 91       	pop	r16
     468:	ff 90       	pop	r15
     46a:	ef 90       	pop	r14
     46c:	08 95       	ret

0000046e <CAN_init>:
#include "CAN.h"
#include "MCP2515.h"
#include <string.h>
#include <util/delay.h>

void CAN_init(){
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	2a 97       	sbiw	r28, 0x0a	; 10
     478:	0f b6       	in	r0, 0x3f	; 63
     47a:	f8 94       	cli
     47c:	de bf       	out	0x3e, r29	; 62
     47e:	0f be       	out	0x3f, r0	; 63
     480:	cd bf       	out	0x3d, r28	; 61
	MCP_init();
     482:	0e 94 00 04 	call	0x800	; 0x800 <MCP_init>
	//CAN_setMode(MODE_LOOPBACK);
	CAN_setMode(MODE_NORMAL);
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <CAN_setMode>
	
	CAN_message message;
	message.id = 3;
     48c:	83 e0       	ldi	r24, 0x03	; 3
     48e:	89 83       	std	Y+1, r24	; 0x01
	message.length = 7;
     490:	87 e0       	ldi	r24, 0x07	; 7
     492:	8a 83       	std	Y+2, r24	; 0x02
	message.data[0] = 50;
     494:	82 e3       	ldi	r24, 0x32	; 50
     496:	8b 83       	std	Y+3, r24	; 0x03
	message.data[1] = 50;
     498:	8c 83       	std	Y+4, r24	; 0x04
	message.data[2] = 0;
     49a:	1d 82       	std	Y+5, r1	; 0x05
	message.data[3] = 50;
     49c:	8e 83       	std	Y+6, r24	; 0x06
	message.data[4] = 5;
     49e:	85 e0       	ldi	r24, 0x05	; 5
     4a0:	8f 83       	std	Y+7, r24	; 0x07
	message.data[5] = 0;
     4a2:	18 86       	std	Y+8, r1	; 0x08
	message.data[6] = 0;
     4a4:	19 86       	std	Y+9, r1	; 0x09
     4a6:	8f ef       	ldi	r24, 0xFF	; 255
     4a8:	9f e2       	ldi	r25, 0x2F	; 47
     4aa:	01 97       	sbiw	r24, 0x01	; 1
     4ac:	f1 f7       	brne	.-4      	; 0x4aa <CAN_init+0x3c>
     4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <CAN_init+0x42>
     4b0:	00 00       	nop
	
	_delay_ms(10);
	
	CAN_sendMessage(&message);
     4b2:	ce 01       	movw	r24, r28
     4b4:	01 96       	adiw	r24, 0x01	; 1
     4b6:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <CAN_sendMessage>
     4ba:	8f ef       	ldi	r24, 0xFF	; 255
     4bc:	9f e2       	ldi	r25, 0x2F	; 47
     4be:	01 97       	sbiw	r24, 0x01	; 1
     4c0:	f1 f7       	brne	.-4      	; 0x4be <CAN_init+0x50>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <CAN_init+0x56>
     4c4:	00 00       	nop
	
	_delay_ms(10);
}
     4c6:	2a 96       	adiw	r28, 0x0a	; 10
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	f8 94       	cli
     4cc:	de bf       	out	0x3e, r29	; 62
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	cd bf       	out	0x3d, r28	; 61
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	08 95       	ret

000004d8 <CAN_recieve>:
	}
	
	MCP_requestToSend(MCP_RTS_TX0);
}

void CAN_recieve(CAN_message * newReceivedMessage){		
     4d8:	1f 93       	push	r17
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	ec 01       	movw	r28, r24
	if(MCP_read(MCP_CANINTF), MCP_RX0IF){
     4e0:	8c e2       	ldi	r24, 0x2C	; 44
     4e2:	0e 94 a2 03 	call	0x744	; 0x744 <MCP_read>
     4e6:	8f ef       	ldi	r24, 0xFF	; 255
     4e8:	9f e2       	ldi	r25, 0x2F	; 47
     4ea:	01 97       	sbiw	r24, 0x01	; 1
     4ec:	f1 f7       	brne	.-4      	; 0x4ea <CAN_recieve+0x12>
     4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <CAN_recieve+0x18>
     4f0:	00 00       	nop
		_delay_ms(10);
		newReceivedMessage->id = (MCP_read(MCP_RXB0SIDH) << 3) | (MCP_read(MCP_RXB0SIDL) >> 5);
     4f2:	81 e6       	ldi	r24, 0x61	; 97
     4f4:	0e 94 a2 03 	call	0x744	; 0x744 <MCP_read>
     4f8:	18 2f       	mov	r17, r24
     4fa:	82 e6       	ldi	r24, 0x62	; 98
     4fc:	0e 94 a2 03 	call	0x744	; 0x744 <MCP_read>
     500:	11 0f       	add	r17, r17
     502:	11 0f       	add	r17, r17
     504:	11 0f       	add	r17, r17
     506:	82 95       	swap	r24
     508:	86 95       	lsr	r24
     50a:	87 70       	andi	r24, 0x07	; 7
     50c:	18 2b       	or	r17, r24
     50e:	18 83       	st	Y, r17
		newReceivedMessage->length = MCP_read(MCP_RXB0DLC) & 0x0F;
     510:	85 e6       	ldi	r24, 0x65	; 101
     512:	0e 94 a2 03 	call	0x744	; 0x744 <MCP_read>
     516:	8f 70       	andi	r24, 0x0F	; 15
     518:	89 83       	std	Y+1, r24	; 0x01
		for(uint8_t i=0; i<newReceivedMessage->length; i++){
     51a:	88 23       	and	r24, r24
     51c:	69 f0       	breq	.+26     	; 0x538 <__stack+0x39>
     51e:	10 e0       	ldi	r17, 0x00	; 0
			newReceivedMessage->data[i] = MCP_read(MCP_RXB0D0 + i);
     520:	86 e6       	ldi	r24, 0x66	; 102
     522:	81 0f       	add	r24, r17
     524:	0e 94 a2 03 	call	0x744	; 0x744 <MCP_read>
     528:	fe 01       	movw	r30, r28
     52a:	e1 0f       	add	r30, r17
     52c:	f1 1d       	adc	r31, r1
     52e:	82 83       	std	Z+2, r24	; 0x02
void CAN_recieve(CAN_message * newReceivedMessage){		
	if(MCP_read(MCP_CANINTF), MCP_RX0IF){
		_delay_ms(10);
		newReceivedMessage->id = (MCP_read(MCP_RXB0SIDH) << 3) | (MCP_read(MCP_RXB0SIDL) >> 5);
		newReceivedMessage->length = MCP_read(MCP_RXB0DLC) & 0x0F;
		for(uint8_t i=0; i<newReceivedMessage->length; i++){
     530:	1f 5f       	subi	r17, 0xFF	; 255
     532:	89 81       	ldd	r24, Y+1	; 0x01
     534:	18 17       	cp	r17, r24
     536:	a0 f3       	brcs	.-24     	; 0x520 <__stack+0x21>
			newReceivedMessage->data[i] = MCP_read(MCP_RXB0D0 + i);
		}
		MCP_bitMod(MCP_CANINTF, MCP_RX0IF, 0);
     538:	40 e0       	ldi	r20, 0x00	; 0
     53a:	61 e0       	ldi	r22, 0x01	; 1
     53c:	8c e2       	ldi	r24, 0x2C	; 44
     53e:	0e 94 da 03 	call	0x7b4	; 0x7b4 <MCP_bitMod>
	}
}
     542:	df 91       	pop	r29
     544:	cf 91       	pop	r28
     546:	1f 91       	pop	r17
     548:	08 95       	ret

0000054a <reMap>:

	return 0;
}

// Remapping input to new scale with range from min to max
int reMap(float input, float minVal, float maxVal, float scale){
     54a:	4f 92       	push	r4
     54c:	5f 92       	push	r5
     54e:	6f 92       	push	r6
     550:	7f 92       	push	r7
     552:	af 92       	push	r10
     554:	bf 92       	push	r11
     556:	cf 92       	push	r12
     558:	df 92       	push	r13
     55a:	ef 92       	push	r14
     55c:	ff 92       	push	r15
     55e:	0f 93       	push	r16
     560:	1f 93       	push	r17
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	00 d0       	rcall	.+0      	; 0x568 <reMap+0x1e>
     568:	00 d0       	rcall	.+0      	; 0x56a <reMap+0x20>
     56a:	cd b7       	in	r28, 0x3d	; 61
     56c:	de b7       	in	r29, 0x3e	; 62
     56e:	69 83       	std	Y+1, r22	; 0x01
     570:	7a 83       	std	Y+2, r23	; 0x02
     572:	8b 83       	std	Y+3, r24	; 0x03
     574:	9c 83       	std	Y+4, r25	; 0x04
     576:	c8 01       	movw	r24, r16
     578:	b7 01       	movw	r22, r14

	// find range of input
	float range = maxVal - minVal;
     57a:	0e 94 15 0b 	call	0x162a	; 0x162a <__subsf3>
     57e:	2b 01       	movw	r4, r22
     580:	3c 01       	movw	r6, r24

	if(range == 0) // cannot divide zero
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	a9 01       	movw	r20, r18
     588:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <__cmpsf2>
     58c:	81 11       	cpse	r24, r1
     58e:	0c c0       	rjmp	.+24     	; 0x5a8 <reMap+0x5e>
		return scale/2; // return middle position
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	40 e0       	ldi	r20, 0x00	; 0
     596:	5f e3       	ldi	r21, 0x3F	; 63
     598:	c6 01       	movw	r24, r12
     59a:	b5 01       	movw	r22, r10
     59c:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__mulsf3>
     5a0:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__fixsfsi>
     5a4:	cb 01       	movw	r24, r22
     5a6:	25 c0       	rjmp	.+74     	; 0x5f2 <reMap+0xa8>
	
	else {
		int result = scale / range * input;
     5a8:	a3 01       	movw	r20, r6
     5aa:	92 01       	movw	r18, r4
     5ac:	c6 01       	movw	r24, r12
     5ae:	b5 01       	movw	r22, r10
     5b0:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <__divsf3>
     5b4:	29 81       	ldd	r18, Y+1	; 0x01
     5b6:	3a 81       	ldd	r19, Y+2	; 0x02
     5b8:	4b 81       	ldd	r20, Y+3	; 0x03
     5ba:	5c 81       	ldd	r21, Y+4	; 0x04
     5bc:	0e 94 c9 0c 	call	0x1992	; 0x1992 <__mulsf3>
     5c0:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__fixsfsi>
     5c4:	2b 01       	movw	r4, r22
     5c6:	3c 01       	movw	r6, r24

		if(result > scale)
     5c8:	88 27       	eor	r24, r24
     5ca:	77 fd       	sbrc	r23, 7
     5cc:	80 95       	com	r24
     5ce:	98 2f       	mov	r25, r24
     5d0:	0e 94 19 0c 	call	0x1832	; 0x1832 <__floatsisf>
     5d4:	9b 01       	movw	r18, r22
     5d6:	ac 01       	movw	r20, r24
     5d8:	c6 01       	movw	r24, r12
     5da:	b5 01       	movw	r22, r10
     5dc:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <__cmpsf2>
     5e0:	88 23       	and	r24, r24
     5e2:	34 f4       	brge	.+12     	; 0x5f0 <reMap+0xa6>
			return scale; // cap max output value
     5e4:	c6 01       	movw	r24, r12
     5e6:	b5 01       	movw	r22, r10
     5e8:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <__fixsfsi>
     5ec:	cb 01       	movw	r24, r22
     5ee:	01 c0       	rjmp	.+2      	; 0x5f2 <reMap+0xa8>
		else
			return result; // return remapped value
     5f0:	c2 01       	movw	r24, r4
	}
     5f2:	0f 90       	pop	r0
     5f4:	0f 90       	pop	r0
     5f6:	0f 90       	pop	r0
     5f8:	0f 90       	pop	r0
     5fa:	df 91       	pop	r29
     5fc:	cf 91       	pop	r28
     5fe:	1f 91       	pop	r17
     600:	0f 91       	pop	r16
     602:	ff 90       	pop	r15
     604:	ef 90       	pop	r14
     606:	df 90       	pop	r13
     608:	cf 90       	pop	r12
     60a:	bf 90       	pop	r11
     60c:	af 90       	pop	r10
     60e:	7f 90       	pop	r7
     610:	6f 90       	pop	r6
     612:	5f 90       	pop	r5
     614:	4f 90       	pop	r4
     616:	08 95       	ret

00000618 <getControlOutput>:
#include <stdio.h>
#include "joystick.h"


// Read, remap and auto adjust analog input
int getControlOutput(int channel, int newScale, int deadzone, int *minVal, int *maxVal){
     618:	2f 92       	push	r2
     61a:	3f 92       	push	r3
     61c:	4f 92       	push	r4
     61e:	5f 92       	push	r5
     620:	6f 92       	push	r6
     622:	7f 92       	push	r7
     624:	8f 92       	push	r8
     626:	9f 92       	push	r9
     628:	af 92       	push	r10
     62a:	bf 92       	push	r11
     62c:	cf 92       	push	r12
     62e:	df 92       	push	r13
     630:	ef 92       	push	r14
     632:	ff 92       	push	r15
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	00 d0       	rcall	.+0      	; 0x63e <getControlOutput+0x26>
     63e:	00 d0       	rcall	.+0      	; 0x640 <getControlOutput+0x28>
     640:	00 d0       	rcall	.+0      	; 0x642 <getControlOutput+0x2a>
     642:	cd b7       	in	r28, 0x3d	; 61
     644:	de b7       	in	r29, 0x3e	; 62
     646:	4b 01       	movw	r8, r22
     648:	1a 01       	movw	r2, r20
     64a:	79 01       	movw	r14, r18

	int result = 0; // stores result
	int analogRead = 0; // stores value from adc
	int scale = newScale; // Scaling input to 0-100

	analogRead = adc(channel); // Reading input from ADC
     64c:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <adc>
     650:	9e 83       	std	Y+6, r25	; 0x06
     652:	8d 83       	std	Y+5, r24	; 0x05
     654:	8f ef       	ldi	r24, 0xFF	; 255
     656:	9f e2       	ldi	r25, 0x2F	; 47
     658:	01 97       	sbiw	r24, 0x01	; 1
     65a:	f1 f7       	brne	.-4      	; 0x658 <getControlOutput+0x40>
     65c:	00 c0       	rjmp	.+0      	; 0x65e <getControlOutput+0x46>
     65e:	00 00       	nop
	_delay_ms(10);

	// Auto adjusting range of input
	if(analogRead < *minVal)
     660:	f7 01       	movw	r30, r14
     662:	80 81       	ld	r24, Z
     664:	91 81       	ldd	r25, Z+1	; 0x01
     666:	2d 81       	ldd	r18, Y+5	; 0x05
     668:	3e 81       	ldd	r19, Y+6	; 0x06
     66a:	28 17       	cp	r18, r24
     66c:	39 07       	cpc	r19, r25
     66e:	14 f4       	brge	.+4      	; 0x674 <getControlOutput+0x5c>
		*minVal = analogRead;
     670:	31 83       	std	Z+1, r19	; 0x01
     672:	20 83       	st	Z, r18
	if(analogRead > *maxVal)
     674:	f8 01       	movw	r30, r16
     676:	80 81       	ld	r24, Z
     678:	91 81       	ldd	r25, Z+1	; 0x01
     67a:	2d 81       	ldd	r18, Y+5	; 0x05
     67c:	3e 81       	ldd	r19, Y+6	; 0x06
     67e:	82 17       	cp	r24, r18
     680:	93 07       	cpc	r25, r19
     682:	14 f4       	brge	.+4      	; 0x688 <getControlOutput+0x70>
		*maxVal = analogRead;
     684:	31 83       	std	Z+1, r19	; 0x01
     686:	20 83       	st	Z, r18

	// Remapping input from ADC to new scale
	result = reMap(analogRead, *minVal, *maxVal, scale);
     688:	b4 01       	movw	r22, r8
     68a:	88 27       	eor	r24, r24
     68c:	77 fd       	sbrc	r23, 7
     68e:	80 95       	com	r24
     690:	98 2f       	mov	r25, r24
     692:	0e 94 19 0c 	call	0x1832	; 0x1832 <__floatsisf>
     696:	5b 01       	movw	r10, r22
     698:	6c 01       	movw	r12, r24
     69a:	f8 01       	movw	r30, r16
     69c:	60 81       	ld	r22, Z
     69e:	71 81       	ldd	r23, Z+1	; 0x01
     6a0:	88 27       	eor	r24, r24
     6a2:	77 fd       	sbrc	r23, 7
     6a4:	80 95       	com	r24
     6a6:	98 2f       	mov	r25, r24
     6a8:	0e 94 19 0c 	call	0x1832	; 0x1832 <__floatsisf>
     6ac:	2b 01       	movw	r4, r22
     6ae:	3c 01       	movw	r6, r24
     6b0:	f7 01       	movw	r30, r14
     6b2:	60 81       	ld	r22, Z
     6b4:	71 81       	ldd	r23, Z+1	; 0x01
     6b6:	88 27       	eor	r24, r24
     6b8:	77 fd       	sbrc	r23, 7
     6ba:	80 95       	com	r24
     6bc:	98 2f       	mov	r25, r24
     6be:	0e 94 19 0c 	call	0x1832	; 0x1832 <__floatsisf>
     6c2:	69 83       	std	Y+1, r22	; 0x01
     6c4:	7a 83       	std	Y+2, r23	; 0x02
     6c6:	8b 83       	std	Y+3, r24	; 0x03
     6c8:	9c 83       	std	Y+4, r25	; 0x04
     6ca:	2d 81       	ldd	r18, Y+5	; 0x05
     6cc:	3e 81       	ldd	r19, Y+6	; 0x06
     6ce:	b9 01       	movw	r22, r18
     6d0:	88 27       	eor	r24, r24
     6d2:	77 fd       	sbrc	r23, 7
     6d4:	80 95       	com	r24
     6d6:	98 2f       	mov	r25, r24
     6d8:	0e 94 19 0c 	call	0x1832	; 0x1832 <__floatsisf>
     6dc:	83 01       	movw	r16, r6
     6de:	72 01       	movw	r14, r4
     6e0:	29 81       	ldd	r18, Y+1	; 0x01
     6e2:	3a 81       	ldd	r19, Y+2	; 0x02
     6e4:	4b 81       	ldd	r20, Y+3	; 0x03
     6e6:	5c 81       	ldd	r21, Y+4	; 0x04
     6e8:	0e 94 a5 02 	call	0x54a	; 0x54a <reMap>

	// deadzone
	if(result > scale/2 - deadzone && result < scale/2 + deadzone)
     6ec:	94 01       	movw	r18, r8
     6ee:	99 20       	and	r9, r9
     6f0:	14 f4       	brge	.+4      	; 0x6f6 <getControlOutput+0xde>
     6f2:	2f 5f       	subi	r18, 0xFF	; 255
     6f4:	3f 4f       	sbci	r19, 0xFF	; 255
     6f6:	35 95       	asr	r19
     6f8:	27 95       	ror	r18
     6fa:	a9 01       	movw	r20, r18
     6fc:	42 19       	sub	r20, r2
     6fe:	53 09       	sbc	r21, r3
     700:	48 17       	cp	r20, r24
     702:	59 07       	cpc	r21, r25
     704:	34 f4       	brge	.+12     	; 0x712 <getControlOutput+0xfa>
     706:	22 0e       	add	r2, r18
     708:	33 1e       	adc	r3, r19
     70a:	82 15       	cp	r24, r2
     70c:	93 05       	cpc	r25, r3
     70e:	0c f4       	brge	.+2      	; 0x712 <getControlOutput+0xfa>
		result = scale/2;
     710:	c9 01       	movw	r24, r18

	return result;
}
     712:	26 96       	adiw	r28, 0x06	; 6
     714:	0f b6       	in	r0, 0x3f	; 63
     716:	f8 94       	cli
     718:	de bf       	out	0x3e, r29	; 62
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	cd bf       	out	0x3d, r28	; 61
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	ff 90       	pop	r15
     728:	ef 90       	pop	r14
     72a:	df 90       	pop	r13
     72c:	cf 90       	pop	r12
     72e:	bf 90       	pop	r11
     730:	af 90       	pop	r10
     732:	9f 90       	pop	r9
     734:	8f 90       	pop	r8
     736:	7f 90       	pop	r7
     738:	6f 90       	pop	r6
     73a:	5f 90       	pop	r5
     73c:	4f 90       	pop	r4
     73e:	3f 90       	pop	r3
     740:	2f 90       	pop	r2
     742:	08 95       	ret

00000744 <MCP_read>:
void MCP_init(){
	SPI_init();
	MCP_reset();
}

char MCP_read(char adr){
     744:	cf 93       	push	r28
     746:	c8 2f       	mov	r28, r24
	SPI_slaveEnable(1); //enable CS pin	
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <SPI_slaveEnable>
	SPI_write(MCP_READ); //set read instruction
     74e:	83 e0       	ldi	r24, 0x03	; 3
     750:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <SPI_write>
	SPI_write(adr); //set address
     754:	8c 2f       	mov	r24, r28
     756:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <SPI_write>
	uint8_t temp = SPI_read(); //read from address	
     75a:	0e 94 ed 0a 	call	0x15da	; 0x15da <SPI_read>
     75e:	c8 2f       	mov	r28, r24
	SPI_slaveEnable(0); //disable CS pin		
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <SPI_slaveEnable>
	return temp;
}
     766:	8c 2f       	mov	r24, r28
     768:	cf 91       	pop	r28
     76a:	08 95       	ret

0000076c <MCP_write>:

void MCP_write(char adr, char data){
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	d8 2f       	mov	r29, r24
     772:	c6 2f       	mov	r28, r22
	SPI_slaveEnable(1); //enable CS pin	
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <SPI_slaveEnable>
	SPI_write(MCP_WRITE); //set write instruction
     77a:	82 e0       	ldi	r24, 0x02	; 2
     77c:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <SPI_write>
	SPI_write(adr); //set address
     780:	8d 2f       	mov	r24, r29
     782:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <SPI_write>
	SPI_write(data); //write data	
     786:	8c 2f       	mov	r24, r28
     788:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <SPI_write>
	SPI_slaveEnable(0); //disable CS pin
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <SPI_slaveEnable>
}
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	08 95       	ret

00000798 <MCP_requestToSend>:

void MCP_requestToSend(char txBuffer){
     798:	cf 93       	push	r28
     79a:	c8 2f       	mov	r28, r24
	SPI_slaveEnable(1); //enable CS pin	
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <SPI_slaveEnable>
	SPI_write(MCP_RTS_TX0 | txBuffer); //request-to-send	
     7a2:	8c 2f       	mov	r24, r28
     7a4:	81 68       	ori	r24, 0x81	; 129
     7a6:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <SPI_write>
	SPI_slaveEnable(0); //disable CS pin
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <SPI_slaveEnable>
}
     7b0:	cf 91       	pop	r28
     7b2:	08 95       	ret

000007b4 <MCP_bitMod>:
	char temp = SPI_read();
	SPI_slaveEnable(0); //disable CS pin
	return temp;
}

void MCP_bitMod(char adr, char mask, char data){
     7b4:	1f 93       	push	r17
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	18 2f       	mov	r17, r24
     7bc:	d6 2f       	mov	r29, r22
     7be:	c4 2f       	mov	r28, r20
	SPI_slaveEnable(1); //enable CS pin	
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <SPI_slaveEnable>
	SPI_write(MCP_BITMOD); //bit modify instruction
     7c6:	85 e0       	ldi	r24, 0x05	; 5
     7c8:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <SPI_write>
	SPI_write(adr); //set address
     7cc:	81 2f       	mov	r24, r17
     7ce:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <SPI_write>
	SPI_write(mask); //set bitmask
     7d2:	8d 2f       	mov	r24, r29
     7d4:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <SPI_write>
	SPI_write(data); //write data	
     7d8:	8c 2f       	mov	r24, r28
     7da:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <SPI_write>
	SPI_slaveEnable(0); //disable CS pin
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <SPI_slaveEnable>
}
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	08 95       	ret

000007ec <MCP_reset>:

void MCP_reset(){
	SPI_slaveEnable(1); //enable CS pin	
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <SPI_slaveEnable>
	SPI_write(MCP_RESET); //reset instruction	
     7f2:	80 ec       	ldi	r24, 0xC0	; 192
     7f4:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <SPI_write>
	SPI_slaveEnable(0); //disable CS pin
     7f8:	80 e0       	ldi	r24, 0x00	; 0
     7fa:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <SPI_slaveEnable>
     7fe:	08 95       	ret

00000800 <MCP_init>:
#include <avr/io.h>
#include "MCP2515.h"
#include "SPI.h"

void MCP_init(){
	SPI_init();
     800:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <SPI_init>
	MCP_reset();
     804:	0e 94 f6 03 	call	0x7ec	; 0x7ec <MCP_reset>
     808:	08 95       	ret

0000080a <calibrationDummy>:
	//currentMenu = currentMenu->parent;
	OLED_ClearScreen(); // clear oled screen
	printMenuToScreen(&currentMenu); // Show menu on screen
	printCursor(menuIt, 2);
}
void calibrationDummy(){
     80a:	08 95       	ret

0000080c <printMenuToScreen>:
	//_delay_ms(500); // delay after keystroke
	}
}

// get children from parent node
void printMenuToScreen(struct MenuItem * nodeName){	
     80c:	ef 92       	push	r14
     80e:	ff 92       	push	r15
     810:	0f 93       	push	r16
     812:	1f 93       	push	r17
     814:	cf 93       	push	r28
     816:	df 93       	push	r29
     818:	7c 01       	movw	r14, r24
	//char * newTitle = strcat("-",strcat(nodeName->title,"-"));	
	OLED_Pos(0,4);
     81a:	64 e0       	ldi	r22, 0x04	; 4
     81c:	70 e0       	ldi	r23, 0x00	; 0
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
	OLED_Print(nodeName->title);
     826:	d7 01       	movw	r26, r14
     828:	8d 91       	ld	r24, X+
     82a:	9c 91       	ld	r25, X
     82c:	0e 94 ad 09 	call	0x135a	; 0x135a <OLED_Print>
	
	for(int i=0; i<nodeName->numOfChildren; i++){
     830:	f7 01       	movw	r30, r14
     832:	26 89       	ldd	r18, Z+22	; 0x16
     834:	37 89       	ldd	r19, Z+23	; 0x17
     836:	12 16       	cp	r1, r18
     838:	13 06       	cpc	r1, r19
     83a:	d4 f4       	brge	.+52     	; 0x870 <printMenuToScreen+0x64>
     83c:	87 01       	movw	r16, r14
     83e:	0c 5f       	subi	r16, 0xFC	; 252
     840:	1f 4f       	sbci	r17, 0xFF	; 255
     842:	c0 e0       	ldi	r28, 0x00	; 0
     844:	d0 e0       	ldi	r29, 0x00	; 0
		OLED_Pos(i+2,4);
     846:	64 e0       	ldi	r22, 0x04	; 4
     848:	70 e0       	ldi	r23, 0x00	; 0
     84a:	ce 01       	movw	r24, r28
     84c:	02 96       	adiw	r24, 0x02	; 2
     84e:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
		OLED_Print(nodeName->children[i]->title);
     852:	d8 01       	movw	r26, r16
     854:	ed 91       	ld	r30, X+
     856:	fd 91       	ld	r31, X+
     858:	8d 01       	movw	r16, r26
     85a:	80 81       	ld	r24, Z
     85c:	91 81       	ldd	r25, Z+1	; 0x01
     85e:	0e 94 ad 09 	call	0x135a	; 0x135a <OLED_Print>
void printMenuToScreen(struct MenuItem * nodeName){	
	//char * newTitle = strcat("-",strcat(nodeName->title,"-"));	
	OLED_Pos(0,4);
	OLED_Print(nodeName->title);
	
	for(int i=0; i<nodeName->numOfChildren; i++){
     862:	21 96       	adiw	r28, 0x01	; 1
     864:	f7 01       	movw	r30, r14
     866:	26 89       	ldd	r18, Z+22	; 0x16
     868:	37 89       	ldd	r19, Z+23	; 0x17
     86a:	c2 17       	cp	r28, r18
     86c:	d3 07       	cpc	r29, r19
     86e:	5c f3       	brlt	.-42     	; 0x846 <printMenuToScreen+0x3a>
		OLED_Pos(i+2,4);
		OLED_Print(nodeName->children[i]->title);
	}
	if(nodeName->parent != NULL){
     870:	d7 01       	movw	r26, r14
     872:	12 96       	adiw	r26, 0x02	; 2
     874:	8d 91       	ld	r24, X+
     876:	9c 91       	ld	r25, X
     878:	13 97       	sbiw	r26, 0x03	; 3
     87a:	89 2b       	or	r24, r25
     87c:	51 f0       	breq	.+20     	; 0x892 <printMenuToScreen+0x86>
		OLED_Pos(nodeName->numOfChildren+2,4);
     87e:	64 e0       	ldi	r22, 0x04	; 4
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	c9 01       	movw	r24, r18
     884:	02 96       	adiw	r24, 0x02	; 2
     886:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
		OLED_Print("Return");
     88a:	86 e4       	ldi	r24, 0x46	; 70
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	0e 94 ad 09 	call	0x135a	; 0x135a <OLED_Print>
	}
}
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	1f 91       	pop	r17
     898:	0f 91       	pop	r16
     89a:	ff 90       	pop	r15
     89c:	ef 90       	pop	r14
     89e:	08 95       	ret

000008a0 <menuInit>:
int8_t kp = 6;
int8_t mode = 0;
int menuIt;


void menuInit(){
     8a0:	8f 92       	push	r8
     8a2:	9f 92       	push	r9
     8a4:	af 92       	push	r10
     8a6:	bf 92       	push	r11
     8a8:	cf 92       	push	r12
     8aa:	df 92       	push	r13
     8ac:	ef 92       	push	r14
     8ae:	ff 92       	push	r15
     8b0:	0f 93       	push	r16
     8b2:	1f 93       	push	r17
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
	
	OLED_ClearScreen();
     8b8:	0e 94 35 0a 	call	0x146a	; 0x146a <OLED_ClearScreen>
	OLED_Pos(2, 1);
     8bc:	61 e0       	ldi	r22, 0x01	; 1
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	82 e0       	ldi	r24, 0x02	; 2
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
	OLED_Print(" >");
     8c8:	8d e4       	ldi	r24, 0x4D	; 77
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	0e 94 ad 09 	call	0x135a	; 0x135a <OLED_Print>
	
	mainmenu.title = "Main menu";
     8d0:	cf ef       	ldi	r28, 0xFF	; 255
     8d2:	d2 e0       	ldi	r29, 0x02	; 2
     8d4:	80 e5       	ldi	r24, 0x50	; 80
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	99 83       	std	Y+1, r25	; 0x01
     8da:	88 83       	st	Y, r24
	newgame.title = "New game";
     8dc:	0f 2e       	mov	r0, r31
     8de:	f7 eb       	ldi	r31, 0xB7	; 183
     8e0:	ef 2e       	mov	r14, r31
     8e2:	f2 e0       	ldi	r31, 0x02	; 2
     8e4:	ff 2e       	mov	r15, r31
     8e6:	f0 2d       	mov	r31, r0
     8e8:	8a e5       	ldi	r24, 0x5A	; 90
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	f7 01       	movw	r30, r14
     8ee:	91 83       	std	Z+1, r25	; 0x01
     8f0:	80 83       	st	Z, r24
	settings.title = "Settings";
     8f2:	a7 e8       	ldi	r26, 0x87	; 135
     8f4:	b2 e0       	ldi	r27, 0x02	; 2
     8f6:	83 e6       	ldi	r24, 0x63	; 99
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	11 96       	adiw	r26, 0x01	; 1
     8fc:	9c 93       	st	X, r25
     8fe:	8e 93       	st	-X, r24
	highscore.title = "Highscore";
     900:	8c e6       	ldi	r24, 0x6C	; 108
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	90 93 48 03 	sts	0x0348, r25
     908:	80 93 47 03 	sts	0x0347, r24
	about.title = "About";
     90c:	0f 2e       	mov	r0, r31
     90e:	ff e2       	ldi	r31, 0x2F	; 47
     910:	af 2e       	mov	r10, r31
     912:	f3 e0       	ldi	r31, 0x03	; 3
     914:	bf 2e       	mov	r11, r31
     916:	f0 2d       	mov	r31, r0
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	92 e0       	ldi	r25, 0x02	; 2
     91c:	f5 01       	movw	r30, r10
     91e:	91 83       	std	Z+1, r25	; 0x01
     920:	80 83       	st	Z, r24
	misc.title = "Misc";
     922:	0f 2e       	mov	r0, r31
     924:	f7 e1       	ldi	r31, 0x17	; 23
     926:	8f 2e       	mov	r8, r31
     928:	f3 e0       	ldi	r31, 0x03	; 3
     92a:	9f 2e       	mov	r9, r31
     92c:	f0 2d       	mov	r31, r0
     92e:	86 e7       	ldi	r24, 0x76	; 118
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	f4 01       	movw	r30, r8
     934:	91 83       	std	Z+1, r25	; 0x01
     936:	80 83       	st	Z, r24
	pid.title = "PID";
     938:	6f e6       	ldi	r22, 0x6F	; 111
     93a:	72 e0       	ldi	r23, 0x02	; 2
     93c:	89 ef       	ldi	r24, 0xF9	; 249
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	fb 01       	movw	r30, r22
     942:	91 83       	std	Z+1, r25	; 0x01
     944:	80 83       	st	Z, r24
	modeselect.title = "Mode";
     946:	4f e9       	ldi	r20, 0x9F	; 159
     948:	52 e0       	ldi	r21, 0x02	; 2
     94a:	8b e7       	ldi	r24, 0x7B	; 123
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	fa 01       	movw	r30, r20
     950:	91 83       	std	Z+1, r25	; 0x01
     952:	80 83       	st	Z, r24
	calibration.title = "Calibration";
     954:	27 ee       	ldi	r18, 0xE7	; 231
     956:	32 e0       	ldi	r19, 0x02	; 2
     958:	80 e8       	ldi	r24, 0x80	; 128
     95a:	91 e0       	ldi	r25, 0x01	; 1
     95c:	f9 01       	movw	r30, r18
     95e:	91 83       	std	Z+1, r25	; 0x01
     960:	80 83       	st	Z, r24
	currentMenu = mainmenu;
}

// add child to parent node
void addChild(struct MenuItem * child, struct MenuItem * parentName, int (* function)()){	
	child->parent = parentName; // assign parent to child
     962:	d0 93 ba 02 	sts	0x02BA, r29
     966:	c0 93 b9 02 	sts	0x02B9, r28
	parentName->children[parentName->numOfChildren] = child; // assign child to parent
     96a:	05 e1       	ldi	r16, 0x15	; 21
     96c:	13 e0       	ldi	r17, 0x03	; 3
     96e:	f8 01       	movw	r30, r16
     970:	80 81       	ld	r24, Z
     972:	91 81       	ldd	r25, Z+1	; 0x01
     974:	6c 01       	movw	r12, r24
     976:	cc 0c       	add	r12, r12
     978:	dd 1c       	adc	r13, r13
     97a:	f6 01       	movw	r30, r12
     97c:	ed 5f       	subi	r30, 0xFD	; 253
     97e:	fc 4f       	sbci	r31, 0xFC	; 252
     980:	f1 82       	std	Z+1, r15	; 0x01
     982:	e0 82       	st	Z, r14
	parentName->numOfChildren++; // add to number of children
	child->fp = function;
     984:	0f 2e       	mov	r0, r31
     986:	f1 ee       	ldi	r31, 0xE1	; 225
     988:	ef 2e       	mov	r14, r31
     98a:	f5 e0       	ldi	r31, 0x05	; 5
     98c:	ff 2e       	mov	r15, r31
     98e:	f0 2d       	mov	r31, r0
     990:	f0 92 cc 02 	sts	0x02CC, r15
     994:	e0 92 cb 02 	sts	0x02CB, r14
	currentMenu = mainmenu;
}

// add child to parent node
void addChild(struct MenuItem * child, struct MenuItem * parentName, int (* function)()){	
	child->parent = parentName; // assign parent to child
     998:	d0 93 8a 02 	sts	0x028A, r29
     99c:	c0 93 89 02 	sts	0x0289, r28
	parentName->children[parentName->numOfChildren] = child; // assign child to parent
     9a0:	7c 01       	movw	r14, r24
     9a2:	f3 e0       	ldi	r31, 0x03	; 3
     9a4:	ef 0e       	add	r14, r31
     9a6:	f1 1c       	adc	r15, r1
     9a8:	67 01       	movw	r12, r14
     9aa:	cc 0c       	add	r12, r12
     9ac:	dd 1c       	adc	r13, r13
     9ae:	f6 01       	movw	r30, r12
     9b0:	e1 50       	subi	r30, 0x01	; 1
     9b2:	fd 4f       	sbci	r31, 0xFD	; 253
     9b4:	b1 83       	std	Z+1, r27	; 0x01
     9b6:	a0 83       	st	Z, r26
	parentName->numOfChildren++; // add to number of children
	child->fp = function;
     9b8:	10 92 9c 02 	sts	0x029C, r1
     9bc:	10 92 9b 02 	sts	0x029B, r1
	currentMenu = mainmenu;
}

// add child to parent node
void addChild(struct MenuItem * child, struct MenuItem * parentName, int (* function)()){	
	child->parent = parentName; // assign parent to child
     9c0:	d0 93 1a 03 	sts	0x031A, r29
     9c4:	c0 93 19 03 	sts	0x0319, r28
	parentName->children[parentName->numOfChildren] = child; // assign child to parent
     9c8:	ec 01       	movw	r28, r24
     9ca:	cc 0f       	add	r28, r28
     9cc:	dd 1f       	adc	r29, r29
     9ce:	c9 5f       	subi	r28, 0xF9	; 249
     9d0:	dc 4f       	sbci	r29, 0xFC	; 252
     9d2:	99 82       	std	Y+1, r9	; 0x01
     9d4:	88 82       	st	Y, r8
	parentName->numOfChildren++; // add to number of children
     9d6:	f8 01       	movw	r30, r16
     9d8:	f1 82       	std	Z+1, r15	; 0x01
     9da:	e0 82       	st	Z, r14
	child->fp = function;
     9dc:	10 92 2c 03 	sts	0x032C, r1
     9e0:	10 92 2b 03 	sts	0x032B, r1
	currentMenu = mainmenu;
}

// add child to parent node
void addChild(struct MenuItem * child, struct MenuItem * parentName, int (* function)()){	
	child->parent = parentName; // assign parent to child
     9e4:	b0 93 72 02 	sts	0x0272, r27
     9e8:	a0 93 71 02 	sts	0x0271, r26
	parentName->children[parentName->numOfChildren] = child; // assign child to parent
     9ec:	cd e9       	ldi	r28, 0x9D	; 157
     9ee:	d2 e0       	ldi	r29, 0x02	; 2
     9f0:	08 81       	ld	r16, Y
     9f2:	19 81       	ldd	r17, Y+1	; 0x01
     9f4:	c8 01       	movw	r24, r16
     9f6:	02 96       	adiw	r24, 0x02	; 2
     9f8:	7c 01       	movw	r14, r24
     9fa:	ee 0c       	add	r14, r14
     9fc:	ff 1c       	adc	r15, r15
     9fe:	f7 01       	movw	r30, r14
     a00:	e9 57       	subi	r30, 0x79	; 121
     a02:	fd 4f       	sbci	r31, 0xFD	; 253
     a04:	71 83       	std	Z+1, r23	; 0x01
     a06:	60 83       	st	Z, r22
	parentName->numOfChildren++; // add to number of children
	child->fp = function;
     a08:	62 e2       	ldi	r22, 0x22	; 34
     a0a:	77 e0       	ldi	r23, 0x07	; 7
     a0c:	70 93 84 02 	sts	0x0284, r23
     a10:	60 93 83 02 	sts	0x0283, r22
	currentMenu = mainmenu;
}

// add child to parent node
void addChild(struct MenuItem * child, struct MenuItem * parentName, int (* function)()){	
	child->parent = parentName; // assign parent to child
     a14:	b0 93 a2 02 	sts	0x02A2, r27
     a18:	a0 93 a1 02 	sts	0x02A1, r26
	parentName->children[parentName->numOfChildren] = child; // assign child to parent
     a1c:	d8 01       	movw	r26, r16
     a1e:	aa 0f       	add	r26, r26
     a20:	bb 1f       	adc	r27, r27
     a22:	a3 57       	subi	r26, 0x73	; 115
     a24:	bd 4f       	sbci	r27, 0xFD	; 253
     a26:	4d 93       	st	X+, r20
     a28:	5c 93       	st	X, r21
	parentName->numOfChildren++; // add to number of children
     a2a:	99 83       	std	Y+1, r25	; 0x01
     a2c:	88 83       	st	Y, r24
	child->fp = function;
     a2e:	8c e2       	ldi	r24, 0x2C	; 44
     a30:	98 e0       	ldi	r25, 0x08	; 8
     a32:	90 93 b4 02 	sts	0x02B4, r25
     a36:	80 93 b3 02 	sts	0x02B3, r24
	currentMenu = mainmenu;
}

// add child to parent node
void addChild(struct MenuItem * child, struct MenuItem * parentName, int (* function)()){	
	child->parent = parentName; // assign parent to child
     a3a:	90 92 ea 02 	sts	0x02EA, r9
     a3e:	80 92 e9 02 	sts	0x02E9, r8
	parentName->children[parentName->numOfChildren] = child; // assign child to parent
     a42:	ad e2       	ldi	r26, 0x2D	; 45
     a44:	b3 e0       	ldi	r27, 0x03	; 3
     a46:	4d 91       	ld	r20, X+
     a48:	5c 91       	ld	r21, X
     a4a:	11 97       	sbiw	r26, 0x01	; 1
     a4c:	ca 01       	movw	r24, r20
     a4e:	02 96       	adiw	r24, 0x02	; 2
     a50:	ec 01       	movw	r28, r24
     a52:	cc 0f       	add	r28, r28
     a54:	dd 1f       	adc	r29, r29
     a56:	c9 5e       	subi	r28, 0xE9	; 233
     a58:	dc 4f       	sbci	r29, 0xFC	; 252
     a5a:	39 83       	std	Y+1, r19	; 0x01
     a5c:	28 83       	st	Y, r18
	parentName->numOfChildren++; // add to number of children
	child->fp = function;
     a5e:	25 e0       	ldi	r18, 0x05	; 5
     a60:	34 e0       	ldi	r19, 0x04	; 4
     a62:	30 93 fc 02 	sts	0x02FC, r19
     a66:	20 93 fb 02 	sts	0x02FB, r18
	currentMenu = mainmenu;
}

// add child to parent node
void addChild(struct MenuItem * child, struct MenuItem * parentName, int (* function)()){	
	child->parent = parentName; // assign parent to child
     a6a:	90 92 32 03 	sts	0x0332, r9
     a6e:	80 92 31 03 	sts	0x0331, r8
	parentName->children[parentName->numOfChildren] = child; // assign child to parent
     a72:	fa 01       	movw	r30, r20
     a74:	ee 0f       	add	r30, r30
     a76:	ff 1f       	adc	r31, r31
     a78:	e3 5e       	subi	r30, 0xE3	; 227
     a7a:	fc 4f       	sbci	r31, 0xFC	; 252
     a7c:	b1 82       	std	Z+1, r11	; 0x01
     a7e:	a0 82       	st	Z, r10
	parentName->numOfChildren++; // add to number of children
     a80:	8d 93       	st	X+, r24
     a82:	9c 93       	st	X, r25
	child->fp = function;
     a84:	8e ed       	ldi	r24, 0xDE	; 222
     a86:	97 e0       	ldi	r25, 0x07	; 7
     a88:	90 93 44 03 	sts	0x0344, r25
     a8c:	80 93 43 03 	sts	0x0343, r24
	
	/*getChildren(&mainmenu);
	newgame.fp(); // run function from menu item node
	getParent(&newgame); // print parent node
	*/
	printMenuToScreen(&mainmenu);	
     a90:	8f ef       	ldi	r24, 0xFF	; 255
     a92:	92 e0       	ldi	r25, 0x02	; 2
     a94:	0e 94 06 04 	call	0x80c	; 0x80c <printMenuToScreen>
	//printMenuToScreen(&settings);
	
	currentMenu = mainmenu;
     a98:	88 e1       	ldi	r24, 0x18	; 24
     a9a:	ef ef       	ldi	r30, 0xFF	; 255
     a9c:	f2 e0       	ldi	r31, 0x02	; 2
     a9e:	af ec       	ldi	r26, 0xCF	; 207
     aa0:	b2 e0       	ldi	r27, 0x02	; 2
     aa2:	01 90       	ld	r0, Z+
     aa4:	0d 92       	st	X+, r0
     aa6:	8a 95       	dec	r24
     aa8:	e1 f7       	brne	.-8      	; 0xaa2 <menuInit+0x202>
}
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	ff 90       	pop	r15
     ab4:	ef 90       	pop	r14
     ab6:	df 90       	pop	r13
     ab8:	cf 90       	pop	r12
     aba:	bf 90       	pop	r11
     abc:	af 90       	pop	r10
     abe:	9f 90       	pop	r9
     ac0:	8f 90       	pop	r8
     ac2:	08 95       	ret

00000ac4 <printCursor>:
		printf("No parents...\n");
		return 0;
	}
}

void printCursor(int currentPos, int offset){
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
     ac8:	cf 93       	push	r28
     aca:	df 93       	push	r29
     acc:	8c 01       	movw	r16, r24
     ace:	eb 01       	movw	r28, r22
	OLED_ClearCol();
     ad0:	0e 94 18 0a 	call	0x1430	; 0x1430 <OLED_ClearCol>
	OLED_Pos(currentPos + offset, 1);
     ad4:	61 e0       	ldi	r22, 0x01	; 1
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	c8 01       	movw	r24, r16
     ada:	8c 0f       	add	r24, r28
     adc:	9d 1f       	adc	r25, r29
     ade:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
	OLED_Print(" >");
     ae2:	8d e4       	ldi	r24, 0x4D	; 77
     ae4:	91 e0       	ldi	r25, 0x01	; 1
     ae6:	0e 94 ad 09 	call	0x135a	; 0x135a <OLED_Print>
}
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	08 95       	ret

00000af4 <setMenu>:
		printf("%d: %s\n", i, nodeName->children[i]->title);
	}
	printf("\n");
}
				
void setMenu(struct MenuItem * currentMenu, int joystick, int button, int *menuItem){
     af4:	0f 93       	push	r16
     af6:	1f 93       	push	r17
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	ec 01       	movw	r28, r24
     afe:	89 01       	movw	r16, r18
	
	int maxItems = currentMenu->numOfChildren;//-1; // Set number of current menu items
     b00:	2e 89       	ldd	r18, Y+22	; 0x16
     b02:	3f 89       	ldd	r19, Y+23	; 0x17
	menuIt = *menuItem;
     b04:	f8 01       	movw	r30, r16
     b06:	80 81       	ld	r24, Z
     b08:	91 81       	ldd	r25, Z+1	; 0x01
     b0a:	90 93 60 03 	sts	0x0360, r25
     b0e:	80 93 5f 03 	sts	0x035F, r24
	
	if(button){ // On button pressed
     b12:	45 2b       	or	r20, r21
     b14:	09 f4       	brne	.+2      	; 0xb18 <setMenu+0x24>
     b16:	50 c0       	rjmp	.+160    	; 0xbb8 <setMenu+0xc4>
     b18:	ff ef       	ldi	r31, 0xFF	; 255
     b1a:	4f ef       	ldi	r20, 0xFF	; 255
     b1c:	82 e0       	ldi	r24, 0x02	; 2
     b1e:	f1 50       	subi	r31, 0x01	; 1
     b20:	40 40       	sbci	r20, 0x00	; 0
     b22:	80 40       	sbci	r24, 0x00	; 0
     b24:	e1 f7       	brne	.-8      	; 0xb1e <setMenu+0x2a>
     b26:	00 c0       	rjmp	.+0      	; 0xb28 <setMenu+0x34>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <setMenu+0x36>
		_delay_ms(200); // delay after keystroke
		
		if (*menuItem == maxItems && maxItems >0){
     b2a:	f8 01       	movw	r30, r16
     b2c:	80 81       	ld	r24, Z
     b2e:	91 81       	ldd	r25, Z+1	; 0x01
     b30:	82 17       	cp	r24, r18
     b32:	93 07       	cpc	r25, r19
     b34:	d1 f4       	brne	.+52     	; 0xb6a <setMenu+0x76>
     b36:	18 16       	cp	r1, r24
     b38:	19 06       	cpc	r1, r25
     b3a:	bc f4       	brge	.+46     	; 0xb6a <setMenu+0x76>
			*currentMenu = *currentMenu->parent; // set parent menu as current menu
     b3c:	ea 81       	ldd	r30, Y+2	; 0x02
     b3e:	fb 81       	ldd	r31, Y+3	; 0x03
     b40:	88 e1       	ldi	r24, 0x18	; 24
     b42:	de 01       	movw	r26, r28
     b44:	01 90       	ld	r0, Z+
     b46:	0d 92       	st	X+, r0
     b48:	8a 95       	dec	r24
     b4a:	e1 f7       	brne	.-8      	; 0xb44 <setMenu+0x50>
			OLED_ClearScreen(); // clear oled screen
     b4c:	0e 94 35 0a 	call	0x146a	; 0x146a <OLED_ClearScreen>
			printMenuToScreen(currentMenu); // Show menu on screen
     b50:	ce 01       	movw	r24, r28
     b52:	0e 94 06 04 	call	0x80c	; 0x80c <printMenuToScreen>
			*menuItem = 0;
     b56:	f8 01       	movw	r30, r16
     b58:	11 82       	std	Z+1, r1	; 0x01
     b5a:	10 82       	st	Z, r1
			printCursor(*menuItem, 2);
     b5c:	62 e0       	ldi	r22, 0x02	; 2
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	80 e0       	ldi	r24, 0x00	; 0
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 62 05 	call	0xac4	; 0xac4 <printCursor>
	menuIt = *menuItem;
	
	if(button){ // On button pressed
		_delay_ms(200); // delay after keystroke
		
		if (*menuItem == maxItems && maxItems >0){
     b68:	27 c0       	rjmp	.+78     	; 0xbb8 <setMenu+0xc4>
			OLED_ClearScreen(); // clear oled screen
			printMenuToScreen(currentMenu); // Show menu on screen
			*menuItem = 0;
			printCursor(*menuItem, 2);
		}
		else if(currentMenu->children[*menuItem]->children[0] != NULL){ // if item has child
     b6a:	02 96       	adiw	r24, 0x02	; 2
     b6c:	fc 01       	movw	r30, r24
     b6e:	ee 0f       	add	r30, r30
     b70:	ff 1f       	adc	r31, r31
     b72:	ec 0f       	add	r30, r28
     b74:	fd 1f       	adc	r31, r29
     b76:	01 90       	ld	r0, Z+
     b78:	f0 81       	ld	r31, Z
     b7a:	e0 2d       	mov	r30, r0
     b7c:	84 81       	ldd	r24, Z+4	; 0x04
     b7e:	95 81       	ldd	r25, Z+5	; 0x05
     b80:	89 2b       	or	r24, r25
     b82:	b1 f0       	breq	.+44     	; 0xbb0 <setMenu+0xbc>
			*currentMenu = *currentMenu->children[*menuItem]; // set child menu as current menu
     b84:	88 e1       	ldi	r24, 0x18	; 24
     b86:	de 01       	movw	r26, r28
     b88:	01 90       	ld	r0, Z+
     b8a:	0d 92       	st	X+, r0
     b8c:	8a 95       	dec	r24
     b8e:	e1 f7       	brne	.-8      	; 0xb88 <setMenu+0x94>
			*menuItem = 0;
     b90:	f8 01       	movw	r30, r16
     b92:	11 82       	std	Z+1, r1	; 0x01
     b94:	10 82       	st	Z, r1
			OLED_ClearScreen(); // clear oled screen
     b96:	0e 94 35 0a 	call	0x146a	; 0x146a <OLED_ClearScreen>
			printMenuToScreen(currentMenu); // Show menu on screen
     b9a:	ce 01       	movw	r24, r28
     b9c:	0e 94 06 04 	call	0x80c	; 0x80c <printMenuToScreen>
			printCursor(*menuItem, 2);
     ba0:	62 e0       	ldi	r22, 0x02	; 2
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	f8 01       	movw	r30, r16
     ba6:	80 81       	ld	r24, Z
     ba8:	91 81       	ldd	r25, Z+1	; 0x01
     baa:	0e 94 62 05 	call	0xac4	; 0xac4 <printCursor>
     bae:	04 c0       	rjmp	.+8      	; 0xbb8 <setMenu+0xc4>
		}
		else if(currentMenu->children[*menuItem]->fp() != NULL){ // else if child has function				
     bb0:	04 88       	ldd	r0, Z+20	; 0x14
     bb2:	f5 89       	ldd	r31, Z+21	; 0x15
     bb4:	e0 2d       	mov	r30, r0
     bb6:	09 95       	icall
			////printf("Running function in %s\n", currentMenu->title);
			////currentMenu->children[menuItem]->fp(); // run function
		}
	//_delay_ms(500); // delay after keystroke
	}
}
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	08 95       	ret

00000bc2 <newGame>:
	OLED_ClearCol();
	OLED_Pos(currentPos + offset, 1);
	OLED_Print(" >");
}

void newGame(){
     bc2:	6f 92       	push	r6
     bc4:	7f 92       	push	r7
     bc6:	8f 92       	push	r8
     bc8:	9f 92       	push	r9
     bca:	af 92       	push	r10
     bcc:	bf 92       	push	r11
     bce:	cf 92       	push	r12
     bd0:	df 92       	push	r13
     bd2:	ef 92       	push	r14
     bd4:	ff 92       	push	r15
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	c4 58       	subi	r28, 0x84	; 132
     be4:	d1 09       	sbc	r29, r1
     be6:	0f b6       	in	r0, 0x3f	; 63
     be8:	f8 94       	cli
     bea:	de bf       	out	0x3e, r29	; 62
     bec:	0f be       	out	0x3f, r0	; 63
     bee:	cd bf       	out	0x3d, r28	; 61
	//printf("New game\n");
	OLED_ClearScreen();
     bf0:	0e 94 35 0a 	call	0x146a	; 0x146a <OLED_ClearScreen>
	
	OLED_Pos(1,2);
     bf4:	62 e0       	ldi	r22, 0x02	; 2
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
	OLED_Print("Game started!");
     c00:	8f ea       	ldi	r24, 0xAF	; 175
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	0e 94 ad 09 	call	0x135a	; 0x135a <OLED_Print>
	
	int maxMinValues[8] = {0,255,0,255,0,255,0,255}; // input ranges - max/min	
     c08:	80 e1       	ldi	r24, 0x10	; 16
     c0a:	ed e1       	ldi	r30, 0x1D	; 29
     c0c:	f1 e0       	ldi	r31, 0x01	; 1
     c0e:	de 01       	movw	r26, r28
     c10:	11 96       	adiw	r26, 0x01	; 1
     c12:	01 90       	ld	r0, Z+
     c14:	0d 92       	st	X+, r0
     c16:	8a 95       	dec	r24
     c18:	e1 f7       	brne	.-8      	; 0xc12 <newGame+0x50>
	uint8_t sliderValueA;
	uint8_t leftButtonPressed;
	uint8_t rightButtonPressed;
	uint8_t gameOn;
	
	uint8_t score = 9;
     c1a:	0f 2e       	mov	r0, r31
     c1c:	f9 e0       	ldi	r31, 0x09	; 9
     c1e:	9f 2e       	mov	r9, r31
     c20:	f0 2d       	mov	r31, r0
		char joyX[33], joyY[33], buffer[10], buffer2[10], scorebuffer[10];
		itoa(joystickValueX,joyX,10);
		itoa(joystickValueY,joyY,10);
		itoa(score,scorebuffer,10);
		
		strcpy(buffer, "X: ");
     c22:	5e 01       	movw	r10, r28
     c24:	2b e7       	ldi	r18, 0x7B	; 123
     c26:	a2 0e       	add	r10, r18
     c28:	b1 1c       	adc	r11, r1
     c2a:	0f 2e       	mov	r0, r31
     c2c:	f8 e5       	ldi	r31, 0x58	; 88
     c2e:	cf 2e       	mov	r12, r31
     c30:	fa e3       	ldi	r31, 0x3A	; 58
     c32:	df 2e       	mov	r13, r31
     c34:	f0 e2       	ldi	r31, 0x20	; 32
     c36:	ef 2e       	mov	r14, r31
     c38:	f1 2c       	mov	r15, r1
     c3a:	f0 2d       	mov	r31, r0
	
	CAN_message message, receivedMessage;
	
	while(1){
		
		joystickValueX = getControlOutput(1,100,5, &maxMinValues[0], &maxMinValues[1]);
     c3c:	8e 01       	movw	r16, r28
     c3e:	0d 5f       	subi	r16, 0xFD	; 253
     c40:	1f 4f       	sbci	r17, 0xFF	; 255
     c42:	9e 01       	movw	r18, r28
     c44:	2f 5f       	subi	r18, 0xFF	; 255
     c46:	3f 4f       	sbci	r19, 0xFF	; 255
     c48:	45 e0       	ldi	r20, 0x05	; 5
     c4a:	50 e0       	ldi	r21, 0x00	; 0
     c4c:	64 e6       	ldi	r22, 0x64	; 100
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 0c 03 	call	0x618	; 0x618 <getControlOutput>
     c58:	78 2e       	mov	r7, r24
		joystickValueY = getControlOutput(2,100,5, &maxMinValues[2], &maxMinValues[3]);
     c5a:	0c 5f       	subi	r16, 0xFC	; 252
     c5c:	1f 4f       	sbci	r17, 0xFF	; 255
     c5e:	9e 01       	movw	r18, r28
     c60:	2b 5f       	subi	r18, 0xFB	; 251
     c62:	3f 4f       	sbci	r19, 0xFF	; 255
     c64:	45 e0       	ldi	r20, 0x05	; 5
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	64 e6       	ldi	r22, 0x64	; 100
     c6a:	70 e0       	ldi	r23, 0x00	; 0
     c6c:	82 e0       	ldi	r24, 0x02	; 2
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	0e 94 0c 03 	call	0x618	; 0x618 <getControlOutput>
     c74:	88 2e       	mov	r8, r24
		sliderValueA = getControlOutput(3,100,5, &maxMinValues[4], &maxMinValues[5]);
     c76:	0c 5f       	subi	r16, 0xFC	; 252
     c78:	1f 4f       	sbci	r17, 0xFF	; 255
     c7a:	9e 01       	movw	r18, r28
     c7c:	27 5f       	subi	r18, 0xF7	; 247
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
     c80:	45 e0       	ldi	r20, 0x05	; 5
     c82:	50 e0       	ldi	r21, 0x00	; 0
     c84:	64 e6       	ldi	r22, 0x64	; 100
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	83 e0       	ldi	r24, 0x03	; 3
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	0e 94 0c 03 	call	0x618	; 0x618 <getControlOutput>
     c90:	08 2f       	mov	r16, r24
		leftButtonPressed = 0x01 & PINB;	
     c92:	66 b2       	in	r6, 0x16	; 22
		rightButtonPressed = 0x02 & PINB;
     c94:	16 b3       	in	r17, 0x16	; 22
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     c96:	4a e0       	ldi	r20, 0x0A	; 10
     c98:	be 01       	movw	r22, r28
     c9a:	6a 5b       	subi	r22, 0xBA	; 186
     c9c:	7f 4f       	sbci	r23, 0xFF	; 255
     c9e:	87 2d       	mov	r24, r7
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__itoa_ncheck>
     ca6:	4a e0       	ldi	r20, 0x0A	; 10
     ca8:	be 01       	movw	r22, r28
     caa:	6b 5d       	subi	r22, 0xDB	; 219
     cac:	7f 4f       	sbci	r23, 0xFF	; 255
     cae:	88 2d       	mov	r24, r8
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__itoa_ncheck>
     cb6:	4a e0       	ldi	r20, 0x0A	; 10
     cb8:	be 01       	movw	r22, r28
     cba:	69 59       	subi	r22, 0x99	; 153
     cbc:	7f 4f       	sbci	r23, 0xFF	; 255
     cbe:	89 2d       	mov	r24, r9
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__itoa_ncheck>
		char joyX[33], joyY[33], buffer[10], buffer2[10], scorebuffer[10];
		itoa(joystickValueX,joyX,10);
		itoa(joystickValueY,joyY,10);
		itoa(score,scorebuffer,10);
		
		strcpy(buffer, "X: ");
     cc6:	f5 01       	movw	r30, r10
     cc8:	c0 82       	st	Z, r12
     cca:	d1 82       	std	Z+1, r13	; 0x01
     ccc:	e2 82       	std	Z+2, r14	; 0x02
     cce:	f3 82       	std	Z+3, r15	; 0x03
		strcat(buffer, joyX);
     cd0:	be 01       	movw	r22, r28
     cd2:	6a 5b       	subi	r22, 0xBA	; 186
     cd4:	7f 4f       	sbci	r23, 0xFF	; 255
     cd6:	c5 01       	movw	r24, r10
     cd8:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <strcat>
		strcat(buffer, " Y: ");
     cdc:	d5 01       	movw	r26, r10
     cde:	0d 90       	ld	r0, X+
     ce0:	00 20       	and	r0, r0
     ce2:	e9 f7       	brne	.-6      	; 0xcde <newGame+0x11c>
     ce4:	11 97       	sbiw	r26, 0x01	; 1
     ce6:	85 e0       	ldi	r24, 0x05	; 5
     ce8:	ed eb       	ldi	r30, 0xBD	; 189
     cea:	f1 e0       	ldi	r31, 0x01	; 1
     cec:	01 90       	ld	r0, Z+
     cee:	0d 92       	st	X+, r0
     cf0:	8a 95       	dec	r24
     cf2:	e1 f7       	brne	.-8      	; 0xcec <newGame+0x12a>
		strcat(buffer, joyY);
     cf4:	be 01       	movw	r22, r28
     cf6:	6b 5d       	subi	r22, 0xDB	; 219
     cf8:	7f 4f       	sbci	r23, 0xFF	; 255
     cfa:	c5 01       	movw	r24, r10
     cfc:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <strcat>
		strcpy(buffer2, "Lives: ");
     d00:	88 e0       	ldi	r24, 0x08	; 8
     d02:	e2 ec       	ldi	r30, 0xC2	; 194
     d04:	f1 e0       	ldi	r31, 0x01	; 1
     d06:	de 01       	movw	r26, r28
     d08:	af 58       	subi	r26, 0x8F	; 143
     d0a:	bf 4f       	sbci	r27, 0xFF	; 255
     d0c:	01 90       	ld	r0, Z+
     d0e:	0d 92       	st	X+, r0
     d10:	8a 95       	dec	r24
     d12:	e1 f7       	brne	.-8      	; 0xd0c <newGame+0x14a>
		strcat(buffer2, scorebuffer);		
     d14:	be 01       	movw	r22, r28
     d16:	69 59       	subi	r22, 0x99	; 153
     d18:	7f 4f       	sbci	r23, 0xFF	; 255
     d1a:	ce 01       	movw	r24, r28
     d1c:	8f 58       	subi	r24, 0x8F	; 143
     d1e:	9f 4f       	sbci	r25, 0xFF	; 255
     d20:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <strcat>
				
		OLED_Pos(3,3);
     d24:	63 e0       	ldi	r22, 0x03	; 3
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	83 e0       	ldi	r24, 0x03	; 3
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
		OLED_Print(buffer2);
     d30:	ce 01       	movw	r24, r28
     d32:	8f 58       	subi	r24, 0x8F	; 143
     d34:	9f 4f       	sbci	r25, 0xFF	; 255
     d36:	0e 94 ad 09 	call	0x135a	; 0x135a <OLED_Print>
		
		message.id = 3;
     d3a:	83 e0       	ldi	r24, 0x03	; 3
     d3c:	89 8b       	std	Y+17, r24	; 0x11
		message.length = 7;
     d3e:	87 e0       	ldi	r24, 0x07	; 7
     d40:	8a 8b       	std	Y+18, r24	; 0x12
	
	CAN_message message, receivedMessage;
	
	while(1){
		
		joystickValueX = getControlOutput(1,100,5, &maxMinValues[0], &maxMinValues[1]);
     d42:	7b 8a       	std	Y+19, r7	; 0x13
		joystickValueY = getControlOutput(2,100,5, &maxMinValues[2], &maxMinValues[3]);
     d44:	8c 8a       	std	Y+20, r8	; 0x14
		sliderValueA = getControlOutput(3,100,5, &maxMinValues[4], &maxMinValues[5]);
		leftButtonPressed = 0x01 & PINB;	
     d46:	86 2d       	mov	r24, r6
     d48:	81 70       	andi	r24, 0x01	; 1
		message.id = 3;
		message.length = 7;
		
		message.data[0] = joystickValueX;
		message.data[1] = joystickValueY;
		message.data[2] = leftButtonPressed;
     d4a:	8d 8b       	std	Y+21, r24	; 0x15
	
	while(1){
		
		joystickValueX = getControlOutput(1,100,5, &maxMinValues[0], &maxMinValues[1]);
		joystickValueY = getControlOutput(2,100,5, &maxMinValues[2], &maxMinValues[3]);
		sliderValueA = getControlOutput(3,100,5, &maxMinValues[4], &maxMinValues[5]);
     d4c:	0e 8b       	std	Y+22, r16	; 0x16
		
		message.data[0] = joystickValueX;
		message.data[1] = joystickValueY;
		message.data[2] = leftButtonPressed;
		message.data[3] = sliderValueA;
		message.data[4] = kp;
     d4e:	80 91 08 01 	lds	r24, 0x0108
     d52:	8f 8b       	std	Y+23, r24	; 0x17
		message.data[5] = mode;
     d54:	80 91 6a 02 	lds	r24, 0x026A
     d58:	88 8f       	std	Y+24, r24	; 0x18
		message.data[6] = gameOn;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	89 8f       	std	Y+25, r24	; 0x19
		
		CAN_sendMessage(&message);
     d5e:	ce 01       	movw	r24, r28
     d60:	41 96       	adiw	r24, 0x11	; 17
     d62:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <CAN_sendMessage>
     d66:	8f ef       	ldi	r24, 0xFF	; 255
     d68:	9f e2       	ldi	r25, 0x2F	; 47
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	f1 f7       	brne	.-4      	; 0xd6a <newGame+0x1a8>
     d6e:	00 c0       	rjmp	.+0      	; 0xd70 <newGame+0x1ae>
     d70:	00 00       	nop
		
		_delay_ms(10);
		
		CAN_recieve(&receivedMessage);
     d72:	ce 01       	movw	r24, r28
     d74:	4b 96       	adiw	r24, 0x1b	; 27
     d76:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <CAN_recieve>
		score = receivedMessage.data[0]-1;
     d7a:	9d 8c       	ldd	r9, Y+29	; 0x1d
     d7c:	9a 94       	dec	r9
		
		//End routine
		if(rightButtonPressed){			
     d7e:	11 ff       	sbrs	r17, 1
     d80:	06 c0       	rjmp	.+12     	; 0xd8e <newGame+0x1cc>
			gameOn = 0;
			message.data[6] = gameOn;
     d82:	19 8e       	std	Y+25, r1	; 0x19
			CAN_sendMessage(&message);
     d84:	ce 01       	movw	r24, r28
     d86:	41 96       	adiw	r24, 0x11	; 17
     d88:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <CAN_sendMessage>
			
			break;
     d8c:	2e c0       	rjmp	.+92     	; 0xdea <newGame+0x228>
		}
		else if (score <= 0){
     d8e:	91 10       	cpse	r9, r1
     d90:	55 cf       	rjmp	.-342    	; 0xc3c <newGame+0x7a>
			score = 0;
			OLED_ClearScreen();
     d92:	0e 94 35 0a 	call	0x146a	; 0x146a <OLED_ClearScreen>
			OLED_Pos(0,0);
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
			OLED_Print("Game over!");
     da2:	8a ec       	ldi	r24, 0xCA	; 202
     da4:	91 e0       	ldi	r25, 0x01	; 1
     da6:	0e 94 ad 09 	call	0x135a	; 0x135a <OLED_Print>
			OLED_Pos(2,0);
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	70 e0       	ldi	r23, 0x00	; 0
     dae:	82 e0       	ldi	r24, 0x02	; 2
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
			OLED_Print("Press any button");
     db6:	85 ed       	ldi	r24, 0xD5	; 213
     db8:	91 e0       	ldi	r25, 0x01	; 1
     dba:	0e 94 ad 09 	call	0x135a	; 0x135a <OLED_Print>
			OLED_Pos(3,0);
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	70 e0       	ldi	r23, 0x00	; 0
     dc2:	83 e0       	ldi	r24, 0x03	; 3
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
			OLED_Print("to continue");			
     dca:	86 ee       	ldi	r24, 0xE6	; 230
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	0e 94 ad 09 	call	0x135a	; 0x135a <OLED_Print>
			
			gameOn = 0;
			message.data[6] = gameOn;
     dd2:	19 8e       	std	Y+25, r1	; 0x19
			CAN_sendMessage(&message);
     dd4:	ce 01       	movw	r24, r28
     dd6:	41 96       	adiw	r24, 0x11	; 17
     dd8:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <CAN_sendMessage>
			
			while (1)
			{					
				leftButtonPressed = 0x01 & PINB;
     ddc:	86 b3       	in	r24, 0x16	; 22
				rightButtonPressed = 0x02 & PINB;
     dde:	96 b3       	in	r25, 0x16	; 22
     de0:	92 70       	andi	r25, 0x02	; 2
				if(leftButtonPressed || rightButtonPressed)
     de2:	80 fd       	sbrc	r24, 0
     de4:	02 c0       	rjmp	.+4      	; 0xdea <newGame+0x228>
     de6:	99 23       	and	r25, r25
     de8:	c9 f3       	breq	.-14     	; 0xddc <newGame+0x21a>
     dea:	9f ef       	ldi	r25, 0xFF	; 255
     dec:	ef ef       	ldi	r30, 0xFF	; 255
     dee:	f2 e0       	ldi	r31, 0x02	; 2
     df0:	91 50       	subi	r25, 0x01	; 1
     df2:	e0 40       	sbci	r30, 0x00	; 0
     df4:	f0 40       	sbci	r31, 0x00	; 0
     df6:	e1 f7       	brne	.-8      	; 0xdf0 <newGame+0x22e>
     df8:	00 c0       	rjmp	.+0      	; 0xdfa <newGame+0x238>
     dfa:	00 c0       	rjmp	.+0      	; 0xdfc <newGame+0x23a>
	}
	
	
	_delay_ms(200);
	//currentMenu = currentMenu->parent;
	OLED_ClearScreen(); // clear oled screen
     dfc:	0e 94 35 0a 	call	0x146a	; 0x146a <OLED_ClearScreen>
	printMenuToScreen(&currentMenu); // Show menu on screen
     e00:	8f ec       	ldi	r24, 0xCF	; 207
     e02:	92 e0       	ldi	r25, 0x02	; 2
     e04:	0e 94 06 04 	call	0x80c	; 0x80c <printMenuToScreen>
	printCursor(menuIt, 2);
     e08:	62 e0       	ldi	r22, 0x02	; 2
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	80 91 5f 03 	lds	r24, 0x035F
     e10:	90 91 60 03 	lds	r25, 0x0360
     e14:	0e 94 62 05 	call	0xac4	; 0xac4 <printCursor>
	
}
     e18:	cc 57       	subi	r28, 0x7C	; 124
     e1a:	df 4f       	sbci	r29, 0xFF	; 255
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	f8 94       	cli
     e20:	de bf       	out	0x3e, r29	; 62
     e22:	0f be       	out	0x3f, r0	; 63
     e24:	cd bf       	out	0x3d, r28	; 61
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	1f 91       	pop	r17
     e2c:	0f 91       	pop	r16
     e2e:	ff 90       	pop	r15
     e30:	ef 90       	pop	r14
     e32:	df 90       	pop	r13
     e34:	cf 90       	pop	r12
     e36:	bf 90       	pop	r11
     e38:	af 90       	pop	r10
     e3a:	9f 90       	pop	r9
     e3c:	8f 90       	pop	r8
     e3e:	7f 90       	pop	r7
     e40:	6f 90       	pop	r6
     e42:	08 95       	ret

00000e44 <pidSetting>:
void highScore(){
	//printf("highscore\n");
}

void pidSetting(){
     e44:	ff 92       	push	r15
     e46:	0f 93       	push	r16
     e48:	1f 93       	push	r17
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
     e52:	a4 97       	sbiw	r28, 0x24	; 36
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	f8 94       	cli
     e58:	de bf       	out	0x3e, r29	; 62
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	cd bf       	out	0x3d, r28	; 61
	
	int maxMinValues[8] = {0,255,0,255,0,255,0,255}; // input ranges - max/min
     e5e:	80 e1       	ldi	r24, 0x10	; 16
     e60:	ed e1       	ldi	r30, 0x1D	; 29
     e62:	f1 e0       	ldi	r31, 0x01	; 1
     e64:	de 01       	movw	r26, r28
     e66:	11 96       	adiw	r26, 0x01	; 1
     e68:	01 90       	ld	r0, Z+
     e6a:	0d 92       	st	X+, r0
     e6c:	8a 95       	dec	r24
     e6e:	e1 f7       	brne	.-8      	; 0xe68 <pidSetting+0x24>
	uint8_t joystickValueY;
	uint8_t leftButtonPressed;
	
	OLED_ClearScreen();
     e70:	0e 94 35 0a 	call	0x146a	; 0x146a <OLED_ClearScreen>
	
	OLED_Pos(0,0);
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	70 e0       	ldi	r23, 0x00	; 0
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
	OLED_Print("Adjust PID");	
     e80:	82 ef       	ldi	r24, 0xF2	; 242
     e82:	91 e0       	ldi	r25, 0x01	; 1
     e84:	0e 94 ad 09 	call	0x135a	; 0x135a <OLED_Print>
		if(kp < 0)
			kp = 0;
			
		itoa(kp,kpVal,10);
		
		strcpy(newbuffer, "Kp: 0.");
     e88:	0f 2e       	mov	r0, r31
     e8a:	f7 e0       	ldi	r31, 0x07	; 7
     e8c:	ff 2e       	mov	r15, r31
     e8e:	f0 2d       	mov	r31, r0
	
	char kpVal[10], newbuffer[10];

	while(1){
		//OLED_ClearScreen();
		OLED_Pos(2,2);
     e90:	62 e0       	ldi	r22, 0x02	; 2
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	82 e0       	ldi	r24, 0x02	; 2
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
		
		joystickValueY = getControlOutput(2,100,5, &maxMinValues[2], &maxMinValues[3]);		
     e9c:	8e 01       	movw	r16, r28
     e9e:	09 5f       	subi	r16, 0xF9	; 249
     ea0:	1f 4f       	sbci	r17, 0xFF	; 255
     ea2:	9e 01       	movw	r18, r28
     ea4:	2b 5f       	subi	r18, 0xFB	; 251
     ea6:	3f 4f       	sbci	r19, 0xFF	; 255
     ea8:	45 e0       	ldi	r20, 0x05	; 5
     eaa:	50 e0       	ldi	r21, 0x00	; 0
     eac:	64 e6       	ldi	r22, 0x64	; 100
     eae:	70 e0       	ldi	r23, 0x00	; 0
     eb0:	82 e0       	ldi	r24, 0x02	; 2
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 0c 03 	call	0x618	; 0x618 <getControlOutput>
		leftButtonPressed = 0x01 & PINB;
     eb8:	16 b3       	in	r17, 0x16	; 22
     eba:	11 70       	andi	r17, 0x01	; 1
		
		if(joystickValueY > 50){
     ebc:	83 33       	cpi	r24, 0x33	; 51
     ebe:	88 f0       	brcs	.+34     	; 0xee2 <pidSetting+0x9e>
			kp ++;
     ec0:	80 91 08 01 	lds	r24, 0x0108
     ec4:	8f 5f       	subi	r24, 0xFF	; 255
     ec6:	80 93 08 01 	sts	0x0108, r24
     eca:	2f ef       	ldi	r18, 0xFF	; 255
     ecc:	8f e7       	ldi	r24, 0x7F	; 127
     ece:	91 e0       	ldi	r25, 0x01	; 1
     ed0:	21 50       	subi	r18, 0x01	; 1
     ed2:	80 40       	sbci	r24, 0x00	; 0
     ed4:	90 40       	sbci	r25, 0x00	; 0
     ed6:	e1 f7       	brne	.-8      	; 0xed0 <pidSetting+0x8c>
     ed8:	00 c0       	rjmp	.+0      	; 0xeda <pidSetting+0x96>
     eda:	00 c0       	rjmp	.+0      	; 0xedc <pidSetting+0x98>
			_delay_ms(100);
			OLED_ClearScreen();
     edc:	0e 94 35 0a 	call	0x146a	; 0x146a <OLED_ClearScreen>
     ee0:	12 c0       	rjmp	.+36     	; 0xf06 <pidSetting+0xc2>
		}
		else if(joystickValueY < 50){
     ee2:	82 33       	cpi	r24, 0x32	; 50
     ee4:	80 f4       	brcc	.+32     	; 0xf06 <pidSetting+0xc2>
			kp --;
     ee6:	80 91 08 01 	lds	r24, 0x0108
     eea:	81 50       	subi	r24, 0x01	; 1
     eec:	80 93 08 01 	sts	0x0108, r24
     ef0:	2f ef       	ldi	r18, 0xFF	; 255
     ef2:	8f e7       	ldi	r24, 0x7F	; 127
     ef4:	91 e0       	ldi	r25, 0x01	; 1
     ef6:	21 50       	subi	r18, 0x01	; 1
     ef8:	80 40       	sbci	r24, 0x00	; 0
     efa:	90 40       	sbci	r25, 0x00	; 0
     efc:	e1 f7       	brne	.-8      	; 0xef6 <pidSetting+0xb2>
     efe:	00 c0       	rjmp	.+0      	; 0xf00 <pidSetting+0xbc>
     f00:	00 c0       	rjmp	.+0      	; 0xf02 <pidSetting+0xbe>
			_delay_ms(100);
			OLED_ClearScreen();
     f02:	0e 94 35 0a 	call	0x146a	; 0x146a <OLED_ClearScreen>
		}
		if(kp < 0)
     f06:	80 91 08 01 	lds	r24, 0x0108
     f0a:	88 23       	and	r24, r24
     f0c:	14 f4       	brge	.+4      	; 0xf12 <pidSetting+0xce>
			kp = 0;
     f0e:	10 92 08 01 	sts	0x0108, r1
			
		itoa(kp,kpVal,10);
     f12:	80 91 08 01 	lds	r24, 0x0108
     f16:	4a e0       	ldi	r20, 0x0A	; 10
     f18:	be 01       	movw	r22, r28
     f1a:	6f 5e       	subi	r22, 0xEF	; 239
     f1c:	7f 4f       	sbci	r23, 0xFF	; 255
     f1e:	99 27       	eor	r25, r25
     f20:	87 fd       	sbrc	r24, 7
     f22:	90 95       	com	r25
     f24:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__itoa_ncheck>
		
		strcpy(newbuffer, "Kp: 0.");
     f28:	ed ef       	ldi	r30, 0xFD	; 253
     f2a:	f1 e0       	ldi	r31, 0x01	; 1
     f2c:	de 01       	movw	r26, r28
     f2e:	5b 96       	adiw	r26, 0x1b	; 27
     f30:	8f 2d       	mov	r24, r15
     f32:	01 90       	ld	r0, Z+
     f34:	0d 92       	st	X+, r0
     f36:	8a 95       	dec	r24
     f38:	e1 f7       	brne	.-8      	; 0xf32 <pidSetting+0xee>
		strcat(newbuffer, kpVal);
     f3a:	be 01       	movw	r22, r28
     f3c:	6f 5e       	subi	r22, 0xEF	; 239
     f3e:	7f 4f       	sbci	r23, 0xFF	; 255
     f40:	ce 01       	movw	r24, r28
     f42:	4b 96       	adiw	r24, 0x1b	; 27
     f44:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <strcat>
		
		OLED_Pos(0,0);
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
		OLED_Print("Adjust PID");
     f54:	82 ef       	ldi	r24, 0xF2	; 242
     f56:	91 e0       	ldi	r25, 0x01	; 1
     f58:	0e 94 ad 09 	call	0x135a	; 0x135a <OLED_Print>
		OLED_Pos(2,2);
     f5c:	62 e0       	ldi	r22, 0x02	; 2
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	82 e0       	ldi	r24, 0x02	; 2
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
		OLED_Print(newbuffer);
     f68:	ce 01       	movw	r24, r28
     f6a:	4b 96       	adiw	r24, 0x1b	; 27
     f6c:	0e 94 ad 09 	call	0x135a	; 0x135a <OLED_Print>
		
		if(leftButtonPressed)
     f70:	11 23       	and	r17, r17
     f72:	09 f4       	brne	.+2      	; 0xf76 <pidSetting+0x132>
     f74:	8d cf       	rjmp	.-230    	; 0xe90 <pidSetting+0x4c>
     f76:	2f ef       	ldi	r18, 0xFF	; 255
     f78:	8f ef       	ldi	r24, 0xFF	; 255
     f7a:	92 e0       	ldi	r25, 0x02	; 2
     f7c:	21 50       	subi	r18, 0x01	; 1
     f7e:	80 40       	sbci	r24, 0x00	; 0
     f80:	90 40       	sbci	r25, 0x00	; 0
     f82:	e1 f7       	brne	.-8      	; 0xf7c <pidSetting+0x138>
     f84:	00 c0       	rjmp	.+0      	; 0xf86 <pidSetting+0x142>
     f86:	00 c0       	rjmp	.+0      	; 0xf88 <pidSetting+0x144>
			break;
	}
	
	_delay_ms(200);
	//currentMenu = currentMenu->parent;
	OLED_ClearScreen(); // clear oled screen
     f88:	0e 94 35 0a 	call	0x146a	; 0x146a <OLED_ClearScreen>
	printMenuToScreen(&currentMenu); // Show menu on screen
     f8c:	8f ec       	ldi	r24, 0xCF	; 207
     f8e:	92 e0       	ldi	r25, 0x02	; 2
     f90:	0e 94 06 04 	call	0x80c	; 0x80c <printMenuToScreen>
	printCursor(menuIt, 2);	
     f94:	62 e0       	ldi	r22, 0x02	; 2
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	80 91 5f 03 	lds	r24, 0x035F
     f9c:	90 91 60 03 	lds	r25, 0x0360
     fa0:	0e 94 62 05 	call	0xac4	; 0xac4 <printCursor>
}	
     fa4:	a4 96       	adiw	r28, 0x24	; 36
     fa6:	0f b6       	in	r0, 0x3f	; 63
     fa8:	f8 94       	cli
     faa:	de bf       	out	0x3e, r29	; 62
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	cd bf       	out	0x3d, r28	; 61
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	ff 90       	pop	r15
     fba:	08 95       	ret

00000fbc <aboutGame>:
	
void aboutGame(){
	OLED_ClearScreen();
     fbc:	0e 94 35 0a 	call	0x146a	; 0x146a <OLED_ClearScreen>
	
	OLED_Pos(0,0);
     fc0:	60 e0       	ldi	r22, 0x00	; 0
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
	OLED_Print("    About");
     fcc:	84 e0       	ldi	r24, 0x04	; 4
     fce:	92 e0       	ldi	r25, 0x02	; 2
     fd0:	0e 94 ad 09 	call	0x135a	; 0x135a <OLED_Print>
	OLED_Pos(2,0);
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	82 e0       	ldi	r24, 0x02	; 2
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
	OLED_Print("Ping pong game");
     fe0:	8e e0       	ldi	r24, 0x0E	; 14
     fe2:	92 e0       	ldi	r25, 0x02	; 2
     fe4:	0e 94 ad 09 	call	0x135a	; 0x135a <OLED_Print>
	OLED_Pos(4,0);
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	84 e0       	ldi	r24, 0x04	; 4
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
	OLED_Print("   made by");
     ff4:	8d e1       	ldi	r24, 0x1D	; 29
     ff6:	92 e0       	ldi	r25, 0x02	; 2
     ff8:	0e 94 ad 09 	call	0x135a	; 0x135a <OLED_Print>
	OLED_Pos(6,0);
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	70 e0       	ldi	r23, 0x00	; 0
    1000:	86 e0       	ldi	r24, 0x06	; 6
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
	OLED_Print("Kjetil Thorsen");
    1008:	88 e2       	ldi	r24, 0x28	; 40
    100a:	92 e0       	ldi	r25, 0x02	; 2
    100c:	0e 94 ad 09 	call	0x135a	; 0x135a <OLED_Print>
	OLED_Pos(7,0);
    1010:	60 e0       	ldi	r22, 0x00	; 0
    1012:	70 e0       	ldi	r23, 0x00	; 0
    1014:	87 e0       	ldi	r24, 0x07	; 7
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
	OLED_Print("Jon E. Stranden");
    101c:	87 e3       	ldi	r24, 0x37	; 55
    101e:	92 e0       	ldi	r25, 0x02	; 2
    1020:	0e 94 ad 09 	call	0x135a	; 0x135a <OLED_Print>
	
	while(1){
		if(0x01 & PINB)
    1024:	b0 9b       	sbis	0x16, 0	; 22
    1026:	fe cf       	rjmp	.-4      	; 0x1024 <aboutGame+0x68>
    1028:	2f ef       	ldi	r18, 0xFF	; 255
    102a:	8f ef       	ldi	r24, 0xFF	; 255
    102c:	92 e0       	ldi	r25, 0x02	; 2
    102e:	21 50       	subi	r18, 0x01	; 1
    1030:	80 40       	sbci	r24, 0x00	; 0
    1032:	90 40       	sbci	r25, 0x00	; 0
    1034:	e1 f7       	brne	.-8      	; 0x102e <aboutGame+0x72>
    1036:	00 c0       	rjmp	.+0      	; 0x1038 <aboutGame+0x7c>
    1038:	00 c0       	rjmp	.+0      	; 0x103a <aboutGame+0x7e>
			break;
	}
	
	_delay_ms(200);
	//currentMenu = currentMenu->parent;
	OLED_ClearScreen(); // clear oled screen
    103a:	0e 94 35 0a 	call	0x146a	; 0x146a <OLED_ClearScreen>
	printMenuToScreen(&currentMenu); // Show menu on screen
    103e:	8f ec       	ldi	r24, 0xCF	; 207
    1040:	92 e0       	ldi	r25, 0x02	; 2
    1042:	0e 94 06 04 	call	0x80c	; 0x80c <printMenuToScreen>
	printCursor(menuIt, 2);
    1046:	62 e0       	ldi	r22, 0x02	; 2
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	80 91 5f 03 	lds	r24, 0x035F
    104e:	90 91 60 03 	lds	r25, 0x0360
    1052:	0e 94 62 05 	call	0xac4	; 0xac4 <printCursor>
    1056:	08 95       	ret

00001058 <modeSetting>:
}
void calibrationDummy(){
	//printf("calibration\n");
}

void modeSetting(){
    1058:	ef 92       	push	r14
    105a:	ff 92       	push	r15
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	a4 97       	sbiw	r28, 0x24	; 36
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	f8 94       	cli
    106e:	de bf       	out	0x3e, r29	; 62
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	cd bf       	out	0x3d, r28	; 61
	int maxMinValues[8] = {0,255,0,255,0,255,0,255}; // input ranges - max/min
    1074:	80 e1       	ldi	r24, 0x10	; 16
    1076:	ed e1       	ldi	r30, 0x1D	; 29
    1078:	f1 e0       	ldi	r31, 0x01	; 1
    107a:	de 01       	movw	r26, r28
    107c:	11 96       	adiw	r26, 0x01	; 1
    107e:	01 90       	ld	r0, Z+
    1080:	0d 92       	st	X+, r0
    1082:	8a 95       	dec	r24
    1084:	e1 f7       	brne	.-8      	; 0x107e <modeSetting+0x26>
	uint8_t joystickValueY;
	uint8_t leftButtonPressed;
	
	OLED_ClearScreen();
    1086:	0e 94 35 0a 	call	0x146a	; 0x146a <OLED_ClearScreen>
	
	OLED_Pos(0,4);
    108a:	64 e0       	ldi	r22, 0x04	; 4
    108c:	70 e0       	ldi	r23, 0x00	; 0
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
	OLED_Print("Select mode");	
    1096:	87 e4       	ldi	r24, 0x47	; 71
    1098:	92 e0       	ldi	r25, 0x02	; 2
    109a:	0e 94 ad 09 	call	0x135a	; 0x135a <OLED_Print>
	OLED_Pos(2,4);
    109e:	64 e0       	ldi	r22, 0x04	; 4
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	82 e0       	ldi	r24, 0x02	; 2
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
	OLED_Print("Joystick");
    10aa:	83 e5       	ldi	r24, 0x53	; 83
    10ac:	92 e0       	ldi	r25, 0x02	; 2
    10ae:	0e 94 ad 09 	call	0x135a	; 0x135a <OLED_Print>
	OLED_Pos(3,4);
    10b2:	64 e0       	ldi	r22, 0x04	; 4
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	83 e0       	ldi	r24, 0x03	; 3
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
	OLED_Print("Kinect");
    10be:	8c e5       	ldi	r24, 0x5C	; 92
    10c0:	92 e0       	ldi	r25, 0x02	; 2
    10c2:	0e 94 ad 09 	call	0x135a	; 0x135a <OLED_Print>
		}
		
		if(mode < 0)
			mode = 0;
		if(mode > 1)
			mode = 1;
    10c6:	ee 24       	eor	r14, r14
    10c8:	e3 94       	inc	r14
			break;
		}
		
		itoa(mode,modeVal,10);
		
		strcpy(newbuffer, "Mode: ");
    10ca:	0f 2e       	mov	r0, r31
    10cc:	f7 e0       	ldi	r31, 0x07	; 7
    10ce:	ff 2e       	mov	r15, r31
    10d0:	f0 2d       	mov	r31, r0
	OLED_Print("Kinect");
	
	char modeVal[10], newbuffer[10];

	while(1){
		OLED_Pos(2,2);
    10d2:	62 e0       	ldi	r22, 0x02	; 2
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
		
		joystickValueY = getControlOutput(2,100,5, &maxMinValues[2], &maxMinValues[3]);
    10de:	8e 01       	movw	r16, r28
    10e0:	09 5f       	subi	r16, 0xF9	; 249
    10e2:	1f 4f       	sbci	r17, 0xFF	; 255
    10e4:	9e 01       	movw	r18, r28
    10e6:	2b 5f       	subi	r18, 0xFB	; 251
    10e8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ea:	45 e0       	ldi	r20, 0x05	; 5
    10ec:	50 e0       	ldi	r21, 0x00	; 0
    10ee:	64 e6       	ldi	r22, 0x64	; 100
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	82 e0       	ldi	r24, 0x02	; 2
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 0c 03 	call	0x618	; 0x618 <getControlOutput>
		leftButtonPressed = 0x01 & PINB;
    10fa:	96 b3       	in	r25, 0x16	; 22
    10fc:	19 2f       	mov	r17, r25
    10fe:	11 70       	andi	r17, 0x01	; 1
		
		if(joystickValueY < 50){
    1100:	82 33       	cpi	r24, 0x32	; 50
    1102:	88 f4       	brcc	.+34     	; 0x1126 <modeSetting+0xce>
			mode ++;
    1104:	80 91 6a 02 	lds	r24, 0x026A
    1108:	8f 5f       	subi	r24, 0xFF	; 255
    110a:	80 93 6a 02 	sts	0x026A, r24
    110e:	2f ef       	ldi	r18, 0xFF	; 255
    1110:	8f e7       	ldi	r24, 0x7F	; 127
    1112:	91 e0       	ldi	r25, 0x01	; 1
    1114:	21 50       	subi	r18, 0x01	; 1
    1116:	80 40       	sbci	r24, 0x00	; 0
    1118:	90 40       	sbci	r25, 0x00	; 0
    111a:	e1 f7       	brne	.-8      	; 0x1114 <modeSetting+0xbc>
    111c:	00 c0       	rjmp	.+0      	; 0x111e <modeSetting+0xc6>
    111e:	00 c0       	rjmp	.+0      	; 0x1120 <modeSetting+0xc8>
			_delay_ms(100);
			OLED_ClearCol();
    1120:	0e 94 18 0a 	call	0x1430	; 0x1430 <OLED_ClearCol>
    1124:	12 c0       	rjmp	.+36     	; 0x114a <modeSetting+0xf2>
		}
		else if(joystickValueY > 50){
    1126:	83 33       	cpi	r24, 0x33	; 51
    1128:	80 f0       	brcs	.+32     	; 0x114a <modeSetting+0xf2>
			mode --;
    112a:	80 91 6a 02 	lds	r24, 0x026A
    112e:	81 50       	subi	r24, 0x01	; 1
    1130:	80 93 6a 02 	sts	0x026A, r24
    1134:	2f ef       	ldi	r18, 0xFF	; 255
    1136:	8f e7       	ldi	r24, 0x7F	; 127
    1138:	91 e0       	ldi	r25, 0x01	; 1
    113a:	21 50       	subi	r18, 0x01	; 1
    113c:	80 40       	sbci	r24, 0x00	; 0
    113e:	90 40       	sbci	r25, 0x00	; 0
    1140:	e1 f7       	brne	.-8      	; 0x113a <modeSetting+0xe2>
    1142:	00 c0       	rjmp	.+0      	; 0x1144 <modeSetting+0xec>
    1144:	00 c0       	rjmp	.+0      	; 0x1146 <modeSetting+0xee>
			_delay_ms(100);
			OLED_ClearCol();
    1146:	0e 94 18 0a 	call	0x1430	; 0x1430 <OLED_ClearCol>
		}
		
		if(mode < 0)
    114a:	80 91 6a 02 	lds	r24, 0x026A
    114e:	88 23       	and	r24, r24
    1150:	1c f4       	brge	.+6      	; 0x1158 <modeSetting+0x100>
			mode = 0;
    1152:	10 92 6a 02 	sts	0x026A, r1
    1156:	0c c0       	rjmp	.+24     	; 0x1170 <modeSetting+0x118>
		if(mode > 1)
    1158:	82 30       	cpi	r24, 0x02	; 2
    115a:	1c f0       	brlt	.+6      	; 0x1162 <modeSetting+0x10a>
			mode = 1;
    115c:	e0 92 6a 02 	sts	0x026A, r14
    1160:	12 c0       	rjmp	.+36     	; 0x1186 <modeSetting+0x12e>
				
		switch(mode){
    1162:	80 91 6a 02 	lds	r24, 0x026A
    1166:	88 23       	and	r24, r24
    1168:	19 f0       	breq	.+6      	; 0x1170 <modeSetting+0x118>
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	b1 f4       	brne	.+44     	; 0x119a <modeSetting+0x142>
    116e:	0b c0       	rjmp	.+22     	; 0x1186 <modeSetting+0x12e>
			case 0:
				OLED_Pos(2,1);
    1170:	61 e0       	ldi	r22, 0x01	; 1
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	82 e0       	ldi	r24, 0x02	; 2
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
				OLED_Print(" >");
    117c:	8d e4       	ldi	r24, 0x4D	; 77
    117e:	91 e0       	ldi	r25, 0x01	; 1
    1180:	0e 94 ad 09 	call	0x135a	; 0x135a <OLED_Print>
			break;
    1184:	0a c0       	rjmp	.+20     	; 0x119a <modeSetting+0x142>
			case 1:
				OLED_Pos(3,1);
    1186:	61 e0       	ldi	r22, 0x01	; 1
    1188:	70 e0       	ldi	r23, 0x00	; 0
    118a:	83 e0       	ldi	r24, 0x03	; 3
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
				OLED_Print(" >");;
    1192:	8d e4       	ldi	r24, 0x4D	; 77
    1194:	91 e0       	ldi	r25, 0x01	; 1
    1196:	0e 94 ad 09 	call	0x135a	; 0x135a <OLED_Print>
			break;
		}
		
		itoa(mode,modeVal,10);
    119a:	80 91 6a 02 	lds	r24, 0x026A
    119e:	4a e0       	ldi	r20, 0x0A	; 10
    11a0:	be 01       	movw	r22, r28
    11a2:	6f 5e       	subi	r22, 0xEF	; 239
    11a4:	7f 4f       	sbci	r23, 0xFF	; 255
    11a6:	99 27       	eor	r25, r25
    11a8:	87 fd       	sbrc	r24, 7
    11aa:	90 95       	com	r25
    11ac:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <__itoa_ncheck>
		
		strcpy(newbuffer, "Mode: ");
    11b0:	e3 e6       	ldi	r30, 0x63	; 99
    11b2:	f2 e0       	ldi	r31, 0x02	; 2
    11b4:	de 01       	movw	r26, r28
    11b6:	5b 96       	adiw	r26, 0x1b	; 27
    11b8:	8f 2d       	mov	r24, r15
    11ba:	01 90       	ld	r0, Z+
    11bc:	0d 92       	st	X+, r0
    11be:	8a 95       	dec	r24
    11c0:	e1 f7       	brne	.-8      	; 0x11ba <modeSetting+0x162>
		strcat(newbuffer, modeVal);
    11c2:	be 01       	movw	r22, r28
    11c4:	6f 5e       	subi	r22, 0xEF	; 239
    11c6:	7f 4f       	sbci	r23, 0xFF	; 255
    11c8:	ce 01       	movw	r24, r28
    11ca:	4b 96       	adiw	r24, 0x1b	; 27
    11cc:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <strcat>
		
		OLED_Pos(0,4);
    11d0:	64 e0       	ldi	r22, 0x04	; 4
    11d2:	70 e0       	ldi	r23, 0x00	; 0
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
		OLED_Print("Select mode");
    11dc:	87 e4       	ldi	r24, 0x47	; 71
    11de:	92 e0       	ldi	r25, 0x02	; 2
    11e0:	0e 94 ad 09 	call	0x135a	; 0x135a <OLED_Print>
		
		if(leftButtonPressed)
    11e4:	11 23       	and	r17, r17
    11e6:	09 f4       	brne	.+2      	; 0x11ea <modeSetting+0x192>
    11e8:	74 cf       	rjmp	.-280    	; 0x10d2 <modeSetting+0x7a>
    11ea:	2f ef       	ldi	r18, 0xFF	; 255
    11ec:	8f ef       	ldi	r24, 0xFF	; 255
    11ee:	92 e0       	ldi	r25, 0x02	; 2
    11f0:	21 50       	subi	r18, 0x01	; 1
    11f2:	80 40       	sbci	r24, 0x00	; 0
    11f4:	90 40       	sbci	r25, 0x00	; 0
    11f6:	e1 f7       	brne	.-8      	; 0x11f0 <modeSetting+0x198>
    11f8:	00 c0       	rjmp	.+0      	; 0x11fa <modeSetting+0x1a2>
    11fa:	00 c0       	rjmp	.+0      	; 0x11fc <modeSetting+0x1a4>
			break;
	}
	
	_delay_ms(200);
	//currentMenu = currentMenu->parent;
	OLED_ClearScreen(); // clear oled screen
    11fc:	0e 94 35 0a 	call	0x146a	; 0x146a <OLED_ClearScreen>
	printMenuToScreen(&currentMenu); // Show menu on screen
    1200:	8f ec       	ldi	r24, 0xCF	; 207
    1202:	92 e0       	ldi	r25, 0x02	; 2
    1204:	0e 94 06 04 	call	0x80c	; 0x80c <printMenuToScreen>
	printCursor(0, 2);
    1208:	62 e0       	ldi	r22, 0x02	; 2
    120a:	70 e0       	ldi	r23, 0x00	; 0
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	0e 94 62 05 	call	0xac4	; 0xac4 <printCursor>
}
    1214:	a4 96       	adiw	r28, 0x24	; 36
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	1f 91       	pop	r17
    1226:	0f 91       	pop	r16
    1228:	ff 90       	pop	r15
    122a:	ef 90       	pop	r14
    122c:	08 95       	ret

0000122e <main>:


int main()
{
	//Initialize commands
	uartInit();
    122e:	0e 94 07 0b 	call	0x160e	; 0x160e <uartInit>
	sramInit();
    1232:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <sramInit>
	OLED_Init();
    1236:	0e 94 4b 0a 	call	0x1496	; 0x1496 <OLED_Init>
	menuInit();
    123a:	0e 94 50 04 	call	0x8a0	; 0x8a0 <menuInit>
	CAN_init();
    123e:	0e 94 37 02 	call	0x46e	; 0x46e <CAN_init>
		
		int8_t joystickValueY = getControlOutput(2,100,5, &maxMinValues[2], &maxMinValues[3]);
		uint8_t leftButtonPressed = 0x01 & PINB;
		
		//Menu
		maxItems = currentMenu.numOfChildren;
    1242:	c5 ee       	ldi	r28, 0xE5	; 229
    1244:	d2 e0       	ldi	r29, 0x02	; 2
		if(joystickValueY != 50){						
			if(joystickValueY > 55 && currentMenuItem > 0)
				currentMenuItem--;
			else if(joystickValueY < 45 && currentMenuItem < maxItems-1)
				currentMenuItem++;
			else if(joystickValueY < 45 && currentMenuItem < maxItems && currentMenu.parent != NULL)
    1246:	0f 2e       	mov	r0, r31
    1248:	f1 ed       	ldi	r31, 0xD1	; 209
    124a:	ef 2e       	mov	r14, r31
    124c:	f2 e0       	ldi	r31, 0x02	; 2
    124e:	ff 2e       	mov	r15, r31
    1250:	f0 2d       	mov	r31, r0
	menuInit();
	CAN_init();
		
	while(1){
		
		int8_t joystickValueY = getControlOutput(2,100,5, &maxMinValues[2], &maxMinValues[3]);
    1252:	0f e0       	ldi	r16, 0x0F	; 15
    1254:	11 e0       	ldi	r17, 0x01	; 1
    1256:	2d e0       	ldi	r18, 0x0D	; 13
    1258:	31 e0       	ldi	r19, 0x01	; 1
    125a:	45 e0       	ldi	r20, 0x05	; 5
    125c:	50 e0       	ldi	r21, 0x00	; 0
    125e:	64 e6       	ldi	r22, 0x64	; 100
    1260:	70 e0       	ldi	r23, 0x00	; 0
    1262:	82 e0       	ldi	r24, 0x02	; 2
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	0e 94 0c 03 	call	0x618	; 0x618 <getControlOutput>
    126a:	18 2f       	mov	r17, r24
		uint8_t leftButtonPressed = 0x01 & PINB;
    126c:	46 b3       	in	r20, 0x16	; 22
		
		//Menu
		maxItems = currentMenu.numOfChildren;
    126e:	28 81       	ld	r18, Y
    1270:	39 81       	ldd	r19, Y+1	; 0x01
    1272:	30 93 6c 02 	sts	0x026C, r19
    1276:	20 93 6b 02 	sts	0x026B, r18
		//printf("%s\n", currentMenu.title);
		setMenu(&currentMenu, joystickValueY, leftButtonPressed, &currentMenuItem);
    127a:	41 70       	andi	r20, 0x01	; 1
    127c:	68 2f       	mov	r22, r24
    127e:	77 27       	eor	r23, r23
    1280:	67 fd       	sbrc	r22, 7
    1282:	70 95       	com	r23
    1284:	2d e6       	ldi	r18, 0x6D	; 109
    1286:	32 e0       	ldi	r19, 0x02	; 2
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	8f ec       	ldi	r24, 0xCF	; 207
    128c:	92 e0       	ldi	r25, 0x02	; 2
    128e:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <setMenu>
		// Move menu cursor
		if(joystickValueY != 50){						
    1292:	12 33       	cpi	r17, 0x32	; 50
    1294:	f1 f2       	breq	.-68     	; 0x1252 <main+0x24>
			if(joystickValueY > 55 && currentMenuItem > 0)
    1296:	18 33       	cpi	r17, 0x38	; 56
    1298:	74 f0       	brlt	.+28     	; 0x12b6 <main+0x88>
    129a:	20 91 6d 02 	lds	r18, 0x026D
    129e:	30 91 6e 02 	lds	r19, 0x026E
    12a2:	12 16       	cp	r1, r18
    12a4:	13 06       	cpc	r1, r19
    12a6:	3c f4       	brge	.+14     	; 0x12b6 <main+0x88>
				currentMenuItem--;
    12a8:	21 50       	subi	r18, 0x01	; 1
    12aa:	31 09       	sbc	r19, r1
    12ac:	30 93 6e 02 	sts	0x026E, r19
    12b0:	20 93 6d 02 	sts	0x026D, r18
    12b4:	23 c0       	rjmp	.+70     	; 0x12fc <main+0xce>
			else if(joystickValueY < 45 && currentMenuItem < maxItems-1)
    12b6:	1d 32       	cpi	r17, 0x2D	; 45
    12b8:	0c f5       	brge	.+66     	; 0x12fc <main+0xce>
    12ba:	20 91 6b 02 	lds	r18, 0x026B
    12be:	30 91 6c 02 	lds	r19, 0x026C
    12c2:	80 91 6d 02 	lds	r24, 0x026D
    12c6:	90 91 6e 02 	lds	r25, 0x026E
    12ca:	a9 01       	movw	r20, r18
    12cc:	41 50       	subi	r20, 0x01	; 1
    12ce:	51 09       	sbc	r21, r1
    12d0:	84 17       	cp	r24, r20
    12d2:	95 07       	cpc	r25, r21
    12d4:	34 f4       	brge	.+12     	; 0x12e2 <main+0xb4>
				currentMenuItem++;
    12d6:	01 96       	adiw	r24, 0x01	; 1
    12d8:	90 93 6e 02 	sts	0x026E, r25
    12dc:	80 93 6d 02 	sts	0x026D, r24
    12e0:	0d c0       	rjmp	.+26     	; 0x12fc <main+0xce>
			else if(joystickValueY < 45 && currentMenuItem < maxItems && currentMenu.parent != NULL)
    12e2:	82 17       	cp	r24, r18
    12e4:	93 07       	cpc	r25, r19
    12e6:	54 f4       	brge	.+20     	; 0x12fc <main+0xce>
    12e8:	f7 01       	movw	r30, r14
    12ea:	20 81       	ld	r18, Z
    12ec:	31 81       	ldd	r19, Z+1	; 0x01
    12ee:	23 2b       	or	r18, r19
    12f0:	29 f0       	breq	.+10     	; 0x12fc <main+0xce>
				currentMenuItem++;
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	90 93 6e 02 	sts	0x026E, r25
    12f8:	80 93 6d 02 	sts	0x026D, r24
				
			OLED_ClearCol();
    12fc:	0e 94 18 0a 	call	0x1430	; 0x1430 <OLED_ClearCol>
			OLED_Pos(currentMenuItem+2, 1);
    1300:	80 91 6d 02 	lds	r24, 0x026D
    1304:	90 91 6e 02 	lds	r25, 0x026E
    1308:	61 e0       	ldi	r22, 0x01	; 1
    130a:	70 e0       	ldi	r23, 0x00	; 0
    130c:	02 96       	adiw	r24, 0x02	; 2
    130e:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
			OLED_Print(" >");
    1312:	8d e4       	ldi	r24, 0x4D	; 77
    1314:	91 e0       	ldi	r25, 0x01	; 1
    1316:	0e 94 ad 09 	call	0x135a	; 0x135a <OLED_Print>
    131a:	ff ef       	ldi	r31, 0xFF	; 255
    131c:	2f e7       	ldi	r18, 0x7F	; 127
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	f1 50       	subi	r31, 0x01	; 1
    1322:	20 40       	sbci	r18, 0x00	; 0
    1324:	80 40       	sbci	r24, 0x00	; 0
    1326:	e1 f7       	brne	.-8      	; 0x1320 <main+0xf2>
    1328:	00 c0       	rjmp	.+0      	; 0x132a <main+0xfc>
    132a:	00 c0       	rjmp	.+0      	; 0x132c <main+0xfe>
    132c:	92 cf       	rjmp	.-220    	; 0x1252 <main+0x24>

0000132e <OLED_PrintChar>:
		//Set higher column start address
		*OLED_Command = 0x10 + (column*(FONTWIDTH) >> 4);
	}
}

void OLED_PrintChar(char c) {
    132e:	28 e0       	ldi	r18, 0x08	; 8
    1330:	82 9f       	mul	r24, r18
    1332:	c0 01       	movw	r24, r0
    1334:	11 24       	eor	r1, r1
    1336:	fc 01       	movw	r30, r24
    1338:	e0 59       	subi	r30, 0x90	; 144
    133a:	f0 40       	sbci	r31, 0x00	; 0
	//Write a character
	for (int i = 0; i < FONTWIDTH; i++) {
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
		*OLED_Data = pgm_read_byte(&font8[c-' '][i]);
    1340:	a0 91 19 01 	lds	r26, 0x0119
    1344:	b0 91 1a 01 	lds	r27, 0x011A
    1348:	84 91       	lpm	r24, Z
    134a:	8c 93       	st	X, r24
	}
}

void OLED_PrintChar(char c) {
	//Write a character
	for (int i = 0; i < FONTWIDTH; i++) {
    134c:	2f 5f       	subi	r18, 0xFF	; 255
    134e:	3f 4f       	sbci	r19, 0xFF	; 255
    1350:	31 96       	adiw	r30, 0x01	; 1
    1352:	28 30       	cpi	r18, 0x08	; 8
    1354:	31 05       	cpc	r19, r1
    1356:	a1 f7       	brne	.-24     	; 0x1340 <OLED_PrintChar+0x12>
		*OLED_Data = pgm_read_byte(&font8[c-' '][i]);
	}	
	
}
    1358:	08 95       	ret

0000135a <OLED_Print>:

void OLED_Print(char *c) {
    135a:	cf 93       	push	r28
    135c:	df 93       	push	r29
    135e:	ec 01       	movw	r28, r24
	int i = 0;	
	char tmp;
	//Write the complete string
	while(c[i] != '\0'){
    1360:	88 81       	ld	r24, Y
    1362:	88 23       	and	r24, r24
    1364:	31 f0       	breq	.+12     	; 0x1372 <OLED_Print+0x18>
    1366:	21 96       	adiw	r28, 0x01	; 1
		OLED_PrintChar(c[i]);
    1368:	0e 94 97 09 	call	0x132e	; 0x132e <OLED_PrintChar>

void OLED_Print(char *c) {
	int i = 0;	
	char tmp;
	//Write the complete string
	while(c[i] != '\0'){
    136c:	89 91       	ld	r24, Y+
    136e:	81 11       	cpse	r24, r1
    1370:	fb cf       	rjmp	.-10     	; 0x1368 <OLED_Print+0xe>
		OLED_PrintChar(c[i]);
		i++;
	}
}
    1372:	df 91       	pop	r29
    1374:	cf 91       	pop	r28
    1376:	08 95       	ret

00001378 <OLED_Home>:
	}
}

//Set the cursor to the start of the screen
void OLED_Home(){
	*OLED_Command = 0x21;
    1378:	e0 91 1b 01 	lds	r30, 0x011B
    137c:	f0 91 1c 01 	lds	r31, 0x011C
    1380:	81 e2       	ldi	r24, 0x21	; 33
    1382:	80 83       	st	Z, r24
	*OLED_Command = 0x00;
    1384:	e0 91 1b 01 	lds	r30, 0x011B
    1388:	f0 91 1c 01 	lds	r31, 0x011C
    138c:	10 82       	st	Z, r1
	*OLED_Command = 0x7f;	
    138e:	e0 91 1b 01 	lds	r30, 0x011B
    1392:	f0 91 1c 01 	lds	r31, 0x011C
    1396:	8f e7       	ldi	r24, 0x7F	; 127
    1398:	80 83       	st	Z, r24
	*OLED_Command = 0x22;
    139a:	e0 91 1b 01 	lds	r30, 0x011B
    139e:	f0 91 1c 01 	lds	r31, 0x011C
    13a2:	82 e2       	ldi	r24, 0x22	; 34
    13a4:	80 83       	st	Z, r24
	*OLED_Command = 0x00;
    13a6:	e0 91 1b 01 	lds	r30, 0x011B
    13aa:	f0 91 1c 01 	lds	r31, 0x011C
    13ae:	10 82       	st	Z, r1
	*OLED_Command = 0x07;
    13b0:	e0 91 1b 01 	lds	r30, 0x011B
    13b4:	f0 91 1c 01 	lds	r31, 0x011C
    13b8:	87 e0       	ldi	r24, 0x07	; 7
    13ba:	80 83       	st	Z, r24
    13bc:	08 95       	ret

000013be <OLED_GotoLine>:
		i++;
	}
}

//Goto specific line
void OLED_GotoLine(uint8_t line){	
    13be:	cf 93       	push	r28
    13c0:	c8 2f       	mov	r28, r24
	OLED_Home();	
    13c2:	0e 94 bc 09 	call	0x1378	; 0x1378 <OLED_Home>
	if(line < 8){
    13c6:	c8 30       	cpi	r28, 0x08	; 8
    13c8:	98 f4       	brcc	.+38     	; 0x13f0 <OLED_GotoLine+0x32>
		//Save page
		page = line;
    13ca:	c0 93 62 03 	sts	0x0362, r28
		//Set lower column start address
		*OLED_Command = 0x00;
    13ce:	e0 91 1b 01 	lds	r30, 0x011B
    13d2:	f0 91 1c 01 	lds	r31, 0x011C
    13d6:	10 82       	st	Z, r1
		//Set higher column start address
		*OLED_Command = 0x10;
    13d8:	e0 91 1b 01 	lds	r30, 0x011B
    13dc:	f0 91 1c 01 	lds	r31, 0x011C
    13e0:	80 e1       	ldi	r24, 0x10	; 16
    13e2:	80 83       	st	Z, r24
		//Set page address
		*OLED_Command = 0xB0 | line;
    13e4:	e0 91 1b 01 	lds	r30, 0x011B
    13e8:	f0 91 1c 01 	lds	r31, 0x011C
    13ec:	c0 6b       	ori	r28, 0xB0	; 176
    13ee:	c0 83       	st	Z, r28
	}
}
    13f0:	cf 91       	pop	r28
    13f2:	08 95       	ret

000013f4 <OLED_Pos>:
volatile char *OLED_Data = (char *) 0x1200;
uint8_t page, col;


//Goto specific line and column
void OLED_Pos(uint8_t line, uint8_t column){
    13f4:	cf 93       	push	r28
    13f6:	c6 2f       	mov	r28, r22
	
	OLED_GotoLine(line);
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	0e 94 df 09 	call	0x13be	; 0x13be <OLED_GotoLine>
	
	if(column < 128/FONTWIDTH){
    13fe:	c0 31       	cpi	r28, 0x10	; 16
    1400:	a8 f4       	brcc	.+42     	; 0x142c <OLED_Pos+0x38>
		//Save page
		col = column*(FONTWIDTH);
    1402:	8c 2f       	mov	r24, r28
    1404:	88 0f       	add	r24, r24
    1406:	88 0f       	add	r24, r24
    1408:	88 0f       	add	r24, r24
    140a:	80 93 61 03 	sts	0x0361, r24
		//Set lower column start address
		*OLED_Command = 0x00 + (column*(FONTWIDTH) >> 4);
    140e:	e0 91 1b 01 	lds	r30, 0x011B
    1412:	f0 91 1c 01 	lds	r31, 0x011C
    1416:	6c 2f       	mov	r22, r28
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	76 95       	lsr	r23
    141c:	67 95       	ror	r22
    141e:	60 83       	st	Z, r22
		//Set higher column start address
		*OLED_Command = 0x10 + (column*(FONTWIDTH) >> 4);
    1420:	e0 91 1b 01 	lds	r30, 0x011B
    1424:	f0 91 1c 01 	lds	r31, 0x011C
    1428:	60 5f       	subi	r22, 0xF0	; 240
    142a:	60 83       	st	Z, r22
	}
}
    142c:	cf 91       	pop	r28
    142e:	08 95       	ret

00001430 <OLED_ClearCol>:
	}
	OLED_Home();
}

//Clear cursor col
void OLED_ClearCol(){
    1430:	1f 93       	push	r17
    1432:	cf 93       	push	r28
    1434:	df 93       	push	r29
	for(uint8_t j=0; j<8; j++){
    1436:	c0 e0       	ldi	r28, 0x00	; 0
		OLED_Pos(j, 0);
    1438:	10 e1       	ldi	r17, 0x10	; 16
    143a:	d0 e0       	ldi	r29, 0x00	; 0
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	8c 2f       	mov	r24, r28
    1440:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <OLED_Pos>
    1444:	21 2f       	mov	r18, r17
    1446:	3d 2f       	mov	r19, r29
		for (int i = 0; i < FONTWIDTH*2; i++) {
			*OLED_Data = 0x00;
    1448:	e0 91 19 01 	lds	r30, 0x0119
    144c:	f0 91 1a 01 	lds	r31, 0x011A
    1450:	10 82       	st	Z, r1
    1452:	21 50       	subi	r18, 0x01	; 1
    1454:	31 09       	sbc	r19, r1

//Clear cursor col
void OLED_ClearCol(){
	for(uint8_t j=0; j<8; j++){
		OLED_Pos(j, 0);
		for (int i = 0; i < FONTWIDTH*2; i++) {
    1456:	21 15       	cp	r18, r1
    1458:	31 05       	cpc	r19, r1
    145a:	b1 f7       	brne	.-20     	; 0x1448 <OLED_ClearCol+0x18>
	OLED_Home();
}

//Clear cursor col
void OLED_ClearCol(){
	for(uint8_t j=0; j<8; j++){
    145c:	cf 5f       	subi	r28, 0xFF	; 255
    145e:	c8 30       	cpi	r28, 0x08	; 8
    1460:	69 f7       	brne	.-38     	; 0x143c <OLED_ClearCol+0xc>
		for (int i = 0; i < FONTWIDTH*2; i++) {
			*OLED_Data = 0x00;
		}
	}
		
}
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	1f 91       	pop	r17
    1468:	08 95       	ret

0000146a <OLED_ClearScreen>:

//Removes all things written on the screen
void OLED_ClearScreen(){
    146a:	20 eb       	ldi	r18, 0xB0	; 176
	for(int page = 0; page < 8; page++){
		*OLED_Command = (0xB0 + page);
    146c:	40 e8       	ldi	r20, 0x80	; 128
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	e0 91 1b 01 	lds	r30, 0x011B
    1474:	f0 91 1c 01 	lds	r31, 0x011C
    1478:	20 83       	st	Z, r18
    147a:	84 2f       	mov	r24, r20
    147c:	93 2f       	mov	r25, r19
		for(int i = 0; i < 128; ++i){
			*OLED_Data = 0x00;
    147e:	e0 91 19 01 	lds	r30, 0x0119
    1482:	f0 91 1a 01 	lds	r31, 0x011A
    1486:	10 82       	st	Z, r1
    1488:	01 97       	sbiw	r24, 0x01	; 1

//Removes all things written on the screen
void OLED_ClearScreen(){
	for(int page = 0; page < 8; page++){
		*OLED_Command = (0xB0 + page);
		for(int i = 0; i < 128; ++i){
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	c1 f7       	brne	.-16     	; 0x147e <OLED_ClearScreen+0x14>
    148e:	2f 5f       	subi	r18, 0xFF	; 255
		
}

//Removes all things written on the screen
void OLED_ClearScreen(){
	for(int page = 0; page < 8; page++){
    1490:	28 3b       	cpi	r18, 0xB8	; 184
    1492:	71 f7       	brne	.-36     	; 0x1470 <OLED_ClearScreen+0x6>
		for(int i = 0; i < 128; ++i){
			*OLED_Data = 0x00;
		}
			
	}
}
    1494:	08 95       	ret

00001496 <OLED_Init>:
	
	//printf("Initializing OLED_ display... ");
	

	//Display off
	*OLED_Command = 0xAE;	
    1496:	e0 91 1b 01 	lds	r30, 0x011B
    149a:	f0 91 1c 01 	lds	r31, 0x011C
    149e:	8e ea       	ldi	r24, 0xAE	; 174
    14a0:	80 83       	st	Z, r24
	//Segment remap
	*OLED_Command = 0xA1;
    14a2:	e0 91 1b 01 	lds	r30, 0x011B
    14a6:	f0 91 1c 01 	lds	r31, 0x011C
    14aa:	81 ea       	ldi	r24, 0xA1	; 161
    14ac:	80 83       	st	Z, r24
	//Common pads hardware: alternative
	*OLED_Command = 0xDA;
    14ae:	e0 91 1b 01 	lds	r30, 0x011B
    14b2:	f0 91 1c 01 	lds	r31, 0x011C
    14b6:	8a ed       	ldi	r24, 0xDA	; 218
    14b8:	80 83       	st	Z, r24
	*OLED_Command = 0x12;
    14ba:	e0 91 1b 01 	lds	r30, 0x011B
    14be:	f0 91 1c 01 	lds	r31, 0x011C
    14c2:	82 e1       	ldi	r24, 0x12	; 18
    14c4:	80 83       	st	Z, r24
	//Common output scan direction:com63~com0
	*OLED_Command = 0xC8;
    14c6:	e0 91 1b 01 	lds	r30, 0x011B
    14ca:	f0 91 1c 01 	lds	r31, 0x011C
    14ce:	88 ec       	ldi	r24, 0xC8	; 200
    14d0:	80 83       	st	Z, r24
	//Multiplex ration mode:63
	*OLED_Command = 0xA8;
    14d2:	e0 91 1b 01 	lds	r30, 0x011B
    14d6:	f0 91 1c 01 	lds	r31, 0x011C
    14da:	88 ea       	ldi	r24, 0xA8	; 168
    14dc:	80 83       	st	Z, r24
	*OLED_Command = 0x3F;
    14de:	e0 91 1b 01 	lds	r30, 0x011B
    14e2:	f0 91 1c 01 	lds	r31, 0x011C
    14e6:	8f e3       	ldi	r24, 0x3F	; 63
    14e8:	80 83       	st	Z, r24
	//Display divide ratio/osc. freq. mode
	
	*OLED_Command = 0xD5;
    14ea:	e0 91 1b 01 	lds	r30, 0x011B
    14ee:	f0 91 1c 01 	lds	r31, 0x011C
    14f2:	85 ed       	ldi	r24, 0xD5	; 213
    14f4:	80 83       	st	Z, r24
	*OLED_Command = 0x80;
    14f6:	e0 91 1b 01 	lds	r30, 0x011B
    14fa:	f0 91 1c 01 	lds	r31, 0x011C
    14fe:	80 e8       	ldi	r24, 0x80	; 128
    1500:	80 83       	st	Z, r24
	//Contrast control
	*OLED_Command = 0x81;
    1502:	e0 91 1b 01 	lds	r30, 0x011B
    1506:	f0 91 1c 01 	lds	r31, 0x011C
    150a:	81 e8       	ldi	r24, 0x81	; 129
    150c:	80 83       	st	Z, r24
	*OLED_Command = 0x50;
    150e:	e0 91 1b 01 	lds	r30, 0x011B
    1512:	f0 91 1c 01 	lds	r31, 0x011C
    1516:	80 e5       	ldi	r24, 0x50	; 80
    1518:	80 83       	st	Z, r24
	//Set pre-charge period
	*OLED_Command = 0xD9;
    151a:	e0 91 1b 01 	lds	r30, 0x011B
    151e:	f0 91 1c 01 	lds	r31, 0x011C
    1522:	89 ed       	ldi	r24, 0xD9	; 217
    1524:	80 83       	st	Z, r24
	*OLED_Command = 0x21;
    1526:	e0 91 1b 01 	lds	r30, 0x011B
    152a:	f0 91 1c 01 	lds	r31, 0x011C
    152e:	81 e2       	ldi	r24, 0x21	; 33
    1530:	80 83       	st	Z, r24
	//Set Memory Addressing Mode
	*OLED_Command = 0x20;
    1532:	e0 91 1b 01 	lds	r30, 0x011B
    1536:	f0 91 1c 01 	lds	r31, 0x011C
    153a:	80 e2       	ldi	r24, 0x20	; 32
    153c:	80 83       	st	Z, r24
	*OLED_Command = 0x02;
    153e:	e0 91 1b 01 	lds	r30, 0x011B
    1542:	f0 91 1c 01 	lds	r31, 0x011C
    1546:	82 e0       	ldi	r24, 0x02	; 2
    1548:	80 83       	st	Z, r24
	//VCOM deselect level mode
	*OLED_Command = 0xDB;
    154a:	e0 91 1b 01 	lds	r30, 0x011B
    154e:	f0 91 1c 01 	lds	r31, 0x011C
    1552:	8b ed       	ldi	r24, 0xDB	; 219
    1554:	80 83       	st	Z, r24
	*OLED_Command = 0x30;
    1556:	e0 91 1b 01 	lds	r30, 0x011B
    155a:	f0 91 1c 01 	lds	r31, 0x011C
    155e:	80 e3       	ldi	r24, 0x30	; 48
    1560:	80 83       	st	Z, r24
	//Master configuration
	*OLED_Command = 0xAD;
    1562:	e0 91 1b 01 	lds	r30, 0x011B
    1566:	f0 91 1c 01 	lds	r31, 0x011C
    156a:	8d ea       	ldi	r24, 0xAD	; 173
    156c:	80 83       	st	Z, r24
	*OLED_Command = 0x00;
    156e:	e0 91 1b 01 	lds	r30, 0x011B
    1572:	f0 91 1c 01 	lds	r31, 0x011C
    1576:	10 82       	st	Z, r1
	//Out follows RAM content
	*OLED_Command = 0xA4;
    1578:	e0 91 1b 01 	lds	r30, 0x011B
    157c:	f0 91 1c 01 	lds	r31, 0x011C
    1580:	84 ea       	ldi	r24, 0xA4	; 164
    1582:	80 83       	st	Z, r24
	//Set normal display
	*OLED_Command = 0xA6;
    1584:	e0 91 1b 01 	lds	r30, 0x011B
    1588:	f0 91 1c 01 	lds	r31, 0x011C
    158c:	86 ea       	ldi	r24, 0xA6	; 166
    158e:	80 83       	st	Z, r24
	//Display on
	*OLED_Command = 0xAF;	
    1590:	e0 91 1b 01 	lds	r30, 0x011B
    1594:	f0 91 1c 01 	lds	r31, 0x011C
    1598:	8f ea       	ldi	r24, 0xAF	; 175
    159a:	80 83       	st	Z, r24
	//Set page start address
	*OLED_Command = 0xB0;
    159c:	e0 91 1b 01 	lds	r30, 0x011B
    15a0:	f0 91 1c 01 	lds	r31, 0x011C
    15a4:	80 eb       	ldi	r24, 0xB0	; 176
    15a6:	80 83       	st	Z, r24
	//Set lower column start address
	*OLED_Command = 0x00;
    15a8:	e0 91 1b 01 	lds	r30, 0x011B
    15ac:	f0 91 1c 01 	lds	r31, 0x011C
    15b0:	10 82       	st	Z, r1
	//Set higher column start address
	*OLED_Command = 0x10;
    15b2:	e0 91 1b 01 	lds	r30, 0x011B
    15b6:	f0 91 1c 01 	lds	r31, 0x011C
    15ba:	80 e1       	ldi	r24, 0x10	; 16
    15bc:	80 83       	st	Z, r24
	
	//Goto start position
	OLED_ClearScreen();
    15be:	0e 94 35 0a 	call	0x146a	; 0x146a <OLED_ClearScreen>
    15c2:	08 95       	ret

000015c4 <SPI_init>:
#include "SPI.h"
#include <avr/io.h>
#include <util/delay.h>

void SPI_init(void){	
	DDR_SPI |= (1<<DD_MOSI) | (1<<DD_SCK) | (1<<SS_PIN); // Set MOSI and SCK output, all others input
    15c4:	87 b3       	in	r24, 0x17	; 23
    15c6:	80 6b       	ori	r24, 0xB0	; 176
    15c8:	87 bb       	out	0x17, r24	; 23
	SPCR |=	(1<<SPE) | (1<<MSTR) | (1<<SPR0); // Enable SPI, Master, set clock rate fck/16
    15ca:	8d b1       	in	r24, 0x0d	; 13
    15cc:	81 65       	ori	r24, 0x51	; 81
    15ce:	8d b9       	out	0x0d, r24	; 13
    15d0:	08 95       	ret

000015d2 <SPI_write>:
}

void SPI_write(char c){
	SPDR = c; // Start transmission
    15d2:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));	// Wait for transmission complete
    15d4:	77 9b       	sbis	0x0e, 7	; 14
    15d6:	fe cf       	rjmp	.-4      	; 0x15d4 <SPI_write+0x2>
}
    15d8:	08 95       	ret

000015da <SPI_read>:

char SPI_read(){
	SPI_write(0);
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <SPI_write>
	uint8_t temp = SPDR;
    15e0:	8f b1       	in	r24, 0x0f	; 15
	return temp;
}
    15e2:	08 95       	ret

000015e4 <SPI_slaveEnable>:

void SPI_slaveEnable(uint8_t enable){	
	if(enable)
    15e4:	88 23       	and	r24, r24
    15e6:	11 f0       	breq	.+4      	; 0x15ec <SPI_slaveEnable+0x8>
	PORTB	&=	~(1<<SS_PIN);
    15e8:	c4 98       	cbi	0x18, 4	; 24
    15ea:	08 95       	ret
	else if(!enable)
		PORTB	|=	(1<<SS_PIN);
    15ec:	c4 9a       	sbi	0x18, 4	; 24
    15ee:	08 95       	ret

000015f0 <sramInit>:
	}
	printf("SRAM test completed with\n%4d errors in write phase and\n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
}

void sramInit(void){
	MCUCR |= (1 << SRE); 
    15f0:	85 b7       	in	r24, 0x35	; 53
    15f2:	80 68       	ori	r24, 0x80	; 128
    15f4:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1 << XMM2);
    15f6:	80 b7       	in	r24, 0x30	; 48
    15f8:	80 62       	ori	r24, 0x20	; 32
    15fa:	80 bf       	out	0x30, r24	; 48
    15fc:	08 95       	ret

000015fe <uartTransmit>:

//Transmit data to serial port
void uartTransmit(unsigned char data)
{
	//Wait for empty transmit buffer
	while( !(UCSR0A & (1<<UDRE0)) );
    15fe:	5d 9b       	sbis	0x0b, 5	; 11
    1600:	fe cf       	rjmp	.-4      	; 0x15fe <uartTransmit>
	//Put data into buffer, sends the data
	UDR0 = data;
    1602:	8c b9       	out	0x0c, r24	; 12
    1604:	08 95       	ret

00001606 <uartReceive>:

//Read data from serial port
unsigned char uartReceive()
{
	//Wait for data to be received
	while( !(UCSR0A & (1<<RXC0)) );
    1606:	5f 9b       	sbis	0x0b, 7	; 11
    1608:	fe cf       	rjmp	.-4      	; 0x1606 <uartReceive>
	//Get and return received data from buffer
	return
    160a:	8c b1       	in	r24, 0x0c	; 12
	UDR0;
    160c:	08 95       	ret

0000160e <uartInit>:
//Initialize values to enable uart communication
void uartInit()
{
	//Set baud rate
	unsigned int baud = UBBR;
	UBRR0H = (unsigned char)(baud>>8);
    160e:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)baud;
    1610:	8f e1       	ldi	r24, 0x1F	; 31
    1612:	89 b9       	out	0x09, r24	; 9
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1614:	88 e1       	ldi	r24, 0x18	; 24
    1616:	8a b9       	out	0x0a, r24	; 10
	//Set frame format: 8data, 2stop bit
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);	
    1618:	8e e8       	ldi	r24, 0x8E	; 142
    161a:	80 bd       	out	0x20, r24	; 32
	//Connect the printf function to self defined uart functions
	fdevopen(uartTransmit, uartReceive);
    161c:	63 e0       	ldi	r22, 0x03	; 3
    161e:	7b e0       	ldi	r23, 0x0B	; 11
    1620:	8f ef       	ldi	r24, 0xFF	; 255
    1622:	9a e0       	ldi	r25, 0x0A	; 10
    1624:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <fdevopen>
    1628:	08 95       	ret

0000162a <__subsf3>:
    162a:	50 58       	subi	r21, 0x80	; 128

0000162c <__addsf3>:
    162c:	bb 27       	eor	r27, r27
    162e:	aa 27       	eor	r26, r26
    1630:	0e d0       	rcall	.+28     	; 0x164e <__addsf3x>
    1632:	75 c1       	rjmp	.+746    	; 0x191e <__fp_round>
    1634:	66 d1       	rcall	.+716    	; 0x1902 <__fp_pscA>
    1636:	30 f0       	brcs	.+12     	; 0x1644 <__addsf3+0x18>
    1638:	6b d1       	rcall	.+726    	; 0x1910 <__fp_pscB>
    163a:	20 f0       	brcs	.+8      	; 0x1644 <__addsf3+0x18>
    163c:	31 f4       	brne	.+12     	; 0x164a <__addsf3+0x1e>
    163e:	9f 3f       	cpi	r25, 0xFF	; 255
    1640:	11 f4       	brne	.+4      	; 0x1646 <__addsf3+0x1a>
    1642:	1e f4       	brtc	.+6      	; 0x164a <__addsf3+0x1e>
    1644:	5b c1       	rjmp	.+694    	; 0x18fc <__fp_nan>
    1646:	0e f4       	brtc	.+2      	; 0x164a <__addsf3+0x1e>
    1648:	e0 95       	com	r30
    164a:	e7 fb       	bst	r30, 7
    164c:	51 c1       	rjmp	.+674    	; 0x18f0 <__fp_inf>

0000164e <__addsf3x>:
    164e:	e9 2f       	mov	r30, r25
    1650:	77 d1       	rcall	.+750    	; 0x1940 <__fp_split3>
    1652:	80 f3       	brcs	.-32     	; 0x1634 <__addsf3+0x8>
    1654:	ba 17       	cp	r27, r26
    1656:	62 07       	cpc	r22, r18
    1658:	73 07       	cpc	r23, r19
    165a:	84 07       	cpc	r24, r20
    165c:	95 07       	cpc	r25, r21
    165e:	18 f0       	brcs	.+6      	; 0x1666 <__addsf3x+0x18>
    1660:	71 f4       	brne	.+28     	; 0x167e <__addsf3x+0x30>
    1662:	9e f5       	brtc	.+102    	; 0x16ca <__addsf3x+0x7c>
    1664:	8f c1       	rjmp	.+798    	; 0x1984 <__fp_zero>
    1666:	0e f4       	brtc	.+2      	; 0x166a <__addsf3x+0x1c>
    1668:	e0 95       	com	r30
    166a:	0b 2e       	mov	r0, r27
    166c:	ba 2f       	mov	r27, r26
    166e:	a0 2d       	mov	r26, r0
    1670:	0b 01       	movw	r0, r22
    1672:	b9 01       	movw	r22, r18
    1674:	90 01       	movw	r18, r0
    1676:	0c 01       	movw	r0, r24
    1678:	ca 01       	movw	r24, r20
    167a:	a0 01       	movw	r20, r0
    167c:	11 24       	eor	r1, r1
    167e:	ff 27       	eor	r31, r31
    1680:	59 1b       	sub	r21, r25
    1682:	99 f0       	breq	.+38     	; 0x16aa <__addsf3x+0x5c>
    1684:	59 3f       	cpi	r21, 0xF9	; 249
    1686:	50 f4       	brcc	.+20     	; 0x169c <__addsf3x+0x4e>
    1688:	50 3e       	cpi	r21, 0xE0	; 224
    168a:	68 f1       	brcs	.+90     	; 0x16e6 <__addsf3x+0x98>
    168c:	1a 16       	cp	r1, r26
    168e:	f0 40       	sbci	r31, 0x00	; 0
    1690:	a2 2f       	mov	r26, r18
    1692:	23 2f       	mov	r18, r19
    1694:	34 2f       	mov	r19, r20
    1696:	44 27       	eor	r20, r20
    1698:	58 5f       	subi	r21, 0xF8	; 248
    169a:	f3 cf       	rjmp	.-26     	; 0x1682 <__addsf3x+0x34>
    169c:	46 95       	lsr	r20
    169e:	37 95       	ror	r19
    16a0:	27 95       	ror	r18
    16a2:	a7 95       	ror	r26
    16a4:	f0 40       	sbci	r31, 0x00	; 0
    16a6:	53 95       	inc	r21
    16a8:	c9 f7       	brne	.-14     	; 0x169c <__addsf3x+0x4e>
    16aa:	7e f4       	brtc	.+30     	; 0x16ca <__addsf3x+0x7c>
    16ac:	1f 16       	cp	r1, r31
    16ae:	ba 0b       	sbc	r27, r26
    16b0:	62 0b       	sbc	r22, r18
    16b2:	73 0b       	sbc	r23, r19
    16b4:	84 0b       	sbc	r24, r20
    16b6:	ba f0       	brmi	.+46     	; 0x16e6 <__addsf3x+0x98>
    16b8:	91 50       	subi	r25, 0x01	; 1
    16ba:	a1 f0       	breq	.+40     	; 0x16e4 <__addsf3x+0x96>
    16bc:	ff 0f       	add	r31, r31
    16be:	bb 1f       	adc	r27, r27
    16c0:	66 1f       	adc	r22, r22
    16c2:	77 1f       	adc	r23, r23
    16c4:	88 1f       	adc	r24, r24
    16c6:	c2 f7       	brpl	.-16     	; 0x16b8 <__addsf3x+0x6a>
    16c8:	0e c0       	rjmp	.+28     	; 0x16e6 <__addsf3x+0x98>
    16ca:	ba 0f       	add	r27, r26
    16cc:	62 1f       	adc	r22, r18
    16ce:	73 1f       	adc	r23, r19
    16d0:	84 1f       	adc	r24, r20
    16d2:	48 f4       	brcc	.+18     	; 0x16e6 <__addsf3x+0x98>
    16d4:	87 95       	ror	r24
    16d6:	77 95       	ror	r23
    16d8:	67 95       	ror	r22
    16da:	b7 95       	ror	r27
    16dc:	f7 95       	ror	r31
    16de:	9e 3f       	cpi	r25, 0xFE	; 254
    16e0:	08 f0       	brcs	.+2      	; 0x16e4 <__addsf3x+0x96>
    16e2:	b3 cf       	rjmp	.-154    	; 0x164a <__addsf3+0x1e>
    16e4:	93 95       	inc	r25
    16e6:	88 0f       	add	r24, r24
    16e8:	08 f0       	brcs	.+2      	; 0x16ec <__addsf3x+0x9e>
    16ea:	99 27       	eor	r25, r25
    16ec:	ee 0f       	add	r30, r30
    16ee:	97 95       	ror	r25
    16f0:	87 95       	ror	r24
    16f2:	08 95       	ret

000016f4 <__cmpsf2>:
    16f4:	d9 d0       	rcall	.+434    	; 0x18a8 <__fp_cmp>
    16f6:	08 f4       	brcc	.+2      	; 0x16fa <__cmpsf2+0x6>
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	08 95       	ret

000016fc <__divsf3>:
    16fc:	0c d0       	rcall	.+24     	; 0x1716 <__divsf3x>
    16fe:	0f c1       	rjmp	.+542    	; 0x191e <__fp_round>
    1700:	07 d1       	rcall	.+526    	; 0x1910 <__fp_pscB>
    1702:	40 f0       	brcs	.+16     	; 0x1714 <__divsf3+0x18>
    1704:	fe d0       	rcall	.+508    	; 0x1902 <__fp_pscA>
    1706:	30 f0       	brcs	.+12     	; 0x1714 <__divsf3+0x18>
    1708:	21 f4       	brne	.+8      	; 0x1712 <__divsf3+0x16>
    170a:	5f 3f       	cpi	r21, 0xFF	; 255
    170c:	19 f0       	breq	.+6      	; 0x1714 <__divsf3+0x18>
    170e:	f0 c0       	rjmp	.+480    	; 0x18f0 <__fp_inf>
    1710:	51 11       	cpse	r21, r1
    1712:	39 c1       	rjmp	.+626    	; 0x1986 <__fp_szero>
    1714:	f3 c0       	rjmp	.+486    	; 0x18fc <__fp_nan>

00001716 <__divsf3x>:
    1716:	14 d1       	rcall	.+552    	; 0x1940 <__fp_split3>
    1718:	98 f3       	brcs	.-26     	; 0x1700 <__divsf3+0x4>

0000171a <__divsf3_pse>:
    171a:	99 23       	and	r25, r25
    171c:	c9 f3       	breq	.-14     	; 0x1710 <__divsf3+0x14>
    171e:	55 23       	and	r21, r21
    1720:	b1 f3       	breq	.-20     	; 0x170e <__divsf3+0x12>
    1722:	95 1b       	sub	r25, r21
    1724:	55 0b       	sbc	r21, r21
    1726:	bb 27       	eor	r27, r27
    1728:	aa 27       	eor	r26, r26
    172a:	62 17       	cp	r22, r18
    172c:	73 07       	cpc	r23, r19
    172e:	84 07       	cpc	r24, r20
    1730:	38 f0       	brcs	.+14     	; 0x1740 <__divsf3_pse+0x26>
    1732:	9f 5f       	subi	r25, 0xFF	; 255
    1734:	5f 4f       	sbci	r21, 0xFF	; 255
    1736:	22 0f       	add	r18, r18
    1738:	33 1f       	adc	r19, r19
    173a:	44 1f       	adc	r20, r20
    173c:	aa 1f       	adc	r26, r26
    173e:	a9 f3       	breq	.-22     	; 0x172a <__divsf3_pse+0x10>
    1740:	33 d0       	rcall	.+102    	; 0x17a8 <__divsf3_pse+0x8e>
    1742:	0e 2e       	mov	r0, r30
    1744:	3a f0       	brmi	.+14     	; 0x1754 <__divsf3_pse+0x3a>
    1746:	e0 e8       	ldi	r30, 0x80	; 128
    1748:	30 d0       	rcall	.+96     	; 0x17aa <__divsf3_pse+0x90>
    174a:	91 50       	subi	r25, 0x01	; 1
    174c:	50 40       	sbci	r21, 0x00	; 0
    174e:	e6 95       	lsr	r30
    1750:	00 1c       	adc	r0, r0
    1752:	ca f7       	brpl	.-14     	; 0x1746 <__divsf3_pse+0x2c>
    1754:	29 d0       	rcall	.+82     	; 0x17a8 <__divsf3_pse+0x8e>
    1756:	fe 2f       	mov	r31, r30
    1758:	27 d0       	rcall	.+78     	; 0x17a8 <__divsf3_pse+0x8e>
    175a:	66 0f       	add	r22, r22
    175c:	77 1f       	adc	r23, r23
    175e:	88 1f       	adc	r24, r24
    1760:	bb 1f       	adc	r27, r27
    1762:	26 17       	cp	r18, r22
    1764:	37 07       	cpc	r19, r23
    1766:	48 07       	cpc	r20, r24
    1768:	ab 07       	cpc	r26, r27
    176a:	b0 e8       	ldi	r27, 0x80	; 128
    176c:	09 f0       	breq	.+2      	; 0x1770 <__divsf3_pse+0x56>
    176e:	bb 0b       	sbc	r27, r27
    1770:	80 2d       	mov	r24, r0
    1772:	bf 01       	movw	r22, r30
    1774:	ff 27       	eor	r31, r31
    1776:	93 58       	subi	r25, 0x83	; 131
    1778:	5f 4f       	sbci	r21, 0xFF	; 255
    177a:	2a f0       	brmi	.+10     	; 0x1786 <__divsf3_pse+0x6c>
    177c:	9e 3f       	cpi	r25, 0xFE	; 254
    177e:	51 05       	cpc	r21, r1
    1780:	68 f0       	brcs	.+26     	; 0x179c <__divsf3_pse+0x82>
    1782:	b6 c0       	rjmp	.+364    	; 0x18f0 <__fp_inf>
    1784:	00 c1       	rjmp	.+512    	; 0x1986 <__fp_szero>
    1786:	5f 3f       	cpi	r21, 0xFF	; 255
    1788:	ec f3       	brlt	.-6      	; 0x1784 <__divsf3_pse+0x6a>
    178a:	98 3e       	cpi	r25, 0xE8	; 232
    178c:	dc f3       	brlt	.-10     	; 0x1784 <__divsf3_pse+0x6a>
    178e:	86 95       	lsr	r24
    1790:	77 95       	ror	r23
    1792:	67 95       	ror	r22
    1794:	b7 95       	ror	r27
    1796:	f7 95       	ror	r31
    1798:	9f 5f       	subi	r25, 0xFF	; 255
    179a:	c9 f7       	brne	.-14     	; 0x178e <__divsf3_pse+0x74>
    179c:	88 0f       	add	r24, r24
    179e:	91 1d       	adc	r25, r1
    17a0:	96 95       	lsr	r25
    17a2:	87 95       	ror	r24
    17a4:	97 f9       	bld	r25, 7
    17a6:	08 95       	ret
    17a8:	e1 e0       	ldi	r30, 0x01	; 1
    17aa:	66 0f       	add	r22, r22
    17ac:	77 1f       	adc	r23, r23
    17ae:	88 1f       	adc	r24, r24
    17b0:	bb 1f       	adc	r27, r27
    17b2:	62 17       	cp	r22, r18
    17b4:	73 07       	cpc	r23, r19
    17b6:	84 07       	cpc	r24, r20
    17b8:	ba 07       	cpc	r27, r26
    17ba:	20 f0       	brcs	.+8      	; 0x17c4 <__divsf3_pse+0xaa>
    17bc:	62 1b       	sub	r22, r18
    17be:	73 0b       	sbc	r23, r19
    17c0:	84 0b       	sbc	r24, r20
    17c2:	ba 0b       	sbc	r27, r26
    17c4:	ee 1f       	adc	r30, r30
    17c6:	88 f7       	brcc	.-30     	; 0x17aa <__divsf3_pse+0x90>
    17c8:	e0 95       	com	r30
    17ca:	08 95       	ret

000017cc <__fixsfsi>:
    17cc:	04 d0       	rcall	.+8      	; 0x17d6 <__fixunssfsi>
    17ce:	68 94       	set
    17d0:	b1 11       	cpse	r27, r1
    17d2:	d9 c0       	rjmp	.+434    	; 0x1986 <__fp_szero>
    17d4:	08 95       	ret

000017d6 <__fixunssfsi>:
    17d6:	bc d0       	rcall	.+376    	; 0x1950 <__fp_splitA>
    17d8:	88 f0       	brcs	.+34     	; 0x17fc <__fixunssfsi+0x26>
    17da:	9f 57       	subi	r25, 0x7F	; 127
    17dc:	90 f0       	brcs	.+36     	; 0x1802 <__fixunssfsi+0x2c>
    17de:	b9 2f       	mov	r27, r25
    17e0:	99 27       	eor	r25, r25
    17e2:	b7 51       	subi	r27, 0x17	; 23
    17e4:	a0 f0       	brcs	.+40     	; 0x180e <__fixunssfsi+0x38>
    17e6:	d1 f0       	breq	.+52     	; 0x181c <__fixunssfsi+0x46>
    17e8:	66 0f       	add	r22, r22
    17ea:	77 1f       	adc	r23, r23
    17ec:	88 1f       	adc	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	1a f0       	brmi	.+6      	; 0x17f8 <__fixunssfsi+0x22>
    17f2:	ba 95       	dec	r27
    17f4:	c9 f7       	brne	.-14     	; 0x17e8 <__fixunssfsi+0x12>
    17f6:	12 c0       	rjmp	.+36     	; 0x181c <__fixunssfsi+0x46>
    17f8:	b1 30       	cpi	r27, 0x01	; 1
    17fa:	81 f0       	breq	.+32     	; 0x181c <__fixunssfsi+0x46>
    17fc:	c3 d0       	rcall	.+390    	; 0x1984 <__fp_zero>
    17fe:	b1 e0       	ldi	r27, 0x01	; 1
    1800:	08 95       	ret
    1802:	c0 c0       	rjmp	.+384    	; 0x1984 <__fp_zero>
    1804:	67 2f       	mov	r22, r23
    1806:	78 2f       	mov	r23, r24
    1808:	88 27       	eor	r24, r24
    180a:	b8 5f       	subi	r27, 0xF8	; 248
    180c:	39 f0       	breq	.+14     	; 0x181c <__fixunssfsi+0x46>
    180e:	b9 3f       	cpi	r27, 0xF9	; 249
    1810:	cc f3       	brlt	.-14     	; 0x1804 <__fixunssfsi+0x2e>
    1812:	86 95       	lsr	r24
    1814:	77 95       	ror	r23
    1816:	67 95       	ror	r22
    1818:	b3 95       	inc	r27
    181a:	d9 f7       	brne	.-10     	; 0x1812 <__fixunssfsi+0x3c>
    181c:	3e f4       	brtc	.+14     	; 0x182c <__fixunssfsi+0x56>
    181e:	90 95       	com	r25
    1820:	80 95       	com	r24
    1822:	70 95       	com	r23
    1824:	61 95       	neg	r22
    1826:	7f 4f       	sbci	r23, 0xFF	; 255
    1828:	8f 4f       	sbci	r24, 0xFF	; 255
    182a:	9f 4f       	sbci	r25, 0xFF	; 255
    182c:	08 95       	ret

0000182e <__floatunsisf>:
    182e:	e8 94       	clt
    1830:	09 c0       	rjmp	.+18     	; 0x1844 <__floatsisf+0x12>

00001832 <__floatsisf>:
    1832:	97 fb       	bst	r25, 7
    1834:	3e f4       	brtc	.+14     	; 0x1844 <__floatsisf+0x12>
    1836:	90 95       	com	r25
    1838:	80 95       	com	r24
    183a:	70 95       	com	r23
    183c:	61 95       	neg	r22
    183e:	7f 4f       	sbci	r23, 0xFF	; 255
    1840:	8f 4f       	sbci	r24, 0xFF	; 255
    1842:	9f 4f       	sbci	r25, 0xFF	; 255
    1844:	99 23       	and	r25, r25
    1846:	a9 f0       	breq	.+42     	; 0x1872 <__floatsisf+0x40>
    1848:	f9 2f       	mov	r31, r25
    184a:	96 e9       	ldi	r25, 0x96	; 150
    184c:	bb 27       	eor	r27, r27
    184e:	93 95       	inc	r25
    1850:	f6 95       	lsr	r31
    1852:	87 95       	ror	r24
    1854:	77 95       	ror	r23
    1856:	67 95       	ror	r22
    1858:	b7 95       	ror	r27
    185a:	f1 11       	cpse	r31, r1
    185c:	f8 cf       	rjmp	.-16     	; 0x184e <__floatsisf+0x1c>
    185e:	fa f4       	brpl	.+62     	; 0x189e <__floatsisf+0x6c>
    1860:	bb 0f       	add	r27, r27
    1862:	11 f4       	brne	.+4      	; 0x1868 <__floatsisf+0x36>
    1864:	60 ff       	sbrs	r22, 0
    1866:	1b c0       	rjmp	.+54     	; 0x189e <__floatsisf+0x6c>
    1868:	6f 5f       	subi	r22, 0xFF	; 255
    186a:	7f 4f       	sbci	r23, 0xFF	; 255
    186c:	8f 4f       	sbci	r24, 0xFF	; 255
    186e:	9f 4f       	sbci	r25, 0xFF	; 255
    1870:	16 c0       	rjmp	.+44     	; 0x189e <__floatsisf+0x6c>
    1872:	88 23       	and	r24, r24
    1874:	11 f0       	breq	.+4      	; 0x187a <__floatsisf+0x48>
    1876:	96 e9       	ldi	r25, 0x96	; 150
    1878:	11 c0       	rjmp	.+34     	; 0x189c <__floatsisf+0x6a>
    187a:	77 23       	and	r23, r23
    187c:	21 f0       	breq	.+8      	; 0x1886 <__floatsisf+0x54>
    187e:	9e e8       	ldi	r25, 0x8E	; 142
    1880:	87 2f       	mov	r24, r23
    1882:	76 2f       	mov	r23, r22
    1884:	05 c0       	rjmp	.+10     	; 0x1890 <__floatsisf+0x5e>
    1886:	66 23       	and	r22, r22
    1888:	71 f0       	breq	.+28     	; 0x18a6 <__floatsisf+0x74>
    188a:	96 e8       	ldi	r25, 0x86	; 134
    188c:	86 2f       	mov	r24, r22
    188e:	70 e0       	ldi	r23, 0x00	; 0
    1890:	60 e0       	ldi	r22, 0x00	; 0
    1892:	2a f0       	brmi	.+10     	; 0x189e <__floatsisf+0x6c>
    1894:	9a 95       	dec	r25
    1896:	66 0f       	add	r22, r22
    1898:	77 1f       	adc	r23, r23
    189a:	88 1f       	adc	r24, r24
    189c:	da f7       	brpl	.-10     	; 0x1894 <__floatsisf+0x62>
    189e:	88 0f       	add	r24, r24
    18a0:	96 95       	lsr	r25
    18a2:	87 95       	ror	r24
    18a4:	97 f9       	bld	r25, 7
    18a6:	08 95       	ret

000018a8 <__fp_cmp>:
    18a8:	99 0f       	add	r25, r25
    18aa:	00 08       	sbc	r0, r0
    18ac:	55 0f       	add	r21, r21
    18ae:	aa 0b       	sbc	r26, r26
    18b0:	e0 e8       	ldi	r30, 0x80	; 128
    18b2:	fe ef       	ldi	r31, 0xFE	; 254
    18b4:	16 16       	cp	r1, r22
    18b6:	17 06       	cpc	r1, r23
    18b8:	e8 07       	cpc	r30, r24
    18ba:	f9 07       	cpc	r31, r25
    18bc:	c0 f0       	brcs	.+48     	; 0x18ee <__fp_cmp+0x46>
    18be:	12 16       	cp	r1, r18
    18c0:	13 06       	cpc	r1, r19
    18c2:	e4 07       	cpc	r30, r20
    18c4:	f5 07       	cpc	r31, r21
    18c6:	98 f0       	brcs	.+38     	; 0x18ee <__fp_cmp+0x46>
    18c8:	62 1b       	sub	r22, r18
    18ca:	73 0b       	sbc	r23, r19
    18cc:	84 0b       	sbc	r24, r20
    18ce:	95 0b       	sbc	r25, r21
    18d0:	39 f4       	brne	.+14     	; 0x18e0 <__fp_cmp+0x38>
    18d2:	0a 26       	eor	r0, r26
    18d4:	61 f0       	breq	.+24     	; 0x18ee <__fp_cmp+0x46>
    18d6:	23 2b       	or	r18, r19
    18d8:	24 2b       	or	r18, r20
    18da:	25 2b       	or	r18, r21
    18dc:	21 f4       	brne	.+8      	; 0x18e6 <__fp_cmp+0x3e>
    18de:	08 95       	ret
    18e0:	0a 26       	eor	r0, r26
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <__fp_cmp+0x3e>
    18e4:	a1 40       	sbci	r26, 0x01	; 1
    18e6:	a6 95       	lsr	r26
    18e8:	8f ef       	ldi	r24, 0xFF	; 255
    18ea:	81 1d       	adc	r24, r1
    18ec:	81 1d       	adc	r24, r1
    18ee:	08 95       	ret

000018f0 <__fp_inf>:
    18f0:	97 f9       	bld	r25, 7
    18f2:	9f 67       	ori	r25, 0x7F	; 127
    18f4:	80 e8       	ldi	r24, 0x80	; 128
    18f6:	70 e0       	ldi	r23, 0x00	; 0
    18f8:	60 e0       	ldi	r22, 0x00	; 0
    18fa:	08 95       	ret

000018fc <__fp_nan>:
    18fc:	9f ef       	ldi	r25, 0xFF	; 255
    18fe:	80 ec       	ldi	r24, 0xC0	; 192
    1900:	08 95       	ret

00001902 <__fp_pscA>:
    1902:	00 24       	eor	r0, r0
    1904:	0a 94       	dec	r0
    1906:	16 16       	cp	r1, r22
    1908:	17 06       	cpc	r1, r23
    190a:	18 06       	cpc	r1, r24
    190c:	09 06       	cpc	r0, r25
    190e:	08 95       	ret

00001910 <__fp_pscB>:
    1910:	00 24       	eor	r0, r0
    1912:	0a 94       	dec	r0
    1914:	12 16       	cp	r1, r18
    1916:	13 06       	cpc	r1, r19
    1918:	14 06       	cpc	r1, r20
    191a:	05 06       	cpc	r0, r21
    191c:	08 95       	ret

0000191e <__fp_round>:
    191e:	09 2e       	mov	r0, r25
    1920:	03 94       	inc	r0
    1922:	00 0c       	add	r0, r0
    1924:	11 f4       	brne	.+4      	; 0x192a <__fp_round+0xc>
    1926:	88 23       	and	r24, r24
    1928:	52 f0       	brmi	.+20     	; 0x193e <__fp_round+0x20>
    192a:	bb 0f       	add	r27, r27
    192c:	40 f4       	brcc	.+16     	; 0x193e <__fp_round+0x20>
    192e:	bf 2b       	or	r27, r31
    1930:	11 f4       	brne	.+4      	; 0x1936 <__fp_round+0x18>
    1932:	60 ff       	sbrs	r22, 0
    1934:	04 c0       	rjmp	.+8      	; 0x193e <__fp_round+0x20>
    1936:	6f 5f       	subi	r22, 0xFF	; 255
    1938:	7f 4f       	sbci	r23, 0xFF	; 255
    193a:	8f 4f       	sbci	r24, 0xFF	; 255
    193c:	9f 4f       	sbci	r25, 0xFF	; 255
    193e:	08 95       	ret

00001940 <__fp_split3>:
    1940:	57 fd       	sbrc	r21, 7
    1942:	90 58       	subi	r25, 0x80	; 128
    1944:	44 0f       	add	r20, r20
    1946:	55 1f       	adc	r21, r21
    1948:	59 f0       	breq	.+22     	; 0x1960 <__fp_splitA+0x10>
    194a:	5f 3f       	cpi	r21, 0xFF	; 255
    194c:	71 f0       	breq	.+28     	; 0x196a <__fp_splitA+0x1a>
    194e:	47 95       	ror	r20

00001950 <__fp_splitA>:
    1950:	88 0f       	add	r24, r24
    1952:	97 fb       	bst	r25, 7
    1954:	99 1f       	adc	r25, r25
    1956:	61 f0       	breq	.+24     	; 0x1970 <__fp_splitA+0x20>
    1958:	9f 3f       	cpi	r25, 0xFF	; 255
    195a:	79 f0       	breq	.+30     	; 0x197a <__fp_splitA+0x2a>
    195c:	87 95       	ror	r24
    195e:	08 95       	ret
    1960:	12 16       	cp	r1, r18
    1962:	13 06       	cpc	r1, r19
    1964:	14 06       	cpc	r1, r20
    1966:	55 1f       	adc	r21, r21
    1968:	f2 cf       	rjmp	.-28     	; 0x194e <__fp_split3+0xe>
    196a:	46 95       	lsr	r20
    196c:	f1 df       	rcall	.-30     	; 0x1950 <__fp_splitA>
    196e:	08 c0       	rjmp	.+16     	; 0x1980 <__fp_splitA+0x30>
    1970:	16 16       	cp	r1, r22
    1972:	17 06       	cpc	r1, r23
    1974:	18 06       	cpc	r1, r24
    1976:	99 1f       	adc	r25, r25
    1978:	f1 cf       	rjmp	.-30     	; 0x195c <__fp_splitA+0xc>
    197a:	86 95       	lsr	r24
    197c:	71 05       	cpc	r23, r1
    197e:	61 05       	cpc	r22, r1
    1980:	08 94       	sec
    1982:	08 95       	ret

00001984 <__fp_zero>:
    1984:	e8 94       	clt

00001986 <__fp_szero>:
    1986:	bb 27       	eor	r27, r27
    1988:	66 27       	eor	r22, r22
    198a:	77 27       	eor	r23, r23
    198c:	cb 01       	movw	r24, r22
    198e:	97 f9       	bld	r25, 7
    1990:	08 95       	ret

00001992 <__mulsf3>:
    1992:	0b d0       	rcall	.+22     	; 0x19aa <__mulsf3x>
    1994:	c4 cf       	rjmp	.-120    	; 0x191e <__fp_round>
    1996:	b5 df       	rcall	.-150    	; 0x1902 <__fp_pscA>
    1998:	28 f0       	brcs	.+10     	; 0x19a4 <__mulsf3+0x12>
    199a:	ba df       	rcall	.-140    	; 0x1910 <__fp_pscB>
    199c:	18 f0       	brcs	.+6      	; 0x19a4 <__mulsf3+0x12>
    199e:	95 23       	and	r25, r21
    19a0:	09 f0       	breq	.+2      	; 0x19a4 <__mulsf3+0x12>
    19a2:	a6 cf       	rjmp	.-180    	; 0x18f0 <__fp_inf>
    19a4:	ab cf       	rjmp	.-170    	; 0x18fc <__fp_nan>
    19a6:	11 24       	eor	r1, r1
    19a8:	ee cf       	rjmp	.-36     	; 0x1986 <__fp_szero>

000019aa <__mulsf3x>:
    19aa:	ca df       	rcall	.-108    	; 0x1940 <__fp_split3>
    19ac:	a0 f3       	brcs	.-24     	; 0x1996 <__mulsf3+0x4>

000019ae <__mulsf3_pse>:
    19ae:	95 9f       	mul	r25, r21
    19b0:	d1 f3       	breq	.-12     	; 0x19a6 <__mulsf3+0x14>
    19b2:	95 0f       	add	r25, r21
    19b4:	50 e0       	ldi	r21, 0x00	; 0
    19b6:	55 1f       	adc	r21, r21
    19b8:	62 9f       	mul	r22, r18
    19ba:	f0 01       	movw	r30, r0
    19bc:	72 9f       	mul	r23, r18
    19be:	bb 27       	eor	r27, r27
    19c0:	f0 0d       	add	r31, r0
    19c2:	b1 1d       	adc	r27, r1
    19c4:	63 9f       	mul	r22, r19
    19c6:	aa 27       	eor	r26, r26
    19c8:	f0 0d       	add	r31, r0
    19ca:	b1 1d       	adc	r27, r1
    19cc:	aa 1f       	adc	r26, r26
    19ce:	64 9f       	mul	r22, r20
    19d0:	66 27       	eor	r22, r22
    19d2:	b0 0d       	add	r27, r0
    19d4:	a1 1d       	adc	r26, r1
    19d6:	66 1f       	adc	r22, r22
    19d8:	82 9f       	mul	r24, r18
    19da:	22 27       	eor	r18, r18
    19dc:	b0 0d       	add	r27, r0
    19de:	a1 1d       	adc	r26, r1
    19e0:	62 1f       	adc	r22, r18
    19e2:	73 9f       	mul	r23, r19
    19e4:	b0 0d       	add	r27, r0
    19e6:	a1 1d       	adc	r26, r1
    19e8:	62 1f       	adc	r22, r18
    19ea:	83 9f       	mul	r24, r19
    19ec:	a0 0d       	add	r26, r0
    19ee:	61 1d       	adc	r22, r1
    19f0:	22 1f       	adc	r18, r18
    19f2:	74 9f       	mul	r23, r20
    19f4:	33 27       	eor	r19, r19
    19f6:	a0 0d       	add	r26, r0
    19f8:	61 1d       	adc	r22, r1
    19fa:	23 1f       	adc	r18, r19
    19fc:	84 9f       	mul	r24, r20
    19fe:	60 0d       	add	r22, r0
    1a00:	21 1d       	adc	r18, r1
    1a02:	82 2f       	mov	r24, r18
    1a04:	76 2f       	mov	r23, r22
    1a06:	6a 2f       	mov	r22, r26
    1a08:	11 24       	eor	r1, r1
    1a0a:	9f 57       	subi	r25, 0x7F	; 127
    1a0c:	50 40       	sbci	r21, 0x00	; 0
    1a0e:	8a f0       	brmi	.+34     	; 0x1a32 <__mulsf3_pse+0x84>
    1a10:	e1 f0       	breq	.+56     	; 0x1a4a <__mulsf3_pse+0x9c>
    1a12:	88 23       	and	r24, r24
    1a14:	4a f0       	brmi	.+18     	; 0x1a28 <__mulsf3_pse+0x7a>
    1a16:	ee 0f       	add	r30, r30
    1a18:	ff 1f       	adc	r31, r31
    1a1a:	bb 1f       	adc	r27, r27
    1a1c:	66 1f       	adc	r22, r22
    1a1e:	77 1f       	adc	r23, r23
    1a20:	88 1f       	adc	r24, r24
    1a22:	91 50       	subi	r25, 0x01	; 1
    1a24:	50 40       	sbci	r21, 0x00	; 0
    1a26:	a9 f7       	brne	.-22     	; 0x1a12 <__mulsf3_pse+0x64>
    1a28:	9e 3f       	cpi	r25, 0xFE	; 254
    1a2a:	51 05       	cpc	r21, r1
    1a2c:	70 f0       	brcs	.+28     	; 0x1a4a <__mulsf3_pse+0x9c>
    1a2e:	60 cf       	rjmp	.-320    	; 0x18f0 <__fp_inf>
    1a30:	aa cf       	rjmp	.-172    	; 0x1986 <__fp_szero>
    1a32:	5f 3f       	cpi	r21, 0xFF	; 255
    1a34:	ec f3       	brlt	.-6      	; 0x1a30 <__mulsf3_pse+0x82>
    1a36:	98 3e       	cpi	r25, 0xE8	; 232
    1a38:	dc f3       	brlt	.-10     	; 0x1a30 <__mulsf3_pse+0x82>
    1a3a:	86 95       	lsr	r24
    1a3c:	77 95       	ror	r23
    1a3e:	67 95       	ror	r22
    1a40:	b7 95       	ror	r27
    1a42:	f7 95       	ror	r31
    1a44:	e7 95       	ror	r30
    1a46:	9f 5f       	subi	r25, 0xFF	; 255
    1a48:	c1 f7       	brne	.-16     	; 0x1a3a <__mulsf3_pse+0x8c>
    1a4a:	fe 2b       	or	r31, r30
    1a4c:	88 0f       	add	r24, r24
    1a4e:	91 1d       	adc	r25, r1
    1a50:	96 95       	lsr	r25
    1a52:	87 95       	ror	r24
    1a54:	97 f9       	bld	r25, 7
    1a56:	08 95       	ret

00001a58 <strcat>:
    1a58:	fb 01       	movw	r30, r22
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	0d 90       	ld	r0, X+
    1a5e:	00 20       	and	r0, r0
    1a60:	e9 f7       	brne	.-6      	; 0x1a5c <strcat+0x4>
    1a62:	11 97       	sbiw	r26, 0x01	; 1
    1a64:	01 90       	ld	r0, Z+
    1a66:	0d 92       	st	X+, r0
    1a68:	00 20       	and	r0, r0
    1a6a:	e1 f7       	brne	.-8      	; 0x1a64 <strcat+0xc>
    1a6c:	08 95       	ret

00001a6e <__itoa_ncheck>:
    1a6e:	bb 27       	eor	r27, r27
    1a70:	4a 30       	cpi	r20, 0x0A	; 10
    1a72:	31 f4       	brne	.+12     	; 0x1a80 <__itoa_ncheck+0x12>
    1a74:	99 23       	and	r25, r25
    1a76:	22 f4       	brpl	.+8      	; 0x1a80 <__itoa_ncheck+0x12>
    1a78:	bd e2       	ldi	r27, 0x2D	; 45
    1a7a:	90 95       	com	r25
    1a7c:	81 95       	neg	r24
    1a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a80:	0c 94 43 0d 	jmp	0x1a86	; 0x1a86 <__utoa_common>

00001a84 <__utoa_ncheck>:
    1a84:	bb 27       	eor	r27, r27

00001a86 <__utoa_common>:
    1a86:	fb 01       	movw	r30, r22
    1a88:	55 27       	eor	r21, r21
    1a8a:	aa 27       	eor	r26, r26
    1a8c:	88 0f       	add	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	aa 1f       	adc	r26, r26
    1a92:	a4 17       	cp	r26, r20
    1a94:	10 f0       	brcs	.+4      	; 0x1a9a <__utoa_common+0x14>
    1a96:	a4 1b       	sub	r26, r20
    1a98:	83 95       	inc	r24
    1a9a:	50 51       	subi	r21, 0x10	; 16
    1a9c:	b9 f7       	brne	.-18     	; 0x1a8c <__utoa_common+0x6>
    1a9e:	a0 5d       	subi	r26, 0xD0	; 208
    1aa0:	aa 33       	cpi	r26, 0x3A	; 58
    1aa2:	08 f0       	brcs	.+2      	; 0x1aa6 <__utoa_common+0x20>
    1aa4:	a9 5d       	subi	r26, 0xD9	; 217
    1aa6:	a1 93       	st	Z+, r26
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	79 f7       	brne	.-34     	; 0x1a8a <__utoa_common+0x4>
    1aac:	b1 11       	cpse	r27, r1
    1aae:	b1 93       	st	Z+, r27
    1ab0:	11 92       	st	Z+, r1
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <strrev>

00001ab8 <fdevopen>:
    1ab8:	0f 93       	push	r16
    1aba:	1f 93       	push	r17
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	ec 01       	movw	r28, r24
    1ac2:	8b 01       	movw	r16, r22
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	31 f4       	brne	.+12     	; 0x1ad4 <fdevopen+0x1c>
    1ac8:	61 15       	cp	r22, r1
    1aca:	71 05       	cpc	r23, r1
    1acc:	19 f4       	brne	.+6      	; 0x1ad4 <fdevopen+0x1c>
    1ace:	80 e0       	ldi	r24, 0x00	; 0
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	38 c0       	rjmp	.+112    	; 0x1b44 <fdevopen+0x8c>
    1ad4:	6e e0       	ldi	r22, 0x0E	; 14
    1ad6:	70 e0       	ldi	r23, 0x00	; 0
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <calloc>
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	00 97       	sbiw	r24, 0x00	; 0
    1ae4:	a1 f3       	breq	.-24     	; 0x1ace <fdevopen+0x16>
    1ae6:	80 e8       	ldi	r24, 0x80	; 128
    1ae8:	83 83       	std	Z+3, r24	; 0x03
    1aea:	01 15       	cp	r16, r1
    1aec:	11 05       	cpc	r17, r1
    1aee:	71 f0       	breq	.+28     	; 0x1b0c <fdevopen+0x54>
    1af0:	13 87       	std	Z+11, r17	; 0x0b
    1af2:	02 87       	std	Z+10, r16	; 0x0a
    1af4:	81 e8       	ldi	r24, 0x81	; 129
    1af6:	83 83       	std	Z+3, r24	; 0x03
    1af8:	80 91 63 03 	lds	r24, 0x0363
    1afc:	90 91 64 03 	lds	r25, 0x0364
    1b00:	89 2b       	or	r24, r25
    1b02:	21 f4       	brne	.+8      	; 0x1b0c <fdevopen+0x54>
    1b04:	f0 93 64 03 	sts	0x0364, r31
    1b08:	e0 93 63 03 	sts	0x0363, r30
    1b0c:	20 97       	sbiw	r28, 0x00	; 0
    1b0e:	c9 f0       	breq	.+50     	; 0x1b42 <fdevopen+0x8a>
    1b10:	d1 87       	std	Z+9, r29	; 0x09
    1b12:	c0 87       	std	Z+8, r28	; 0x08
    1b14:	83 81       	ldd	r24, Z+3	; 0x03
    1b16:	82 60       	ori	r24, 0x02	; 2
    1b18:	83 83       	std	Z+3, r24	; 0x03
    1b1a:	80 91 65 03 	lds	r24, 0x0365
    1b1e:	90 91 66 03 	lds	r25, 0x0366
    1b22:	89 2b       	or	r24, r25
    1b24:	71 f4       	brne	.+28     	; 0x1b42 <fdevopen+0x8a>
    1b26:	f0 93 66 03 	sts	0x0366, r31
    1b2a:	e0 93 65 03 	sts	0x0365, r30
    1b2e:	80 91 67 03 	lds	r24, 0x0367
    1b32:	90 91 68 03 	lds	r25, 0x0368
    1b36:	89 2b       	or	r24, r25
    1b38:	21 f4       	brne	.+8      	; 0x1b42 <fdevopen+0x8a>
    1b3a:	f0 93 68 03 	sts	0x0368, r31
    1b3e:	e0 93 67 03 	sts	0x0367, r30
    1b42:	cf 01       	movw	r24, r30
    1b44:	df 91       	pop	r29
    1b46:	cf 91       	pop	r28
    1b48:	1f 91       	pop	r17
    1b4a:	0f 91       	pop	r16
    1b4c:	08 95       	ret

00001b4e <calloc>:
    1b4e:	0f 93       	push	r16
    1b50:	1f 93       	push	r17
    1b52:	cf 93       	push	r28
    1b54:	df 93       	push	r29
    1b56:	86 9f       	mul	r24, r22
    1b58:	80 01       	movw	r16, r0
    1b5a:	87 9f       	mul	r24, r23
    1b5c:	10 0d       	add	r17, r0
    1b5e:	96 9f       	mul	r25, r22
    1b60:	10 0d       	add	r17, r0
    1b62:	11 24       	eor	r1, r1
    1b64:	c8 01       	movw	r24, r16
    1b66:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <malloc>
    1b6a:	ec 01       	movw	r28, r24
    1b6c:	00 97       	sbiw	r24, 0x00	; 0
    1b6e:	29 f0       	breq	.+10     	; 0x1b7a <calloc+0x2c>
    1b70:	a8 01       	movw	r20, r16
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <memset>
    1b7a:	ce 01       	movw	r24, r28
    1b7c:	df 91       	pop	r29
    1b7e:	cf 91       	pop	r28
    1b80:	1f 91       	pop	r17
    1b82:	0f 91       	pop	r16
    1b84:	08 95       	ret

00001b86 <malloc>:
    1b86:	cf 93       	push	r28
    1b88:	df 93       	push	r29
    1b8a:	82 30       	cpi	r24, 0x02	; 2
    1b8c:	91 05       	cpc	r25, r1
    1b8e:	10 f4       	brcc	.+4      	; 0x1b94 <malloc+0xe>
    1b90:	82 e0       	ldi	r24, 0x02	; 2
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	e0 91 6b 03 	lds	r30, 0x036B
    1b98:	f0 91 6c 03 	lds	r31, 0x036C
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	a0 e0       	ldi	r26, 0x00	; 0
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	30 97       	sbiw	r30, 0x00	; 0
    1ba6:	39 f1       	breq	.+78     	; 0x1bf6 <malloc+0x70>
    1ba8:	40 81       	ld	r20, Z
    1baa:	51 81       	ldd	r21, Z+1	; 0x01
    1bac:	48 17       	cp	r20, r24
    1bae:	59 07       	cpc	r21, r25
    1bb0:	b8 f0       	brcs	.+46     	; 0x1be0 <malloc+0x5a>
    1bb2:	48 17       	cp	r20, r24
    1bb4:	59 07       	cpc	r21, r25
    1bb6:	71 f4       	brne	.+28     	; 0x1bd4 <malloc+0x4e>
    1bb8:	82 81       	ldd	r24, Z+2	; 0x02
    1bba:	93 81       	ldd	r25, Z+3	; 0x03
    1bbc:	10 97       	sbiw	r26, 0x00	; 0
    1bbe:	29 f0       	breq	.+10     	; 0x1bca <malloc+0x44>
    1bc0:	13 96       	adiw	r26, 0x03	; 3
    1bc2:	9c 93       	st	X, r25
    1bc4:	8e 93       	st	-X, r24
    1bc6:	12 97       	sbiw	r26, 0x02	; 2
    1bc8:	2c c0       	rjmp	.+88     	; 0x1c22 <malloc+0x9c>
    1bca:	90 93 6c 03 	sts	0x036C, r25
    1bce:	80 93 6b 03 	sts	0x036B, r24
    1bd2:	27 c0       	rjmp	.+78     	; 0x1c22 <malloc+0x9c>
    1bd4:	21 15       	cp	r18, r1
    1bd6:	31 05       	cpc	r19, r1
    1bd8:	31 f0       	breq	.+12     	; 0x1be6 <malloc+0x60>
    1bda:	42 17       	cp	r20, r18
    1bdc:	53 07       	cpc	r21, r19
    1bde:	18 f0       	brcs	.+6      	; 0x1be6 <malloc+0x60>
    1be0:	a9 01       	movw	r20, r18
    1be2:	db 01       	movw	r26, r22
    1be4:	01 c0       	rjmp	.+2      	; 0x1be8 <malloc+0x62>
    1be6:	ef 01       	movw	r28, r30
    1be8:	9a 01       	movw	r18, r20
    1bea:	bd 01       	movw	r22, r26
    1bec:	df 01       	movw	r26, r30
    1bee:	02 80       	ldd	r0, Z+2	; 0x02
    1bf0:	f3 81       	ldd	r31, Z+3	; 0x03
    1bf2:	e0 2d       	mov	r30, r0
    1bf4:	d7 cf       	rjmp	.-82     	; 0x1ba4 <malloc+0x1e>
    1bf6:	21 15       	cp	r18, r1
    1bf8:	31 05       	cpc	r19, r1
    1bfa:	f9 f0       	breq	.+62     	; 0x1c3a <malloc+0xb4>
    1bfc:	28 1b       	sub	r18, r24
    1bfe:	39 0b       	sbc	r19, r25
    1c00:	24 30       	cpi	r18, 0x04	; 4
    1c02:	31 05       	cpc	r19, r1
    1c04:	80 f4       	brcc	.+32     	; 0x1c26 <malloc+0xa0>
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0a:	61 15       	cp	r22, r1
    1c0c:	71 05       	cpc	r23, r1
    1c0e:	21 f0       	breq	.+8      	; 0x1c18 <malloc+0x92>
    1c10:	fb 01       	movw	r30, r22
    1c12:	93 83       	std	Z+3, r25	; 0x03
    1c14:	82 83       	std	Z+2, r24	; 0x02
    1c16:	04 c0       	rjmp	.+8      	; 0x1c20 <malloc+0x9a>
    1c18:	90 93 6c 03 	sts	0x036C, r25
    1c1c:	80 93 6b 03 	sts	0x036B, r24
    1c20:	fe 01       	movw	r30, r28
    1c22:	32 96       	adiw	r30, 0x02	; 2
    1c24:	44 c0       	rjmp	.+136    	; 0x1cae <malloc+0x128>
    1c26:	fe 01       	movw	r30, r28
    1c28:	e2 0f       	add	r30, r18
    1c2a:	f3 1f       	adc	r31, r19
    1c2c:	81 93       	st	Z+, r24
    1c2e:	91 93       	st	Z+, r25
    1c30:	22 50       	subi	r18, 0x02	; 2
    1c32:	31 09       	sbc	r19, r1
    1c34:	39 83       	std	Y+1, r19	; 0x01
    1c36:	28 83       	st	Y, r18
    1c38:	3a c0       	rjmp	.+116    	; 0x1cae <malloc+0x128>
    1c3a:	20 91 69 03 	lds	r18, 0x0369
    1c3e:	30 91 6a 03 	lds	r19, 0x036A
    1c42:	23 2b       	or	r18, r19
    1c44:	41 f4       	brne	.+16     	; 0x1c56 <malloc+0xd0>
    1c46:	20 91 02 01 	lds	r18, 0x0102
    1c4a:	30 91 03 01 	lds	r19, 0x0103
    1c4e:	30 93 6a 03 	sts	0x036A, r19
    1c52:	20 93 69 03 	sts	0x0369, r18
    1c56:	20 91 00 01 	lds	r18, 0x0100
    1c5a:	30 91 01 01 	lds	r19, 0x0101
    1c5e:	21 15       	cp	r18, r1
    1c60:	31 05       	cpc	r19, r1
    1c62:	41 f4       	brne	.+16     	; 0x1c74 <malloc+0xee>
    1c64:	2d b7       	in	r18, 0x3d	; 61
    1c66:	3e b7       	in	r19, 0x3e	; 62
    1c68:	40 91 04 01 	lds	r20, 0x0104
    1c6c:	50 91 05 01 	lds	r21, 0x0105
    1c70:	24 1b       	sub	r18, r20
    1c72:	35 0b       	sbc	r19, r21
    1c74:	e0 91 69 03 	lds	r30, 0x0369
    1c78:	f0 91 6a 03 	lds	r31, 0x036A
    1c7c:	e2 17       	cp	r30, r18
    1c7e:	f3 07       	cpc	r31, r19
    1c80:	a0 f4       	brcc	.+40     	; 0x1caa <malloc+0x124>
    1c82:	2e 1b       	sub	r18, r30
    1c84:	3f 0b       	sbc	r19, r31
    1c86:	28 17       	cp	r18, r24
    1c88:	39 07       	cpc	r19, r25
    1c8a:	78 f0       	brcs	.+30     	; 0x1caa <malloc+0x124>
    1c8c:	ac 01       	movw	r20, r24
    1c8e:	4e 5f       	subi	r20, 0xFE	; 254
    1c90:	5f 4f       	sbci	r21, 0xFF	; 255
    1c92:	24 17       	cp	r18, r20
    1c94:	35 07       	cpc	r19, r21
    1c96:	48 f0       	brcs	.+18     	; 0x1caa <malloc+0x124>
    1c98:	4e 0f       	add	r20, r30
    1c9a:	5f 1f       	adc	r21, r31
    1c9c:	50 93 6a 03 	sts	0x036A, r21
    1ca0:	40 93 69 03 	sts	0x0369, r20
    1ca4:	81 93       	st	Z+, r24
    1ca6:	91 93       	st	Z+, r25
    1ca8:	02 c0       	rjmp	.+4      	; 0x1cae <malloc+0x128>
    1caa:	e0 e0       	ldi	r30, 0x00	; 0
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	cf 01       	movw	r24, r30
    1cb0:	df 91       	pop	r29
    1cb2:	cf 91       	pop	r28
    1cb4:	08 95       	ret

00001cb6 <free>:
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	00 97       	sbiw	r24, 0x00	; 0
    1cbc:	09 f4       	brne	.+2      	; 0x1cc0 <free+0xa>
    1cbe:	87 c0       	rjmp	.+270    	; 0x1dce <free+0x118>
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	32 97       	sbiw	r30, 0x02	; 2
    1cc4:	13 82       	std	Z+3, r1	; 0x03
    1cc6:	12 82       	std	Z+2, r1	; 0x02
    1cc8:	c0 91 6b 03 	lds	r28, 0x036B
    1ccc:	d0 91 6c 03 	lds	r29, 0x036C
    1cd0:	20 97       	sbiw	r28, 0x00	; 0
    1cd2:	81 f4       	brne	.+32     	; 0x1cf4 <free+0x3e>
    1cd4:	20 81       	ld	r18, Z
    1cd6:	31 81       	ldd	r19, Z+1	; 0x01
    1cd8:	28 0f       	add	r18, r24
    1cda:	39 1f       	adc	r19, r25
    1cdc:	80 91 69 03 	lds	r24, 0x0369
    1ce0:	90 91 6a 03 	lds	r25, 0x036A
    1ce4:	82 17       	cp	r24, r18
    1ce6:	93 07       	cpc	r25, r19
    1ce8:	79 f5       	brne	.+94     	; 0x1d48 <free+0x92>
    1cea:	f0 93 6a 03 	sts	0x036A, r31
    1cee:	e0 93 69 03 	sts	0x0369, r30
    1cf2:	6d c0       	rjmp	.+218    	; 0x1dce <free+0x118>
    1cf4:	de 01       	movw	r26, r28
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	ae 17       	cp	r26, r30
    1cfc:	bf 07       	cpc	r27, r31
    1cfe:	50 f4       	brcc	.+20     	; 0x1d14 <free+0x5e>
    1d00:	12 96       	adiw	r26, 0x02	; 2
    1d02:	4d 91       	ld	r20, X+
    1d04:	5c 91       	ld	r21, X
    1d06:	13 97       	sbiw	r26, 0x03	; 3
    1d08:	9d 01       	movw	r18, r26
    1d0a:	41 15       	cp	r20, r1
    1d0c:	51 05       	cpc	r21, r1
    1d0e:	09 f1       	breq	.+66     	; 0x1d52 <free+0x9c>
    1d10:	da 01       	movw	r26, r20
    1d12:	f3 cf       	rjmp	.-26     	; 0x1cfa <free+0x44>
    1d14:	b3 83       	std	Z+3, r27	; 0x03
    1d16:	a2 83       	std	Z+2, r26	; 0x02
    1d18:	40 81       	ld	r20, Z
    1d1a:	51 81       	ldd	r21, Z+1	; 0x01
    1d1c:	84 0f       	add	r24, r20
    1d1e:	95 1f       	adc	r25, r21
    1d20:	8a 17       	cp	r24, r26
    1d22:	9b 07       	cpc	r25, r27
    1d24:	71 f4       	brne	.+28     	; 0x1d42 <free+0x8c>
    1d26:	8d 91       	ld	r24, X+
    1d28:	9c 91       	ld	r25, X
    1d2a:	11 97       	sbiw	r26, 0x01	; 1
    1d2c:	84 0f       	add	r24, r20
    1d2e:	95 1f       	adc	r25, r21
    1d30:	02 96       	adiw	r24, 0x02	; 2
    1d32:	91 83       	std	Z+1, r25	; 0x01
    1d34:	80 83       	st	Z, r24
    1d36:	12 96       	adiw	r26, 0x02	; 2
    1d38:	8d 91       	ld	r24, X+
    1d3a:	9c 91       	ld	r25, X
    1d3c:	13 97       	sbiw	r26, 0x03	; 3
    1d3e:	93 83       	std	Z+3, r25	; 0x03
    1d40:	82 83       	std	Z+2, r24	; 0x02
    1d42:	21 15       	cp	r18, r1
    1d44:	31 05       	cpc	r19, r1
    1d46:	29 f4       	brne	.+10     	; 0x1d52 <free+0x9c>
    1d48:	f0 93 6c 03 	sts	0x036C, r31
    1d4c:	e0 93 6b 03 	sts	0x036B, r30
    1d50:	3e c0       	rjmp	.+124    	; 0x1dce <free+0x118>
    1d52:	d9 01       	movw	r26, r18
    1d54:	13 96       	adiw	r26, 0x03	; 3
    1d56:	fc 93       	st	X, r31
    1d58:	ee 93       	st	-X, r30
    1d5a:	12 97       	sbiw	r26, 0x02	; 2
    1d5c:	4d 91       	ld	r20, X+
    1d5e:	5d 91       	ld	r21, X+
    1d60:	a4 0f       	add	r26, r20
    1d62:	b5 1f       	adc	r27, r21
    1d64:	ea 17       	cp	r30, r26
    1d66:	fb 07       	cpc	r31, r27
    1d68:	79 f4       	brne	.+30     	; 0x1d88 <free+0xd2>
    1d6a:	80 81       	ld	r24, Z
    1d6c:	91 81       	ldd	r25, Z+1	; 0x01
    1d6e:	84 0f       	add	r24, r20
    1d70:	95 1f       	adc	r25, r21
    1d72:	02 96       	adiw	r24, 0x02	; 2
    1d74:	d9 01       	movw	r26, r18
    1d76:	11 96       	adiw	r26, 0x01	; 1
    1d78:	9c 93       	st	X, r25
    1d7a:	8e 93       	st	-X, r24
    1d7c:	82 81       	ldd	r24, Z+2	; 0x02
    1d7e:	93 81       	ldd	r25, Z+3	; 0x03
    1d80:	13 96       	adiw	r26, 0x03	; 3
    1d82:	9c 93       	st	X, r25
    1d84:	8e 93       	st	-X, r24
    1d86:	12 97       	sbiw	r26, 0x02	; 2
    1d88:	e0 e0       	ldi	r30, 0x00	; 0
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	19 f0       	breq	.+6      	; 0x1d9a <free+0xe4>
    1d94:	fe 01       	movw	r30, r28
    1d96:	ec 01       	movw	r28, r24
    1d98:	f9 cf       	rjmp	.-14     	; 0x1d8c <free+0xd6>
    1d9a:	ce 01       	movw	r24, r28
    1d9c:	02 96       	adiw	r24, 0x02	; 2
    1d9e:	28 81       	ld	r18, Y
    1da0:	39 81       	ldd	r19, Y+1	; 0x01
    1da2:	82 0f       	add	r24, r18
    1da4:	93 1f       	adc	r25, r19
    1da6:	20 91 69 03 	lds	r18, 0x0369
    1daa:	30 91 6a 03 	lds	r19, 0x036A
    1dae:	28 17       	cp	r18, r24
    1db0:	39 07       	cpc	r19, r25
    1db2:	69 f4       	brne	.+26     	; 0x1dce <free+0x118>
    1db4:	30 97       	sbiw	r30, 0x00	; 0
    1db6:	29 f4       	brne	.+10     	; 0x1dc2 <free+0x10c>
    1db8:	10 92 6c 03 	sts	0x036C, r1
    1dbc:	10 92 6b 03 	sts	0x036B, r1
    1dc0:	02 c0       	rjmp	.+4      	; 0x1dc6 <free+0x110>
    1dc2:	13 82       	std	Z+3, r1	; 0x03
    1dc4:	12 82       	std	Z+2, r1	; 0x02
    1dc6:	d0 93 6a 03 	sts	0x036A, r29
    1dca:	c0 93 69 03 	sts	0x0369, r28
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	08 95       	ret

00001dd4 <memset>:
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	01 c0       	rjmp	.+2      	; 0x1dda <memset+0x6>
    1dd8:	6d 93       	st	X+, r22
    1dda:	41 50       	subi	r20, 0x01	; 1
    1ddc:	50 40       	sbci	r21, 0x00	; 0
    1dde:	e0 f7       	brcc	.-8      	; 0x1dd8 <memset+0x4>
    1de0:	08 95       	ret

00001de2 <strrev>:
    1de2:	dc 01       	movw	r26, r24
    1de4:	fc 01       	movw	r30, r24
    1de6:	67 2f       	mov	r22, r23
    1de8:	71 91       	ld	r23, Z+
    1dea:	77 23       	and	r23, r23
    1dec:	e1 f7       	brne	.-8      	; 0x1de6 <strrev+0x4>
    1dee:	32 97       	sbiw	r30, 0x02	; 2
    1df0:	04 c0       	rjmp	.+8      	; 0x1dfa <strrev+0x18>
    1df2:	7c 91       	ld	r23, X
    1df4:	6d 93       	st	X+, r22
    1df6:	70 83       	st	Z, r23
    1df8:	62 91       	ld	r22, -Z
    1dfa:	ae 17       	cp	r26, r30
    1dfc:	bf 07       	cpc	r27, r31
    1dfe:	c8 f3       	brcs	.-14     	; 0x1df2 <strrev+0x10>
    1e00:	08 95       	ret

00001e02 <_exit>:
    1e02:	f8 94       	cli

00001e04 <__stop_program>:
    1e04:	ff cf       	rjmp	.-2      	; 0x1e04 <__stop_program>
